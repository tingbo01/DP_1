
CANOpen_stm32f103rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a000  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  0800a1e4  0800a1e4  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab18  0800ab18  0000c438  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab18  0800ab18  0000bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab20  0800ab20  0000c438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab24  0800ab24  0000bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000438  20000000  0800ab28  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000438  0800af60  0000c438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800af60  0000c664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c438  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d14a  00000000  00000000  0000c461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046ff  00000000  00000000  000295ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0002dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc9  00000000  00000000  0002ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6f4  00000000  00000000  0002fbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f0e  00000000  00000000  0004e2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2c06  00000000  00000000  000681db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ade1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  0010ae24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0010fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000438 	.word	0x20000438
 8000200:	00000000 	.word	0x00000000
 8000204:	0800a1cc 	.word	0x0800a1cc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000043c 	.word	0x2000043c
 8000220:	0800a1cc 	.word	0x0800a1cc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	73fb      	strb	r3, [r7, #15]
    return value;
 8000242:	7bfb      	ldrb	r3, [r7, #15]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr

0800024e <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
 8000256:	460b      	mov	r3, r1
 8000258:	70fb      	strb	r3, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 800025a:	78fa      	ldrb	r2, [r7, #3]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000260:	2301      	movs	r3, #1
}
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 800027c:	2304      	movs	r3, #4
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <OD_getIndex>:
 * @param entry Object Dictionary entry.
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <OD_getIndex+0x14>
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	e000      	b.n	800029e <OD_getIndex+0x16>
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80002b8:	2305      	movs	r3, #5
 80002ba:	e003      	b.n	80002c4 <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80002c2:	2300      	movs	r3, #0
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr

080002ce <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af02      	add	r7, sp, #8
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	607a      	str	r2, [r7, #4]
 80002d8:	603b      	str	r3, [r7, #0]
 80002da:	460b      	mov	r3, r1
 80002dc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80002de:	7af9      	ldrb	r1, [r7, #11]
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	2304      	movs	r3, #4
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	68f8      	ldr	r0, [r7, #12]
 80002ea:	f001 fb8f 	bl	8001a0c <OD_get_value>
 80002ee:	4603      	mov	r3, r0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
 8000304:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00c      	beq.n	8000326 <OD_read_1014_default+0x2e>
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	7d1b      	ldrb	r3, [r3, #20]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d108      	bne.n	8000326 <OD_read_1014_default+0x2e>
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d005      	beq.n	8000326 <OD_read_1014_default+0x2e>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b03      	cmp	r3, #3
 800031e:	d902      	bls.n	8000326 <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d101      	bne.n	800032a <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 8000326:	2309      	movs	r3, #9
 8000328:	e01a      	b.n	8000360 <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <OD_read_1014_default+0x44>
 8000338:	2300      	movs	r3, #0
 800033a:	e001      	b.n	8000340 <OD_read_1014_default+0x48>
 800033c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000340:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000348:	3380      	adds	r3, #128	@ 0x80
 800034a:	693a      	ldr	r2, [r7, #16]
 800034c:	4313      	orrs	r3, r2
 800034e:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8000350:	6939      	ldr	r1, [r7, #16]
 8000352:	68b8      	ldr	r0, [r7, #8]
 8000354:	f7ff ff8a 	bl	800026c <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2204      	movs	r2, #4
 800035c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800035e:	2300      	movs	r3, #0
}
 8000360:	4618      	mov	r0, r3
 8000362:	3718      	adds	r7, #24
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d00f      	beq.n	800039c <OD_read_1003+0x34>
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d00c      	beq.n	800039c <OD_read_1003+0x34>
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d009      	beq.n	800039c <OD_read_1003+0x34>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2b03      	cmp	r3, #3
 800038c:	d803      	bhi.n	8000396 <OD_read_1003+0x2e>
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	7d1b      	ldrb	r3, [r3, #20]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d102      	bne.n	800039c <OD_read_1003+0x34>
        || (count < 1U)) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d101      	bne.n	80003a0 <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 800039c:	2309      	movs	r3, #9
 800039e:	e04c      	b.n	800043a <OD_read_1003+0xd2>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	7f1b      	ldrb	r3, [r3, #28]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d801      	bhi.n	80003b2 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 80003ae:	2309      	movs	r3, #9
 80003b0:	e043      	b.n	800043a <OD_read_1003+0xd2>
    }
    if (stream->subIndex == 0U) {
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	7d1b      	ldrb	r3, [r3, #20]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d10b      	bne.n	80003d2 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003c0:	4619      	mov	r1, r3
 80003c2:	68b8      	ldr	r0, [r7, #8]
 80003c4:	f7ff ff43 	bl	800024e <CO_setUint8>

        *countRead = sizeof(uint8_t);
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	2201      	movs	r2, #1
 80003cc:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	e033      	b.n	800043a <OD_read_1003+0xd2>
    } else if (stream->subIndex <= em->fifoCount) {
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	7d1a      	ldrb	r2, [r3, #20]
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d82b      	bhi.n	8000438 <OD_read_1003+0xd0>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	7f5b      	ldrb	r3, [r3, #29]
 80003e4:	461a      	mov	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	7d1b      	ldrb	r3, [r3, #20]
 80003ea:	1ad3      	subs	r3, r2, r3
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 80003f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	da07      	bge.n	8000408 <OD_read_1003+0xa0>
            index += (int16_t)em->fifoSize;
 80003f8:	693b      	ldr	r3, [r7, #16]
 80003fa:	7f1b      	ldrb	r3, [r3, #28]
 80003fc:	461a      	mov	r2, r3
 80003fe:	8afb      	ldrh	r3, [r7, #22]
 8000400:	4413      	add	r3, r2
 8000402:	b29b      	uxth	r3, r3
 8000404:	82fb      	strh	r3, [r7, #22]
 8000406:	e007      	b.n	8000418 <OD_read_1003+0xb0>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8000408:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800040c:	693a      	ldr	r2, [r7, #16]
 800040e:	7f12      	ldrb	r2, [r2, #28]
 8000410:	4293      	cmp	r3, r2
 8000412:	db01      	blt.n	8000418 <OD_read_1003+0xb0>
            return ODR_DEV_INCOMPAT;
 8000414:	2309      	movs	r3, #9
 8000416:	e010      	b.n	800043a <OD_read_1003+0xd2>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	699a      	ldr	r2, [r3, #24]
 800041c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000420:	00db      	lsls	r3, r3, #3
 8000422:	4413      	add	r3, r2
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4619      	mov	r1, r3
 8000428:	68b8      	ldr	r0, [r7, #8]
 800042a:	f7ff ff1f 	bl	800026c <CO_setUint32>

        *countRead = sizeof(uint32_t);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	2204      	movs	r2, #4
 8000432:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	e000      	b.n	800043a <OD_read_1003+0xd2>
    } else {
        return ODR_NO_DATA;
 8000438:	2319      	movs	r3, #25
    }
}
 800043a:	4618      	mov	r0, r3
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000442:	b580      	push	{r7, lr}
 8000444:	b086      	sub	sp, #24
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
 800044e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d00c      	beq.n	8000470 <OD_write_1003+0x2e>
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	7d1b      	ldrb	r3, [r3, #20]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d108      	bne.n	8000470 <OD_write_1003+0x2e>
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d005      	beq.n	8000470 <OD_write_1003+0x2e>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d102      	bne.n	8000470 <OD_write_1003+0x2e>
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d101      	bne.n	8000474 <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 8000470:	2309      	movs	r3, #9
 8000472:	e012      	b.n	800049a <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 8000474:	68b8      	ldr	r0, [r7, #8]
 8000476:	f7ff fedd 	bl	8000234 <CO_getUint8>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000480:	230f      	movs	r3, #15
 8000482:	e00a      	b.n	800049a <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b088      	sub	sp, #32
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
 80004b0:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 80004b2:	2300      	movs	r3, #0
 80004b4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d01a      	beq.n	80004f2 <CO_EM_init+0x4e>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d017      	beq.n	80004f2 <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d103      	bne.n	80004d0 <CO_EM_init+0x2c>
 80004c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d810      	bhi.n	80004f2 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 80004d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d00d      	beq.n	80004f2 <CO_EM_init+0x4e>
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00a      	beq.n	80004f2 <CO_EM_init+0x4e>
 80004dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d006      	beq.n	80004f2 <CO_EM_init+0x4e>
 80004e4:	f997 3030 	ldrsb.w	r3, [r7, #48]	@ 0x30
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	db02      	blt.n	80004f2 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 80004ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	e0a7      	b.n	8000648 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 80004f8:	2250      	movs	r2, #80	@ 0x50
 80004fa:	2100      	movs	r1, #0
 80004fc:	68f8      	ldr	r0, [r7, #12]
 80004fe:	f009 fa21 	bl	8009944 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000508:	2300      	movs	r3, #0
 800050a:	2201      	movs	r2, #1
 800050c:	2100      	movs	r1, #0
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f001 faf6 	bl	8001b00 <OD_getPtr>
 8000514:	4602      	mov	r2, r0
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10c      	bne.n	800053c <CO_EM_init+0x98>
        if (errInfo != NULL) {
 8000522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000524:	2b00      	cmp	r3, #0
 8000526:	d006      	beq.n	8000536 <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff fead 	bl	8000288 <OD_getIndex>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000534:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000536:	f06f 030b 	mvn.w	r3, #11
 800053a:	e085      	b.n	8000648 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	683a      	ldr	r2, [r7, #0]
 8000548:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000550:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8000552:	f107 0210 	add.w	r2, r7, #16
 8000556:	2301      	movs	r3, #1
 8000558:	2100      	movs	r1, #0
 800055a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800055c:	f7ff feb7 	bl	80002ce <OD_get_u32>
 8000560:	4603      	mov	r3, r0
 8000562:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 8000564:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d104      	bne.n	8000576 <CO_EM_init+0xd2>
 800056c:	693a      	ldr	r2, [r7, #16]
 800056e:	4b38      	ldr	r3, [pc, #224]	@ (8000650 <CO_EM_init+0x1ac>)
 8000570:	4013      	ands	r3, r2
 8000572:	2b00      	cmp	r3, #0
 8000574:	d010      	beq.n	8000598 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 8000576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000578:	2b00      	cmp	r3, #0
 800057a:	d006      	beq.n	800058a <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 800057c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800057e:	f7ff fe83 	bl	8000288 <OD_getIndex>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000588:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 800058a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8000592:	f06f 030b 	mvn.w	r3, #11
 8000596:	e057      	b.n	8000648 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 8000598:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800059c:	b29b      	uxth	r3, r3
 800059e:	3380      	adds	r3, #128	@ 0x80
 80005a0:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	43db      	mvns	r3, r3
 80005a6:	0fdb      	lsrs	r3, r3, #31
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	625a      	str	r2, [r3, #36]	@ 0x24

    em->OD_1014_extension.object = em;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68fa      	ldr	r2, [r7, #12]
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4a26      	ldr	r2, [pc, #152]	@ (8000654 <CO_EM_init+0x1b0>)
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a26      	ldr	r2, [pc, #152]	@ (8000658 <CO_EM_init+0x1b4>)
 80005c0:	639a      	str	r2, [r3, #56]	@ 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3330      	adds	r3, #48	@ 0x30
 80005c6:	4619      	mov	r1, r3
 80005c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005ca:	f7ff fe6d 	bl	80002a8 <OD_extension_init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80005d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d00c      	beq.n	80005f4 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 80005da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d006      	beq.n	80005ee <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80005e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005e2:	f7ff fe51 	bl	8000288 <OD_getIndex>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ec:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80005ee:	f06f 030b 	mvn.w	r3, #11
 80005f2:	e029      	b.n	8000648 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80005fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 80005fe:	8aba      	ldrh	r2, [r7, #20]
 8000600:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000602:	2300      	movs	r3, #0
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2308      	movs	r3, #8
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	68b8      	ldr	r0, [r7, #8]
 800060e:	f006 f867 	bl	80066e0 <CO_CANtxBufferInit>
 8000612:	4602      	mov	r2, r0
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (em->CANtxBuff == NULL) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	e010      	b.n	8000648 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	641a      	str	r2, [r3, #64]	@ 0x40
    em->OD_1003_extension.read = OD_read_1003;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <CO_EM_init+0x1b8>)
 8000630:	645a      	str	r2, [r3, #68]	@ 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <CO_EM_init+0x1bc>)
 8000636:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3340      	adds	r3, #64	@ 0x40
 800063c:	4619      	mov	r1, r3
 800063e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000640:	f7ff fe32 	bl	80002a8 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8000644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	7ffff800 	.word	0x7ffff800
 8000654:	080002f9 	.word	0x080002f9
 8000658:	08001603 	.word	0x08001603
 800065c:	08000369 	.word	0x08000369
 8000660:	08000443 	.word	0x08000443

08000664 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af02      	add	r7, sp, #8
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
 8000670:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	8a5b      	ldrh	r3, [r3, #18]
 8000678:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	8a1b      	ldrh	r3, [r3, #16]
 800067e:	8aba      	ldrh	r2, [r7, #20]
 8000680:	429a      	cmp	r2, r3
 8000682:	f000 80a3 	beq.w	80007cc <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	8a1a      	ldrh	r2, [r3, #16]
 800068a:	8abb      	ldrh	r3, [r7, #20]
 800068c:	4053      	eors	r3, r2
 800068e:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	8aba      	ldrh	r2, [r7, #20]
 8000694:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 8000696:	8a7a      	ldrh	r2, [r7, #18]
 8000698:	f240 1301 	movw	r3, #257	@ 0x101
 800069c:	4013      	ands	r3, r2
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d010      	beq.n	80006c4 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 80006a2:	8aba      	ldrh	r2, [r7, #20]
 80006a4:	f240 1301 	movw	r3, #257	@ 0x101
 80006a8:	4013      	ands	r3, r2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	bf14      	ite	ne
 80006ae:	2301      	movne	r3, #1
 80006b0:	2300      	moveq	r3, #0
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	2300      	movs	r3, #0
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2300      	movs	r3, #0
 80006bc:	2201      	movs	r2, #1
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f000 f91b 	bl	80008fa <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 80006c4:	8a7b      	ldrh	r3, [r7, #18]
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d010      	beq.n	80006f0 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80006ce:	8abb      	ldrh	r3, [r7, #20]
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	2300      	movs	r3, #0
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	f248 1320 	movw	r3, #33056	@ 0x8120
 80006e8:	2207      	movs	r2, #7
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f000 f905 	bl	80008fa <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 80006f0:	8a7b      	ldrh	r3, [r7, #18]
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d010      	beq.n	800071c <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 80006fa:	8abb      	ldrh	r3, [r7, #20]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2300      	movs	r3, #0
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	f248 1340 	movw	r3, #33088	@ 0x8140
 8000714:	2212      	movs	r2, #18
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f000 f8ef 	bl	80008fa <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 800071c:	8a7b      	ldrh	r3, [r7, #18]
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	2b00      	cmp	r3, #0
 8000724:	d010      	beq.n	8000748 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8000726:	8abb      	ldrh	r3, [r7, #20]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	2b00      	cmp	r3, #0
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	2300      	movs	r3, #0
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	f248 1310 	movw	r3, #33040	@ 0x8110
 8000740:	2214      	movs	r2, #20
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f000 f8d9 	bl	80008fa <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 8000748:	8a7b      	ldrh	r3, [r7, #18]
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	2b00      	cmp	r3, #0
 8000750:	d010      	beq.n	8000774 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 8000752:	8abb      	ldrh	r3, [r7, #20]
 8000754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	2300      	movs	r3, #0
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800076c:	2215      	movs	r2, #21
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f000 f8c3 	bl	80008fa <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 8000774:	8a7b      	ldrh	r3, [r7, #18]
 8000776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800077a:	2b00      	cmp	r3, #0
 800077c:	d010      	beq.n	80007a0 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 800077e:	8abb      	ldrh	r3, [r7, #20]
 8000780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4619      	mov	r1, r3
 8000790:	2300      	movs	r3, #0
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	f248 1320 	movw	r3, #33056	@ 0x8120
 8000798:	2206      	movs	r2, #6
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f000 f8ad 	bl	80008fa <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 80007a0:	8a7b      	ldrh	r3, [r7, #18]
 80007a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d010      	beq.n	80007cc <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 80007aa:	8abb      	ldrh	r3, [r7, #20]
 80007ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	bf14      	ite	ne
 80007b4:	2301      	movne	r3, #1
 80007b6:	2300      	moveq	r3, #0
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4619      	mov	r1, r3
 80007bc:	2300      	movs	r3, #0
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	f248 1310 	movw	r3, #33040	@ 0x8110
 80007c4:	2213      	movs	r2, #19
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f000 f897 	bl	80008fa <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	795b      	ldrb	r3, [r3, #5]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	789b      	ldrb	r3, [r3, #2]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d103      	bne.n	80007f0 <CO_EM_process+0x18c>
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	78db      	ldrb	r3, [r3, #3]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d003      	beq.n	80007f8 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 80007f0:	7dfb      	ldrb	r3, [r7, #23]
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	7a1b      	ldrb	r3, [r3, #8]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d103      	bne.n	8000808 <CO_EM_process+0x1a4>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d003      	beq.n	8000810 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800080e:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	7dfa      	ldrb	r2, [r7, #23]
 8000816:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d067      	beq.n	80008ee <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	7f1b      	ldrb	r3, [r3, #28]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d965      	bls.n	80008f2 <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	7f9b      	ldrb	r3, [r3, #30]
 800082a:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d15d      	bne.n	80008f2 <CO_EM_process+0x28e>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	7f5b      	ldrb	r3, [r3, #29]
 800083a:	7c7a      	ldrb	r2, [r7, #17]
 800083c:	429a      	cmp	r2, r3
 800083e:	d058      	beq.n	80008f2 <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	699a      	ldr	r2, [r3, #24]
 8000844:	7c7b      	ldrb	r3, [r7, #17]
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4413      	add	r3, r2
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	041a      	lsls	r2, r3, #16
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	6998      	ldr	r0, [r3, #24]
 8000854:	7c7b      	ldrb	r3, [r7, #17]
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4403      	add	r3, r0
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000862:	1d58      	adds	r0, r3, #5
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	699a      	ldr	r2, [r3, #24]
 8000868:	7c7b      	ldrb	r3, [r7, #17]
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	2208      	movs	r2, #8
 8000870:	4619      	mov	r1, r3
 8000872:	f009 f8f2 	bl	8009a5a <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087e:	4619      	mov	r1, r3
 8000880:	4610      	mov	r0, r2
 8000882:	f005 ffa7 	bl	80067d4 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 8000886:	7c7b      	ldrb	r3, [r7, #17]
 8000888:	3301      	adds	r3, #1
 800088a:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	7f1b      	ldrb	r3, [r3, #28]
 8000890:	7c7a      	ldrb	r2, [r7, #17]
 8000892:	429a      	cmp	r2, r3
 8000894:	d201      	bcs.n	800089a <CO_EM_process+0x236>
 8000896:	7c7a      	ldrb	r2, [r7, #17]
 8000898:	e000      	b.n	800089c <CO_EM_process+0x238>
 800089a:	2200      	movs	r2, #0
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	7fdb      	ldrb	r3, [r3, #31]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10c      	bne.n	80008c2 <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2202      	movs	r2, #2
 80008ac:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 80008ae:	2300      	movs	r3, #0
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	2220      	movs	r2, #32
 80008b8:	2101      	movs	r1, #1
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f000 f81d 	bl	80008fa <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80008c0:	e017      	b.n	80008f2 <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7fdb      	ldrb	r3, [r3, #31]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d113      	bne.n	80008f2 <CO_EM_process+0x28e>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	7f9a      	ldrb	r2, [r3, #30]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	7f5b      	ldrb	r3, [r3, #29]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d10d      	bne.n	80008f2 <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2200      	movs	r2, #0
 80008da:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 80008dc:	2300      	movs	r3, #0
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2300      	movs	r3, #0
 80008e2:	2220      	movs	r2, #32
 80008e4:	2100      	movs	r1, #0
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f807 	bl	80008fa <CO_error>
    return;
 80008ec:	e001      	b.n	80008f2 <CO_EM_process+0x28e>
        return;
 80008ee:	bf00      	nop
 80008f0:	e000      	b.n	80008f4 <CO_EM_process+0x290>
    return;
 80008f2:	bf00      	nop
}
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 80008fa:	b480      	push	{r7}
 80008fc:	b08d      	sub	sp, #52	@ 0x34
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	4611      	mov	r1, r2
 8000906:	461a      	mov	r2, r3
 8000908:	460b      	mov	r3, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 80a6 	beq.w	8000a64 <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	2201      	movs	r2, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8000930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000934:	2b09      	cmp	r3, #9
 8000936:	d90a      	bls.n	800094e <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000938:	2305      	movs	r3, #5
 800093a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 800093e:	2301      	movs	r3, #1
 8000940:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000944:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 8000948:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 800094e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000960:	4013      	ands	r3, r2
 8000962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 800096c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000970:	2b00      	cmp	r3, #0
 8000972:	d006      	beq.n	8000982 <CO_error+0x88>
            return;
 8000974:	e079      	b.n	8000a6a <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 8000976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800097a:	2b00      	cmp	r3, #0
 800097c:	d074      	beq.n	8000a68 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 800097e:	2300      	movs	r3, #0
 8000980:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	061a      	lsls	r2, r3, #24
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	4313      	orrs	r3, r2
 800098a:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 800098c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800098e:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000994:	f3ef 8210 	mrs	r2, PRIMASK
 8000998:	617a      	str	r2, [r7, #20]
  return(result);
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800099e:	b672      	cpsid	i
}
 80009a0:	bf00      	nop
    if (setError) {
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d008      	beq.n	80009ba <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 80009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	e00b      	b.n	80009d2 <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 80009ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b25a      	sxtb	r2, r3
 80009c0:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80009c4:	43db      	mvns	r3, r3
 80009c6:	b25b      	sxtb	r3, r3
 80009c8:	4013      	ands	r3, r2
 80009ca:	b25b      	sxtb	r3, r3
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d0:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	7f1b      	ldrb	r3, [r3, #28]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d93c      	bls.n	8000a54 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	7f5b      	ldrb	r3, [r3, #29]
 80009de:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 80009e0:	7efb      	ldrb	r3, [r7, #27]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	7f1b      	ldrb	r3, [r3, #28]
 80009ec:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d302      	bcc.n	80009fa <CO_error+0x100>
            fifoWrPtrNext = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	7f9b      	ldrb	r3, [r3, #30]
 80009fe:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d103      	bne.n	8000a0e <CO_error+0x114>
            em->fifoOverflow = 1;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	77da      	strb	r2, [r3, #31]
 8000a0c:	e022      	b.n	8000a54 <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	699a      	ldr	r2, [r3, #24]
 8000a12:	7efb      	ldrb	r3, [r7, #27]
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4413      	add	r3, r2
 8000a18:	6a3a      	ldr	r2, [r7, #32]
 8000a1a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	699a      	ldr	r2, [r3, #24]
 8000a20:	7efb      	ldrb	r3, [r7, #27]
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4413      	add	r3, r2
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000a30:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	7f1b      	ldrb	r3, [r3, #28]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <CO_error+0x15a>
                em->fifoCount++;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	f383 8810 	msr	PRIMASK, r3
}
 8000a62:	e002      	b.n	8000a6a <CO_error+0x170>
        return;
 8000a64:	bf00      	nop
 8000a66:	e000      	b.n	8000a6a <CO_error+0x170>
            return;
 8000a68:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 8000a6a:	3734      	adds	r7, #52	@ 0x34
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
    return value;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <OD_getIndex+0x14>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	e000      	b.n	8000aa2 <OD_getIndex+0x16>
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000abc:	2305      	movs	r3, #5
 8000abe:	e003      	b.n	8000ac8 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af02      	add	r7, sp, #8
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	460b      	mov	r3, r1
 8000ae0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000ae2:	7af9      	ldrb	r1, [r7, #11]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2304      	movs	r3, #4
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 ff8d 	bl	8001a0c <OD_get_value>
 8000af2:	4603      	mov	r3, r0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3305      	adds	r3, #5
 8000b14:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 8000b16:	7cfb      	ldrb	r3, [r7, #19]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d107      	bne.n	8000b2c <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b25a      	sxtb	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	371c      	adds	r7, #28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b088      	sub	sp, #32
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d012      	beq.n	8000b76 <OD_write_1016+0x40>
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00f      	beq.n	8000b76 <OD_write_1016+0x40>
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	7d1b      	ldrb	r3, [r3, #20]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	7d1a      	ldrb	r2, [r3, #20]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	7a1b      	ldrb	r3, [r3, #8]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d805      	bhi.n	8000b76 <OD_write_1016+0x40>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d102      	bne.n	8000b76 <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d101      	bne.n	8000b7a <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 8000b76:	2309      	movs	r3, #9
 8000b78:	e020      	b.n	8000bbc <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000b7a:	68b8      	ldr	r0, [r7, #8]
 8000b7c:	f7ff ff79 	bl	8000a72 <CO_getUint32>
 8000b80:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	7d1b      	ldrb	r3, [r3, #20]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	8abb      	ldrh	r3, [r7, #20]
 8000b96:	7dfa      	ldrb	r2, [r7, #23]
 8000b98:	69f8      	ldr	r0, [r7, #28]
 8000b9a:	f000 f8bd 	bl	8000d18 <CO_HBconsumer_initEntry>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 8000ba2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000baa:	2308      	movs	r3, #8
 8000bac:	e006      	b.n	8000bbc <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 fd24 	bl	8001602 <OD_writeOriginal>
 8000bba:	4603      	mov	r3, r0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00b      	beq.n	8000bf0 <CO_HBconsumer_init+0x2c>
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d008      	beq.n	8000bf0 <CO_HBconsumer_init+0x2c>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d005      	beq.n	8000bf0 <CO_HBconsumer_init+0x2c>
 8000be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8000bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	e087      	b.n	8000d06 <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000bf6:	2230      	movs	r2, #48	@ 0x30
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	f008 fea2 	bl	8009944 <memset>
    HBcons->em = em;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c10:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000c16:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8000c18:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 8000c20:	4293      	cmp	r3, r2
 8000c22:	bf28      	it	cs
 8000c24:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	77fb      	strb	r3, [r7, #31]
 8000c30:	e041      	b.n	8000cb6 <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b2d9      	uxtb	r1, r3
 8000c38:	f107 0214 	add.w	r2, r7, #20
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c40:	f7ff ff47 	bl	8000ad2 <OD_get_u32>
 8000c44:	4603      	mov	r3, r0
 8000c46:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000c48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00c      	beq.n	8000c6a <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 8000c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c58:	f7ff ff18 	bl	8000a8c <OD_getIndex>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c62:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8000c64:	f06f 030b 	mvn.w	r3, #11
 8000c68:	e04d      	b.n	8000d06 <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	0c1b      	lsrs	r3, r3, #16
 8000c6e:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 8000c74:	8b7b      	ldrh	r3, [r7, #26]
 8000c76:	7f7a      	ldrb	r2, [r7, #29]
 8000c78:	7ff9      	ldrb	r1, [r7, #31]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f000 f84c 	bl	8000d18 <CO_HBconsumer_initEntry>
 8000c80:	4603      	mov	r3, r0
 8000c82:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000c84:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d011      	beq.n	8000cb0 <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 8000c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c94:	f7ff fefa 	bl	8000a8c <OD_getIndex>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9e:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 8000ca0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000ca4:	f113 0f0c 	cmn.w	r3, #12
 8000ca8:	d002      	beq.n	8000cb0 <CO_HBconsumer_init+0xec>
                return ret;
 8000caa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000cae:	e02a      	b.n	8000d06 <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000cb0:	7ffb      	ldrb	r3, [r7, #31]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	77fb      	strb	r3, [r7, #31]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	7a1b      	ldrb	r3, [r3, #8]
 8000cba:	7ffa      	ldrb	r2, [r7, #31]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d3b8      	bcc.n	8000c32 <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <CO_HBconsumer_init+0x14c>)
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4a11      	ldr	r2, [pc, #68]	@ (8000d14 <CO_HBconsumer_init+0x150>)
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3320      	adds	r3, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cda:	f7ff fee7 	bl	8000aac <OD_extension_init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8000ce2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00c      	beq.n	8000d04 <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8000cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d006      	beq.n	8000cfe <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 8000cf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cf2:	f7ff fecb 	bl	8000a8c <OD_getIndex>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cfc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8000cfe:	f06f 030b 	mvn.w	r3, #11
 8000d02:	e000      	b.n	8000d06 <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	08001553 	.word	0x08001553
 8000d14:	08000b37 	.word	0x08000b37

08000d18 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b08d      	sub	sp, #52	@ 0x34
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	4608      	mov	r0, r1
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	70fb      	strb	r3, [r7, #3]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	70bb      	strb	r3, [r7, #2]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000d32:	2300      	movs	r3, #0
 8000d34:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <CO_HBconsumer_initEntry+0x2e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7a1b      	ldrb	r3, [r3, #8]
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d302      	bcc.n	8000d4c <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e075      	b.n	8000e38 <CO_HBconsumer_initEntry+0x120>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d024      	beq.n	8000d9c <CO_HBconsumer_initEntry+0x84>
 8000d52:	78bb      	ldrb	r3, [r7, #2]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d021      	beq.n	8000d9c <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	77bb      	strb	r3, [r7, #30]
 8000d5c:	e019      	b.n	8000d92 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	7fbb      	ldrb	r3, [r7, #30]
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4413      	add	r3, r2
 8000d68:	f107 0408 	add.w	r4, r7, #8
 8000d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 8000d72:	78fa      	ldrb	r2, [r7, #3]
 8000d74:	7fbb      	ldrb	r3, [r7, #30]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d008      	beq.n	8000d8c <CO_HBconsumer_initEntry+0x74>
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <CO_HBconsumer_initEntry+0x74>
 8000d80:	7a3b      	ldrb	r3, [r7, #8]
 8000d82:	78ba      	ldrb	r2, [r7, #2]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d101      	bne.n	8000d8c <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8000d88:	23f4      	movs	r3, #244	@ 0xf4
 8000d8a:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000d8c:	7fbb      	ldrb	r3, [r7, #30]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	77bb      	strb	r3, [r7, #30]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7a1b      	ldrb	r3, [r3, #8]
 8000d96:	7fba      	ldrb	r2, [r7, #30]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3e0      	bcc.n	8000d5e <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000d9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d147      	bne.n	8000e34 <CO_HBconsumer_initEntry+0x11c>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	78ba      	ldrb	r2, [r7, #2]
 8000db4:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8000db6:	883b      	ldrh	r3, [r7, #0]
 8000db8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dbc:	fb03 f202 	mul.w	r2, r3, r2
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	22ff      	movs	r2, #255	@ 0xff
 8000dc8:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00c      	beq.n	8000df2 <CO_HBconsumer_initEntry+0xda>
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d008      	beq.n	8000df2 <CO_HBconsumer_initEntry+0xda>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8000de8:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	2201      	movs	r2, #1
 8000dee:	709a      	strb	r2, [r3, #2]
 8000df0:	e007      	b.n	8000e02 <CO_HBconsumer_initEntry+0xea>
        } else {
            COB_ID = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6998      	ldr	r0, [r3, #24]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	8b9a      	ldrh	r2, [r3, #28]
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8000e1c:	8bba      	ldrh	r2, [r7, #28]
 8000e1e:	4c08      	ldr	r4, [pc, #32]	@ (8000e40 <CO_HBconsumer_initEntry+0x128>)
 8000e20:	9402      	str	r4, [sp, #8]
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2300      	movs	r3, #0
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e2c:	f005 fbfc 	bl	8006628 <CO_CANrxBufferInit>
 8000e30:	4603      	mov	r3, r0
 8000e32:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8000e34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3724      	adds	r7, #36	@ 0x24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	08000afd 	.word	0x08000afd

08000e44 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08e      	sub	sp, #56	@ 0x38
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8000e56:	2301      	movs	r3, #1
 8000e58:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d077      	beq.n	8000f50 <CO_HBconsumer_process+0x10c>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d073      	beq.n	8000f50 <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e6e:	e068      	b.n	8000f42 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4413      	add	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	789b      	ldrb	r3, [r3, #2]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d055      	beq.n	8000f36 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d022      	beq.n	8000ed8 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d112      	bne.n	8000ec2 <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	789b      	ldrb	r3, [r3, #2]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d10a      	bne.n	8000eba <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	f248 1330 	movw	r3, #33072	@ 0x8130
 8000eb2:	221c      	movs	r2, #28
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	f7ff fd20 	bl	80008fa <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	709a      	strb	r2, [r3, #2]
 8000ec0:	e007      	b.n	8000ed2 <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	789b      	ldrb	r3, [r3, #2]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d11c      	bne.n	8000f1a <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	441a      	add	r2, r3
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d310      	bcc.n	8000f1a <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	f248 1330 	movw	r3, #33072	@ 0x8130
 8000f06:	221b      	movs	r2, #27
 8000f08:	2101      	movs	r1, #1
 8000f0a:	f7ff fcf6 	bl	80008fa <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	22ff      	movs	r2, #255	@ 0xff
 8000f12:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2203      	movs	r2, #3
 8000f18:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	789b      	ldrb	r3, [r3, #2]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d001      	beq.n	8000f26 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d003      	beq.n	8000f38 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f34:	e000      	b.n	8000f38 <CO_HBconsumer_process+0xf4>
                continue;
 8000f36:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	7a1b      	ldrb	r3, [r3, #8]
 8000f46:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d390      	bcc.n	8000e70 <CO_HBconsumer_process+0x2c>
 8000f4e:	e028      	b.n	8000fa2 <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <CO_HBconsumer_process+0x11a>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d021      	beq.n	8000fa2 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f5e:	2300      	movs	r3, #0
 8000f60:	77fb      	strb	r3, [r7, #31]
 8000f62:	e015      	b.n	8000f90 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	22ff      	movs	r2, #255	@ 0xff
 8000f74:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2201      	movs	r2, #1
 8000f88:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	77fb      	strb	r3, [r7, #31]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	7a1b      	ldrb	r3, [r3, #8]
 8000f94:	7ffa      	ldrb	r2, [r7, #31]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3e4      	bcc.n	8000f64 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        allMonitoredOperationalCurrent = false;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d114      	bne.n	8000fd4 <CO_HBconsumer_process+0x190>
 8000faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d011      	beq.n	8000fd4 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	221b      	movs	r2, #27
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f7ff fc9c 	bl	80008fa <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	221c      	movs	r2, #28
 8000fce:	2100      	movs	r1, #0
 8000fd0:	f7ff fc93 	bl	80008fa <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fd8:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fde:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	615a      	str	r2, [r3, #20]
}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	@ 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <CO_getUint16>:
CO_getUint16(const void* buf) {
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	81fb      	strh	r3, [r7, #14]
    return value;
 8000ffe:	89fb      	ldrh	r3, [r7, #14]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <OD_getIndex+0x14>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	e000      	b.n	8001020 <OD_getIndex+0x16>
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 800103a:	2305      	movs	r3, #5
 800103c:	e003      	b.n	8001046 <OD_extension_init+0x1c>
    entry->extension = extension;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	460b      	mov	r3, r1
 800105e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001060:	7af9      	ldrb	r1, [r7, #11]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2302      	movs	r3, #2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 fcce 	bl	8001a0c <OD_get_value>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 800107a:	b480      	push	{r7}
 800107c:	b085      	sub	sp, #20
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	2201      	movs	r2, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00a      	beq.n	80010b6 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b09      	cmp	r3, #9
 80010a4:	d807      	bhi.n	80010b6 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	5cd2      	ldrb	r2, [r2, r3]
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	4013      	ands	r3, r2
 80010b0:	b2db      	uxtb	r3, r3
               : false;
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <CO_isError+0x40>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <CO_isError+0x42>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <CO_getErrorRegister+0x1e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <CO_getErrorRegister+0x1e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	e000      	b.n	80010e6 <CO_getErrorRegister+0x20>
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	3305      	adds	r3, #5
 8001104:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d10a      	bne.n	8001134 <CO_NMT_receive+0x44>
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <CO_NMT_receive+0x3e>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	78db      	ldrb	r3, [r3, #3]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	429a      	cmp	r2, r3
 800112c:	d102      	bne.n	8001134 <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001134:	bf00      	nop
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00c      	beq.n	800116c <OD_write_1017+0x2e>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	7d1b      	ldrb	r3, [r3, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <OD_write_1017+0x2e>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <OD_write_1017+0x2e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d102      	bne.n	800116c <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 800116c:	2309      	movs	r3, #9
 800116e:	e017      	b.n	80011a0 <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff ff39 	bl	8000fee <CO_getUint16>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001184:	fb03 f202 	mul.w	r2, r3, r2
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 fa32 	bl	8001602 <OD_writeOriginal>
 800119e:	4603      	mov	r3, r0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <CO_NMT_init+0x30>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d008      	beq.n	80011d8 <CO_NMT_init+0x30>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <CO_NMT_init+0x30>
 80011cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 80011d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d102      	bne.n	80011de <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e097      	b.n	800130e <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 80011de:	222c      	movs	r2, #44	@ 0x2c
 80011e0:	2100      	movs	r1, #0
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f008 fbae 	bl	8009944 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	78fa      	ldrb	r2, [r7, #3]
 80011f8:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	8c3a      	ldrh	r2, [r7, #32]
 80011fe:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001208:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800120c:	fb03 f202 	mul.w	r2, r3, r2
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001214:	f107 0214 	add.w	r2, r7, #20
 8001218:	2301      	movs	r3, #1
 800121a:	2100      	movs	r1, #0
 800121c:	68b8      	ldr	r0, [r7, #8]
 800121e:	f7ff ff17 	bl	8001050 <OD_get_u16>
 8001222:	4603      	mov	r3, r0
 8001224:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001226:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00c      	beq.n	8001248 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 800122e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f7ff fee8 	bl	800100a <OD_getIndex>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001240:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001242:	f06f 030b 	mvn.w	r3, #11
 8001246:	e062      	b.n	800130e <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8001248:	8abb      	ldrh	r3, [r7, #20]
 800124a:	461a      	mov	r2, r3
 800124c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001250:	fb03 f202 	mul.w	r2, r3, r2
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4a2d      	ldr	r2, [pc, #180]	@ (8001318 <CO_NMT_init+0x170>)
 8001262:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a2d      	ldr	r2, [pc, #180]	@ (800131c <CO_NMT_init+0x174>)
 8001268:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3310      	adds	r3, #16
 800126e:	4619      	mov	r1, r3
 8001270:	68b8      	ldr	r0, [r7, #8]
 8001272:	f7ff feda 	bl	800102a <OD_extension_init>
 8001276:	4603      	mov	r3, r0
 8001278:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800127a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00c      	beq.n	800129c <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 8001282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f7ff febe 	bl	800100a <OD_getIndex>
 800128e:	4603      	mov	r3, r0
 8001290:	461a      	mov	r2, r3
 8001292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001294:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001296:	f06f 030b 	mvn.w	r3, #11
 800129a:	e038      	b.n	800130e <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d903      	bls.n	80012b0 <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 80012b0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80012b2:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80012b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <CO_NMT_init+0x178>)
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80012c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012c6:	f005 f9af 	bl	8006628 <CO_CANrxBufferInit>
 80012ca:	4603      	mov	r3, r0
 80012cc:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 80012ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <CO_NMT_init+0x134>
        return ret;
 80012d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012da:	e018      	b.n	800130e <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012e0:	625a      	str	r2, [r3, #36]	@ 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 80012e2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80012e4:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80012e6:	2300      	movs	r3, #0
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012f2:	f005 f9f5 	bl	80066e0 <CO_CANtxBufferInit>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
    if (NMT->HB_TXbuff == NULL) {
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	e001      	b.n	800130e <CO_NMT_init+0x166>
    }

    return ret;
 800130a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	08001553 	.word	0x08001553
 800131c:	0800113f 	.word	0x0800113f
 8001320:	080010f1 	.word	0x080010f1

08001324 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	@ 0x38
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001340:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	d204      	bcs.n	8001364 <CO_NMT_process+0x40>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	e000      	b.n	8001366 <CO_NMT_process+0x42>
 8001364:	2300      	movs	r3, #0
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 800136a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10e      	bne.n	800138e <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d02b      	beq.n	80013d0 <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <CO_NMT_process+0x6a>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001386:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 800138a:	429a      	cmp	r2, r3
 800138c:	d020      	beq.n	80013d0 <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001392:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001396:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f005 fa16 	bl	80067d4 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 80013a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10b      	bne.n	80013c8 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <CO_NMT_process+0x9c>
 80013bc:	2305      	movs	r3, #5
 80013be:	e000      	b.n	80013c2 <CO_NMT_process+0x9e>
 80013c0:	237f      	movs	r3, #127	@ 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 80013c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80013c6:	e003      	b.n	80013d0 <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80013d6:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d02a      	beq.n	8001436 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	2b82      	cmp	r3, #130	@ 0x82
 80013e6:	d01e      	beq.n	8001426 <CO_NMT_process+0x102>
 80013e8:	2b82      	cmp	r3, #130	@ 0x82
 80013ea:	dc20      	bgt.n	800142e <CO_NMT_process+0x10a>
 80013ec:	2b81      	cmp	r3, #129	@ 0x81
 80013ee:	d016      	beq.n	800141e <CO_NMT_process+0xfa>
 80013f0:	2b81      	cmp	r3, #129	@ 0x81
 80013f2:	dc1c      	bgt.n	800142e <CO_NMT_process+0x10a>
 80013f4:	2b80      	cmp	r3, #128	@ 0x80
 80013f6:	d00e      	beq.n	8001416 <CO_NMT_process+0xf2>
 80013f8:	2b80      	cmp	r3, #128	@ 0x80
 80013fa:	dc18      	bgt.n	800142e <CO_NMT_process+0x10a>
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d002      	beq.n	8001406 <CO_NMT_process+0xe2>
 8001400:	2b02      	cmp	r3, #2
 8001402:	d004      	beq.n	800140e <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8001404:	e013      	b.n	800142e <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8001406:	2305      	movs	r3, #5
 8001408:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800140c:	e010      	b.n	8001430 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800140e:	2304      	movs	r3, #4
 8001410:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001414:	e00c      	b.n	8001430 <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8001416:	237f      	movs	r3, #127	@ 0x7f
 8001418:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800141c:	e008      	b.n	8001430 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800141e:	2302      	movs	r3, #2
 8001420:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001424:	e004      	b.n	8001430 <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800142c:	e000      	b.n	8001430 <CO_NMT_process+0x10c>
                break;
 800142e:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	2112      	movs	r1, #18
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe12 	bl	800107a <CO_isError>
 8001456:	62b8      	str	r0, [r7, #40]	@ 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	211b      	movs	r1, #27
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fe0b 	bl	800107a <CO_isError>
 8001464:	6278      	str	r0, [r7, #36]	@ 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	211c      	movs	r1, #28
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe04 	bl	800107a <CO_isError>
 8001472:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 8001474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <CO_NMT_process+0x16c>
 800147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <CO_NMT_process+0x168>
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <CO_NMT_process+0x168>
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <CO_NMT_process+0x16c>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <CO_NMT_process+0x16e>
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe0a 	bl	80010c6 <CO_getErrorRegister>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	889b      	ldrh	r3, [r3, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <CO_NMT_process+0x1b8>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <CO_NMT_process+0x1b8>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <CO_NMT_process+0x1ba>
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 80014e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d111      	bne.n	800150c <CO_NMT_process+0x1e8>
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <CO_NMT_process+0x1d0>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <CO_NMT_process+0x1e0>
 8001500:	2304      	movs	r3, #4
 8001502:	e000      	b.n	8001506 <CO_NMT_process+0x1e2>
 8001504:	237f      	movs	r3, #127	@ 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8001506:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800150a:	e011      	b.n	8001530 <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	889b      	ldrh	r3, [r3, #4]
 8001510:	b21b      	sxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	da0c      	bge.n	8001530 <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8001516:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800151a:	2b7f      	cmp	r3, #127	@ 0x7f
 800151c:	d108      	bne.n	8001530 <CO_NMT_process+0x20c>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <CO_NMT_process+0x20c>
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 800152a:	2305      	movs	r3, #5
 800152c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001536:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001544:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 8001546:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 800154a:	4618      	mov	r0, r3
 800154c:	3738      	adds	r7, #56	@ 0x38
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001552:	b580      	push	{r7, lr}
 8001554:	b088      	sub	sp, #32
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <OD_readOriginal+0x20>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <OD_readOriginal+0x20>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001572:	2309      	movs	r3, #9
 8001574:	e041      	b.n	80015fa <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001588:	230e      	movs	r3, #14
 800158a:	e036      	b.n	80015fa <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <OD_readOriginal+0x4e>
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	429a      	cmp	r2, r3
 800159e:	d922      	bls.n	80015e6 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d801      	bhi.n	80015ae <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80015aa:	2309      	movs	r3, #9
 80015ac:	e025      	b.n	80015fa <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4413      	add	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d90a      	bls.n	80015e0 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	441a      	add	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80015da:	23ff      	movs	r3, #255	@ 0xff
 80015dc:	75fb      	strb	r3, [r7, #23]
 80015de:	e002      	b.n	80015e6 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	69b9      	ldr	r1, [r7, #24]
 80015ea:	68b8      	ldr	r0, [r7, #8]
 80015ec:	f008 fa35 	bl	8009a5a <memcpy>

    *countRead = dataLenToCopy;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	601a      	str	r2, [r3, #0]
    return returnCode;
 80015f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001602:	b580      	push	{r7, lr}
 8001604:	b088      	sub	sp, #32
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <OD_writeOriginal+0x20>
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <OD_writeOriginal+0x20>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001622:	2309      	movs	r3, #9
 8001624:	e056      	b.n	80016d4 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 800163c:	230e      	movs	r3, #14
 800163e:	e049      	b.n	80016d4 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d103      	bne.n	8001654 <OD_writeOriginal+0x52>
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d924      	bls.n	800169e <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	429a      	cmp	r2, r3
 800165c:	d801      	bhi.n	8001662 <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 800165e:	2309      	movs	r3, #9
 8001660:	e038      	b.n	80016d4 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4413      	add	r3, r2
 8001678:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90a      	bls.n	8001698 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	441a      	add	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001692:	23ff      	movs	r3, #255	@ 0xff
 8001694:	74fb      	strb	r3, [r7, #19]
 8001696:	e002      	b.n	800169e <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d201      	bcs.n	80016aa <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80016a6:	230c      	movs	r3, #12
 80016a8:	e014      	b.n	80016d4 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d80f      	bhi.n	80016d2 <OD_writeOriginal+0xd0>
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d80b      	bhi.n	80016d2 <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f008 f9cb 	bl	8009a5a <memcpy>
 80016c4:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	601a      	str	r2, [r3, #0]
    return returnCode;
 80016cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016d0:	e000      	b.n	80016d4 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 80016d2:	2309      	movs	r3, #9
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 80016ea:	2302      	movs	r3, #2
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8001704:	2302      	movs	r3, #2
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <OD_find+0x1a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <OD_find+0x1e>
        return NULL;
 800172a:	2300      	movs	r3, #0
 800172c:	e046      	b.n	80017bc <OD_find+0xac>
    }

    uint16_t min = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 800173a:	e026      	b.n	800178a <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 800173c:	8afa      	ldrh	r2, [r7, #22]
 800173e:	8abb      	ldrh	r3, [r7, #20]
 8001740:	4413      	add	r3, r2
 8001742:	105b      	asrs	r3, r3, #1
 8001744:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6859      	ldr	r1, [r3, #4]
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	429a      	cmp	r2, r3
 8001760:	d101      	bne.n	8001766 <OD_find+0x56>
            return entry;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	e02a      	b.n	80017bc <OD_find+0xac>
        }

        if (index < entry->index) {
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	429a      	cmp	r2, r3
 800176e:	d209      	bcs.n	8001784 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <OD_find+0x6e>
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	3b01      	subs	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	e000      	b.n	8001780 <OD_find+0x70>
 800177e:	89fb      	ldrh	r3, [r7, #14]
 8001780:	82bb      	strh	r3, [r7, #20]
 8001782:	e002      	b.n	800178a <OD_find+0x7a>
        } else {
            min = cur + 1U;
 8001784:	89fb      	ldrh	r3, [r7, #14]
 8001786:	3301      	adds	r3, #1
 8001788:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 800178a:	8afa      	ldrh	r2, [r7, #22]
 800178c:	8abb      	ldrh	r3, [r7, #20]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3d4      	bcc.n	800173c <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001792:	8afa      	ldrh	r2, [r7, #22]
 8001794:	8abb      	ldrh	r3, [r7, #20]
 8001796:	429a      	cmp	r2, r3
 8001798:	d10f      	bne.n	80017ba <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	8afa      	ldrh	r2, [r7, #22]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	887a      	ldrh	r2, [r7, #2]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d101      	bne.n	80017ba <OD_find+0xaa>
            return entry;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	e000      	b.n	80017bc <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
	...

080017c8 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 80017c8:	b480      	push	{r7}
 80017ca:	b08d      	sub	sp, #52	@ 0x34
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	460b      	mov	r3, r1
 80017d6:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <OD_getSub+0x1e>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 80017e6:	2305      	movs	r3, #5
 80017e8:	e0e7      	b.n	80019ba <OD_getSub+0x1f2>
    }
    if (io == NULL) {
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 80017f0:	2309      	movs	r3, #9
 80017f2:	e0e2      	b.n	80019ba <OD_getSub+0x1f2>
    }

    ODR_t ret = ODR_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    OD_stream_t* stream = &io->stream;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	623b      	str	r3, [r7, #32]

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	78db      	ldrb	r3, [r3, #3]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	2b03      	cmp	r3, #3
 8001808:	d055      	beq.n	80018b6 <OD_getSub+0xee>
 800180a:	2b03      	cmp	r3, #3
 800180c:	f300 8093 	bgt.w	8001936 <OD_getSub+0x16e>
 8001810:	2b01      	cmp	r3, #1
 8001812:	d002      	beq.n	800181a <OD_getSub+0x52>
 8001814:	2b02      	cmp	r3, #2
 8001816:	d017      	beq.n	8001848 <OD_getSub+0x80>
 8001818:	e08d      	b.n	8001936 <OD_getSub+0x16e>
        case ODT_VAR: {
            if (subIndex > 0U) {
 800181a:	7afb      	ldrb	r3, [r7, #11]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <OD_getSub+0x60>
                ret = ODR_SUB_NOT_EXIST;
 8001820:	230e      	movs	r3, #14
 8001822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001826:	e08a      	b.n	800193e <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]

            stream->attribute = odo->attribute;
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	791a      	ldrb	r2, [r3, #4]
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	609a      	str	r2, [r3, #8]
            break;
 8001846:	e07a      	b.n	800193e <OD_getSub+0x176>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	7afa      	ldrb	r2, [r7, #11]
 800184e:	429a      	cmp	r2, r3
 8001850:	d303      	bcc.n	800185a <OD_getSub+0x92>
                ret = ODR_SUB_NOT_EXIST;
 8001852:	230e      	movs	r3, #14
 8001854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 8001858:	e071      	b.n	800193e <OD_getSub+0x176>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]

            if (subIndex == 0U) {
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10b      	bne.n	800187e <OD_getSub+0xb6>
                stream->attribute = odo->attribute0;
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	7a1a      	ldrb	r2, [r3, #8]
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	2201      	movs	r2, #1
 800187a:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 800187c:	e05f      	b.n	800193e <OD_getSub+0x176>
                stream->attribute = odo->attribute;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	7a5a      	ldrb	r2, [r3, #9]
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	617b      	str	r3, [r7, #20]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <OD_getSub+0xde>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	7afa      	ldrb	r2, [r7, #11]
 8001898:	3a01      	subs	r2, #1
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4413      	add	r3, r2
 80018a4:	e000      	b.n	80018a8 <OD_getSub+0xe0>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	6a3a      	ldr	r2, [r7, #32]
 80018aa:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	609a      	str	r2, [r3, #8]
            break;
 80018b4:	e043      	b.n	800193e <OD_getSub+0x176>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61fb      	str	r3, [r7, #28]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018c6:	e01c      	b.n	8001902 <OD_getSub+0x13a>
                if (odoArr[i].subIndex == subIndex) {
 80018c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	461a      	mov	r2, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	7afa      	ldrb	r2, [r7, #11]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d10a      	bne.n	80018f8 <OD_getSub+0x130>
                    odo = &odoArr[i];
 80018e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	4413      	add	r3, r2
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    break;
 80018f6:	e00a      	b.n	800190e <OD_getSub+0x146>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80018f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800190a:	429a      	cmp	r2, r3
 800190c:	d3dc      	bcc.n	80018c8 <OD_getSub+0x100>
                }
            }
            if (odo == NULL) {
 800190e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d103      	bne.n	800191c <OD_getSub+0x154>
                ret = ODR_SUB_NOT_EXIST;
 8001914:	230e      	movs	r3, #14
 8001916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                break;
 800191a:	e010      	b.n	800193e <OD_getSub+0x176>
            }

            stream->attribute = odo->attribute;
 800191c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191e:	795a      	ldrb	r2, [r3, #5]
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8001924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	609a      	str	r2, [r3, #8]
            break;
 8001934:	e003      	b.n	800193e <OD_getSub+0x176>
        }
        default: {
            ret = ODR_DEV_INCOMPAT;
 8001936:	2309      	movs	r3, #9
 8001938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800193c:	bf00      	nop
        }
    }

    if (ret == ODR_OK) {
 800193e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001942:	2b00      	cmp	r3, #0
 8001944:	d137      	bne.n	80019b6 <OD_getSub+0x1ee>
        /* Access data from the original OD location */
        if ((entry->extension == NULL) || odOrig) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d002      	beq.n	8001954 <OD_getSub+0x18c>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <OD_getSub+0x1a0>
            io->read = OD_readOriginal;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a1b      	ldr	r2, [pc, #108]	@ (80019c4 <OD_getSub+0x1fc>)
 8001958:	619a      	str	r2, [r3, #24]
            io->write = OD_writeOriginal;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a1a      	ldr	r2, [pc, #104]	@ (80019c8 <OD_getSub+0x200>)
 800195e:	61da      	str	r2, [r3, #28]
            stream->object = NULL;
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	e01c      	b.n	80019a2 <OD_getSub+0x1da>
        }
        /* Access data from extension specified by application */
        else {
            io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <OD_getSub+0x1b2>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	e000      	b.n	800197c <OD_getSub+0x1b4>
 800197a:	4b14      	ldr	r3, [pc, #80]	@ (80019cc <OD_getSub+0x204>)
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6193      	str	r3, [r2, #24]
            io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <OD_getSub+0x1ca>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	e000      	b.n	8001994 <OD_getSub+0x1cc>
 8001992:	4b0f      	ldr	r3, [pc, #60]	@ (80019d0 <OD_getSub+0x208>)
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	61d3      	str	r3, [r2, #28]
            stream->object = entry->extension->object;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	605a      	str	r2, [r3, #4]
        }

        /* Reset stream data offset */
        stream->dataOffset = 0;
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]

        /* Add informative data */
        stream->index = entry->index;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	825a      	strh	r2, [r3, #18]
        stream->subIndex = subIndex;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	7afa      	ldrb	r2, [r7, #11]
 80019b4:	751a      	strb	r2, [r3, #20]
    }

    return ret;
 80019b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3734      	adds	r7, #52	@ 0x34
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	08001553 	.word	0x08001553
 80019c8:	08001603 	.word	0x08001603
 80019cc:	080016dd 	.word	0x080016dd
 80019d0:	080016f7 	.word	0x080016f7

080019d4 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db03      	blt.n	80019ee <OD_getSDOabCode+0x1a>
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b19      	cmp	r3, #25
 80019ec:	dd02      	ble.n	80019f4 <OD_getSDOabCode+0x20>
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <OD_getSDOabCode+0x34>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	e004      	b.n	80019fe <OD_getSDOabCode+0x2a>
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4a03      	ldr	r2, [pc, #12]	@ (8001a08 <OD_getSDOabCode+0x34>)
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	0800a3ac 	.word	0x0800a3ac

08001a0c <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b091      	sub	sp, #68	@ 0x44
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001a22:	2309      	movs	r3, #9
 8001a24:	e02b      	b.n	8001a7e <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001a26:	f107 0318 	add.w	r3, r7, #24
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f007 ff88 	bl	8009944 <memset>
    OD_stream_t* stream = &io.stream;
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countRd = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001a3e:	f107 0218 	add.w	r2, r7, #24
 8001a42:	7af9      	ldrb	r1, [r7, #11]
 8001a44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f7ff febe 	bl	80017c8 <OD_getSub>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001a52:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <OD_get_value+0x54>
        return ret;
 8001a5a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001a5e:	e00e      	b.n	8001a7e <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 8001a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d001      	beq.n	8001a6e <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001a6a:	230b      	movs	r3, #11
 8001a6c:	e007      	b.n	8001a7e <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 8001a6e:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a7a:	47a0      	blx	r4
 8001a7c:	4603      	mov	r3, r0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3744      	adds	r7, #68	@ 0x44
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8001a86:	b590      	push	{r4, r7, lr}
 8001a88:	b091      	sub	sp, #68	@ 0x44
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	460b      	mov	r3, r1
 8001a94:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8001a9c:	2309      	movs	r3, #9
 8001a9e:	e02b      	b.n	8001af8 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 ff4b 	bl	8009944 <memset>
    OD_stream_t* stream = &io.stream;
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    OD_size_t countWritten = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001ab8:	f107 0218 	add.w	r2, r7, #24
 8001abc:	7af9      	ldrb	r1, [r7, #11]
 8001abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff fe81 	bl	80017c8 <OD_getSub>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (ret != ODR_OK) {
 8001acc:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <OD_set_value+0x54>
        return ret;
 8001ad4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8001ad8:	e00e      	b.n	8001af8 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8001ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 8001ae4:	230b      	movs	r3, #11
 8001ae6:	e007      	b.n	8001af8 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8001ae8:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001af4:	47a0      	blx	r4
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3744      	adds	r7, #68	@ 0x44
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	@ 0x38
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	633b      	str	r3, [r7, #48]	@ 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001b16:	f107 0210 	add.w	r2, r7, #16
 8001b1a:	7af9      	ldrb	r1, [r7, #11]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff fe52 	bl	80017c8 <OD_getSub>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (errCopy == ODR_OK) {
 8001b2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 8001b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <OD_getPtr+0x42>
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001b42:	2309      	movs	r3, #9
 8001b44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001b48:	e00a      	b.n	8001b60 <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <OD_getPtr+0x60>
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d002      	beq.n	8001b60 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001b5a:	230b      	movs	r3, #11
 8001b5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <OD_getPtr+0x6e>
        *err = errCopy;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001b6c:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 8001b6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <OD_getPtr+0x7c>
 8001b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	e000      	b.n	8001b7e <OD_getPtr+0x7e>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3738      	adds	r7, #56	@ 0x38
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8001b86:	b480      	push	{r7}
 8001b88:	b085      	sub	sp, #20
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	73fb      	strb	r3, [r7, #15]
    return value;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	81fb      	strh	r3, [r7, #14]
    return value;
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <CO_getUint32>:
CO_getUint32(const void* buf) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
    return value;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8001be6:	2304      	movs	r3, #4
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <OD_getIndex+0x14>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	e000      	b.n	8001c08 <OD_getIndex+0x16>
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001c22:	2305      	movs	r3, #5
 8001c24:	e003      	b.n	8001c2e <OD_extension_init+0x1c>
    entry->extension = extension;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	460b      	mov	r3, r1
 8001c46:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001c48:	7af9      	ldrb	r1, [r7, #11]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff feda 	bl	8001a0c <OD_get_value>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001c72:	7af9      	ldrb	r1, [r7, #11]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2302      	movs	r3, #2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fec5 	bl	8001a0c <OD_get_value>
 8001c82:	4603      	mov	r3, r0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001c9c:	7af9      	ldrb	r1, [r7, #11]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff feb0 	bl	8001a0c <OD_get_value>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <OD_write_dummy+0x1a>
        *countWritten = count;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <OD_read_dummy+0x20>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <OD_read_dummy+0x20>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	e010      	b.n	8001d22 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d902      	bls.n	8001d10 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	2100      	movs	r1, #0
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	f007 fe15 	bl	8009944 <memset>

    *countRead = count;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b092      	sub	sp, #72	@ 0x48
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8001d52:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001d56:	08db      	lsrs	r3, r3, #3
 8001d58:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	015b      	lsls	r3, r3, #5
 8001d60:	3310      	adds	r3, #16
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8001d68:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d901      	bls.n	8001d74 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8001d70:	2307      	movs	r3, #7
 8001d72:	e090      	b.n	8001e96 <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 8001d74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d78:	2b1f      	cmp	r3, #31
 8001d7a:	d81a      	bhi.n	8001db2 <PDOconfigMap+0x86>
 8001d7c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 8001d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d86:	63bb      	str	r3, [r7, #56]	@ 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 8001d88:	2218      	movs	r2, #24
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001d8e:	f007 fdd9 	bl	8009944 <memset>
        stream->dataLength = mappedLength;
 8001d92:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d98:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8001d9a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da0:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8001da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001da4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea0 <PDOconfigMap+0x174>)
 8001da6:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8001da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001daa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea4 <PDOconfigMap+0x178>)
 8001dac:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e071      	b.n	8001e96 <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8001db2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001db6:	4619      	mov	r1, r3
 8001db8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001dba:	f7ff fca9 	bl	8001710 <OD_find>
 8001dbe:	6378      	str	r0, [r7, #52]	@ 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8001dc0:	f107 0210 	add.w	r2, r7, #16
 8001dc4:	f897 1045 	ldrb.w	r1, [r7, #69]	@ 0x45
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dcc:	f7ff fcfc 	bl	80017c8 <OD_getSub>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (odRet != ODR_OK) {
 8001dd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <PDOconfigMap+0xb8>
        return odRet;
 8001dde:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001de2:	e058      	b.n	8001e96 <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <PDOconfigMap+0xc2>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e000      	b.n	8001df0 <PDOconfigMap+0xc4>
 8001dee:	2304      	movs	r3, #4
 8001df0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8001df4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001df8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <PDOconfigMap+0xee>
 8001e04:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d104      	bne.n	8001e1a <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d201      	bcs.n	8001e1e <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e03b      	b.n	8001e96 <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8001e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e20:	461d      	mov	r5, r3
 8001e22:	f107 0410 	add.w	r4, r7, #16
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8001e32:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8001e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e38:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d129      	bne.n	8001e94 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8001e40:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001e44:	2b1f      	cmp	r3, #31
 8001e46:	d81f      	bhi.n	8001e88 <PDOconfigMap+0x15c>
 8001e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	3308      	adds	r3, #8
 8001e60:	440b      	add	r3, r1
 8001e62:	1d19      	adds	r1, r3, #4
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3244      	adds	r2, #68	@ 0x44
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8001e6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	b2d1      	uxtb	r1, r2
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	460a      	mov	r2, r1
 8001e82:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 8001e86:	e005      	b.n	8001e94 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3244      	adds	r2, #68	@ 0x44
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3748      	adds	r7, #72	@ 0x48
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08001cdd 	.word	0x08001cdd
 8001ea4:	08001cb7 	.word	0x08001cb7

08001ea8 <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t mappedObjectsCount = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8001ebe:	f107 021b 	add.w	r2, r7, #27
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff feb6 	bl	8001c38 <OD_get_u8>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8001ed2:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00c      	beq.n	8001ef4 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8001eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fe86 	bl	8001bf2 <OD_getIndex>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	021a      	lsls	r2, r3, #8
 8001eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eec:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001eee:	f06f 030b 	mvn.w	r3, #11
 8001ef2:	e07f      	b.n	8001ff4 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001efa:	e05b      	b.n	8001fb4 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8001efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f00:	015b      	lsls	r3, r3, #5
 8001f02:	3310      	adds	r3, #16
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8001f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2d9      	uxtb	r1, r3
 8001f16:	f107 0214 	add.w	r2, r7, #20
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff feb5 	bl	8001c8c <OD_get_u32>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8001f28:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001f2c:	2b0e      	cmp	r3, #14
 8001f2e:	d03b      	beq.n	8001fa8 <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8001f30:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00f      	beq.n	8001f58 <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8001f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fe57 	bl	8001bf2 <OD_getIndex>
 8001f44:	4603      	mov	r3, r0
 8001f46:	021a      	lsls	r2, r3, #8
 8001f48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f50:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8001f52:	f06f 030b 	mvn.w	r3, #11
 8001f56:	e04d      	b.n	8001ff4 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8001f58:	6979      	ldr	r1, [r7, #20]
 8001f5a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fee1 	bl	8001d2c <PDOconfigMap>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        if (odRet != ODR_OK) {
 8001f70:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	22ff      	movs	r2, #255	@ 0xff
 8001f82:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8001f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <PDO_initMapping+0xea>
                *erroneousMap = map;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f90:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8001f92:	7efb      	ldrb	r3, [r7, #27]
 8001f94:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d206      	bcs.n	8001faa <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa2:	4413      	add	r3, r2
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa6:	e000      	b.n	8001faa <PDO_initMapping+0x102>
            continue;
 8001fa8:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8001faa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb8:	2b07      	cmp	r3, #7
 8001fba:	d99f      	bls.n	8001efc <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d805      	bhi.n	8001fce <PDO_initMapping+0x126>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <PDO_initMapping+0x134>
 8001fc8:	7efb      	ldrb	r3, [r7, #27]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8001fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8001fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8001fec:	7efa      	ldrb	r2, [r7, #27]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3728      	adds	r7, #40	@ 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	@ 0x38
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <OD_write_PDO_mapping+0x28>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <OD_write_PDO_mapping+0x28>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <OD_write_PDO_mapping+0x28>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	7d1b      	ldrb	r3, [r3, #20]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d901      	bls.n	8002028 <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8002024:	2309      	movs	r3, #9
 8002026:	e07e      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d107      	bne.n	8002046 <OD_write_PDO_mapping+0x4a>
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	7b5b      	ldrb	r3, [r3, #13]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <OD_write_PDO_mapping+0x4e>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	7d1b      	ldrb	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002046:	2302      	movs	r3, #2
 8002048:	e06d      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	7d1b      	ldrb	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d145      	bne.n	80020de <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002052:	68b8      	ldr	r0, [r7, #8]
 8002054:	f7ff fd97 	bl	8001b86 <CO_getUint8>
 8002058:	4603      	mov	r3, r0
 800205a:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002060:	7fbb      	ldrb	r3, [r7, #30]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d901      	bls.n	800206a <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8002066:	2307      	movs	r3, #7
 8002068:	e05d      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800206a:	2300      	movs	r3, #0
 800206c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002070:	e01b      	b.n	80020aa <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002072:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002076:	015b      	lsls	r3, r3, #5
 8002078:	3310      	adds	r3, #16
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	4413      	add	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	d901      	bls.n	8002098 <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002094:	2306      	movs	r3, #6
 8002096:	e046      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8002098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80020a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80020a4:	3301      	adds	r3, #1
 80020a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020aa:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80020ae:	7fbb      	ldrb	r3, [r7, #30]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3de      	bcc.n	8002072 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d901      	bls.n	80020be <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 80020ba:	2307      	movs	r3, #7
 80020bc:	e033      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 80020be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d104      	bne.n	80020ce <OD_write_PDO_mapping+0xd2>
 80020c4:	7fbb      	ldrb	r3, [r7, #30]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 80020ca:	230f      	movs	r3, #15
 80020cc:	e02b      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 80020ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	7fba      	ldrb	r2, [r7, #30]
 80020da:	735a      	strb	r2, [r3, #13]
 80020dc:	e01c      	b.n	8002118 <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	f7ff fd6c 	bl	8001bbc <CO_getUint32>
 80020e4:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	7d1b      	ldrb	r3, [r3, #20]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	6a39      	ldr	r1, [r7, #32]
 8002100:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002102:	f7ff fe13 	bl	8001d2c <PDOconfigMap>
 8002106:	4603      	mov	r3, r0
 8002108:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800210a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <OD_write_PDO_mapping+0x11c>
            return odRet;
 8002112:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002116:	e006      	b.n	8002126 <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fa6f 	bl	8001602 <OD_writeOriginal>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3730      	adds	r7, #48	@ 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff fa05 	bl	8001552 <OD_readOriginal>
 8002148:	4603      	mov	r3, r0
 800214a:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 800214c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d134      	bne.n	80021be <OD_read_PDO_commParam+0x90>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	7d1b      	ldrb	r3, [r3, #20]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d130      	bne.n	80021be <OD_read_PDO_commParam+0x90>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d12c      	bne.n	80021be <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 800216a:	68b8      	ldr	r0, [r7, #8]
 800216c:	f7ff fd26 	bl	8001bbc <CO_getUint32>
 8002170:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800217a:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d011      	beq.n	80021a6 <OD_read_PDO_commParam+0x78>
 8002182:	8a7a      	ldrh	r2, [r7, #18]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800218a:	4619      	mov	r1, r3
 800218c:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002190:	400b      	ands	r3, r1
 8002192:	429a      	cmp	r2, r3
 8002194:	d107      	bne.n	80021a6 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	f8b2 2142 	ldrh.w	r2, [r2, #322]	@ 0x142
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021b4:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 80021b6:	69f9      	ldr	r1, [r7, #28]
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f7ff fd0c 	bl	8001bd6 <CO_setUint32>
    }

    return returnCode;
 80021be:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <CO_PDO_receive>:
 * will be received. For more information and description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void
CO_PDO_receive(void* object, void* msg) {
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
    CO_RPDO_t* RPDO = object;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3305      	adds	r3, #5
 80021e6:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f893 3180 	ldrb.w	r3, [r3, #384]	@ 0x180
 80021ee:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d03e      	beq.n	8002276 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	7b1b      	ldrb	r3, [r3, #12]
 80021fc:	7cfa      	ldrb	r2, [r7, #19]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d334      	bcc.n	800226c <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	7b1b      	ldrb	r3, [r3, #12]
 8002206:	7cfa      	ldrb	r2, [r7, #19]
 8002208:	429a      	cmp	r2, r3
 800220a:	d105      	bne.n	8002218 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) {
 800220c:	7ffb      	ldrb	r3, [r7, #31]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_OK;
 8002212:	230b      	movs	r3, #11
 8002214:	77fb      	strb	r3, [r7, #31]
 8002216:	e004      	b.n	8002222 <CO_PDO_receive+0x58>
                }
            } else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002218:	7ffb      	ldrb	r3, [r7, #31]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <CO_PDO_receive+0x58>
                    err = CO_RPDO_RX_LONG;
 800221e:	230d      	movs	r3, #13
 8002220:	77fb      	strb	r3, [r7, #31]
                }
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	77bb      	strb	r3, [r7, #30]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if (RPDO->synchronous && (RPDO->SYNC != NULL) && RPDO->SYNC->CANrxToggle) {
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00c      	beq.n	800224a <CO_PDO_receive+0x80>
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <CO_PDO_receive+0x80>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <CO_PDO_receive+0x80>
                bufNo = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            (void)memcpy(RPDO->CANrxData[bufNo], data, CO_PDO_MAX_SIZE);
 800224a:	7fbb      	ldrb	r3, [r7, #30]
 800224c:	332e      	adds	r3, #46	@ 0x2e
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4413      	add	r3, r2
 8002254:	2208      	movs	r2, #8
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f007 fbfe 	bl	8009a5a <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 800225e:	7fba      	ldrb	r2, [r7, #30]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	325a      	adds	r2, #90	@ 0x5a
 8002264:	2101      	movs	r1, #1
 8002266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800226a:	e004      	b.n	8002276 <CO_PDO_receive+0xac>
            /* Optional signal to RTOS, which can resume task, which handles the RPDO. */
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        } else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800226c:	7ffb      	ldrb	r3, [r7, #31]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002272:	230c      	movs	r3, #12
 8002274:	77fb      	strb	r3, [r7, #31]
        } else { /* MISRA C 2004 14.10 */
        }
    }

    RPDO->receiveError = err;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	7ffa      	ldrb	r2, [r7, #31]
 800227a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180
}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <OD_write_14xx>:
 * Custom function for writing OD object "RPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_14xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b092      	sub	sp, #72	@ 0x48
 800228c:	af04      	add	r7, sp, #16
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <OD_write_14xx+0x26>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <OD_write_14xx+0x26>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <OD_write_14xx+0x26>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d901      	bls.n	80022b2 <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 80022ae:	2309      	movs	r3, #9
 80022b0:	e102      	b.n	80024b8 <OD_write_14xx+0x230>
    }

    CO_RPDO_t* RPDO = stream->object;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f007 fbc8 	bl	8009a5a <memcpy>

    switch (stream->subIndex) {
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	7d1b      	ldrb	r3, [r3, #20]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	f000 80d5 	beq.w	800247e <OD_write_14xx+0x1f6>
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	f300 80e4 	bgt.w	80024a2 <OD_write_14xx+0x21a>
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d003      	beq.n	80022e6 <OD_write_14xx+0x5e>
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f000 80a6 	beq.w	8002430 <OD_write_14xx+0x1a8>
            break;
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 80022e4:	e0dd      	b.n	80024a2 <OD_write_14xx+0x21a>
            uint32_t COB_ID = CO_getUint32(buf);
 80022e6:	68b8      	ldr	r0, [r7, #8]
 80022e8:	f7ff fc68 	bl	8001bbc <CO_getUint32>
 80022ec:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	0fdb      	lsrs	r3, r3, #31
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	61bb      	str	r3, [r7, #24]
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && PDO->valid && (CAN_ID != PDO->configuredCanId))
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	4b6e      	ldr	r3, [pc, #440]	@ (80024c0 <OD_write_14xx+0x238>)
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d13d      	bne.n	8002388 <OD_write_14xx+0x100>
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <OD_write_14xx+0x9e>
 8002312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <OD_write_14xx+0x9e>
 800231a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231c:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8002320:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002322:	429a      	cmp	r2, r3
 8002324:	d130      	bne.n	8002388 <OD_write_14xx+0x100>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d026      	beq.n	800237a <OD_write_14xx+0xf2>
 800232c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800232e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002330:	d92a      	bls.n	8002388 <OD_write_14xx+0x100>
 8002332:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002338:	d903      	bls.n	8002342 <OD_write_14xx+0xba>
 800233a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800233c:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002340:	d922      	bls.n	8002388 <OD_write_14xx+0x100>
 8002342:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002344:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002348:	d903      	bls.n	8002352 <OD_write_14xx+0xca>
 800234a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800234c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002350:	d31a      	bcc.n	8002388 <OD_write_14xx+0x100>
 8002352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002354:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002358:	d903      	bls.n	8002362 <OD_write_14xx+0xda>
 800235a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800235c:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002360:	d312      	bcc.n	8002388 <OD_write_14xx+0x100>
 8002362:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002364:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002368:	d303      	bcc.n	8002372 <OD_write_14xx+0xea>
 800236a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800236c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002370:	d30a      	bcc.n	8002388 <OD_write_14xx+0x100>
 8002372:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002374:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002378:	d806      	bhi.n	8002388 <OD_write_14xx+0x100>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <OD_write_14xx+0x104>
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	7b5b      	ldrb	r3, [r3, #13]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <OD_write_14xx+0x104>
                return ODR_INVALID_VALUE;
 8002388:	230f      	movs	r3, #15
 800238a:	e095      	b.n	80024b8 <OD_write_14xx+0x230>
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 800238c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	429a      	cmp	r2, r3
 8002394:	d106      	bne.n	80023a4 <OD_write_14xx+0x11c>
 8002396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002398:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 800239c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800239e:	429a      	cmp	r2, r3
 80023a0:	f000 8081 	beq.w	80024a6 <OD_write_14xx+0x21e>
                if (CAN_ID == PDO->preDefinedCanId) {
 80023a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a6:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 80023aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d108      	bne.n	80023c2 <OD_write_14xx+0x13a>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80023b6:	f107 0310 	add.w	r3, r7, #16
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fc0a 	bl	8001bd6 <CO_setUint32>
                if (!valid) {
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <OD_write_14xx+0x144>
                    CAN_ID = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
                CO_ReturnError_t ret = CO_CANrxBufferInit(PDO->CANdev, PDO->CANdevIdx, CAN_ID, 0x7FF, false,
 80023cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ce:	6858      	ldr	r0, [r3, #4]
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 80023d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80023d8:	4b3a      	ldr	r3, [pc, #232]	@ (80024c4 <OD_write_14xx+0x23c>)
 80023da:	9302      	str	r3, [sp, #8]
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80023e8:	f004 f91e 	bl	8006628 <CO_CANrxBufferInit>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]
                if (valid && (ret == CO_ERROR_NO)) {
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <OD_write_14xx+0x186>
 80023f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <OD_write_14xx+0x186>
                    PDO->valid = true;
 80023fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002400:	2201      	movs	r2, #1
 8002402:	609a      	str	r2, [r3, #8]
                    PDO->configuredCanId = CAN_ID;
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002408:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            break;
 800240c:	e04b      	b.n	80024a6 <OD_write_14xx+0x21e>
                    PDO->valid = false;
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
                    CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002416:	2200      	movs	r2, #0
 8002418:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                    CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	2200      	movs	r2, #0
 8002420:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
                    if (ret != CO_ERROR_NO) {
 8002424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d03c      	beq.n	80024a6 <OD_write_14xx+0x21e>
                        return ODR_DEV_INCOMPAT;
 800242c:	2309      	movs	r3, #9
 800242e:	e043      	b.n	80024b8 <OD_write_14xx+0x230>
        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f7ff fba8 	bl	8001b86 <CO_getUint8>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 800243c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002440:	2bf0      	cmp	r3, #240	@ 0xf0
 8002442:	d905      	bls.n	8002450 <OD_write_14xx+0x1c8>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002448:	2bfd      	cmp	r3, #253	@ 0xfd
 800244a:	d801      	bhi.n	8002450 <OD_write_14xx+0x1c8>
                return ODR_INVALID_VALUE;
 800244c:	230f      	movs	r3, #15
 800244e:	e033      	b.n	80024b8 <OD_write_14xx+0x230>
            bool_t synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8002450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002454:	2bf0      	cmp	r3, #240	@ 0xf0
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	623b      	str	r3, [r7, #32]
            if (RPDO->synchronous != synchronous) {
 8002460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002462:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8002466:	6a3a      	ldr	r2, [r7, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d003      	beq.n	8002474 <OD_write_14xx+0x1ec>
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 800246c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246e:	2200      	movs	r2, #0
 8002470:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            RPDO->synchronous = synchronous;
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	6a3a      	ldr	r2, [r7, #32]
 8002478:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 800247c:	e014      	b.n	80024a8 <OD_write_14xx+0x220>
            uint32_t eventTime = CO_getUint16(buf);
 800247e:	68b8      	ldr	r0, [r7, #8]
 8002480:	f7ff fb8e 	bl	8001ba0 <CO_getUint16>
 8002484:	4603      	mov	r3, r0
 8002486:	62bb      	str	r3, [r7, #40]	@ 0x28
            RPDO->timeoutTime_us = eventTime * 1000U;
 8002488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800248e:	fb03 f202 	mul.w	r2, r3, r2
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
            RPDO->timeoutTimer = 0;
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 80024a0:	e002      	b.n	80024a8 <OD_write_14xx+0x220>
            break;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <OD_write_14xx+0x220>
            break;
 80024a6:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80024a8:	f107 0110 	add.w	r1, r7, #16
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff f8a6 	bl	8001602 <OD_writeOriginal>
 80024b6:	4603      	mov	r3, r0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3738      	adds	r7, #56	@ 0x38
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	3ffff800 	.word	0x3ffff800
 80024c4:	080021cb 	.word	0x080021cb

080024c8 <CO_RPDO_init>:
CO_RPDO_init(CO_RPDO_t* RPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_14xx_RPDOCommPar, OD_entry_t* OD_16xx_RPDOMapPar,
             CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint32_t* errInfo) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	@ 0x40
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &RPDO->PDO_common;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if ((RPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_14xx_RPDOCommPar == NULL) || (OD_16xx_RPDOMapPar == NULL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00e      	beq.n	80024fe <CO_RPDO_init+0x36>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00b      	beq.n	80024fe <CO_RPDO_init+0x36>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <CO_RPDO_init+0x36>
 80024ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <CO_RPDO_init+0x36>
 80024f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <CO_RPDO_init+0x36>
        || (CANdevRx == NULL)) {
 80024f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <CO_RPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e115      	b.n	8002730 <CO_RPDO_init+0x268>
    }

    /* clear object */
    (void)memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002504:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 8002508:	2100      	movs	r1, #0
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f007 fa1a 	bl	8009944 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800251a:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO, OD, OD_16xx_RPDOMapPar, true, errInfo, &erroneousMap);
 8002520:	f107 031c 	add.w	r3, r7, #28
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2301      	movs	r3, #1
 800252c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002532:	f7ff fcb9 	bl	8001ea8 <PDO_initMapping>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 800253c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <CO_RPDO_init+0x82>
        return ret;
 8002544:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002548:	e0f2      	b.n	8002730 <CO_RPDO_init+0x268>
    }

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 800254e:	f107 0218 	add.w	r2, r7, #24
 8002552:	2301      	movs	r3, #1
 8002554:	2101      	movs	r1, #1
 8002556:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002558:	f7ff fb98 	bl	8001c8c <OD_get_u32>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002562:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 800256a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1U;
 8002570:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002572:	f7ff fb3e 	bl	8001bf2 <OD_getIndex>
 8002576:	4603      	mov	r3, r0
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	f043 0201 	orr.w	r2, r3, #1
 800257e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002580:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002582:	f06f 030b 	mvn.w	r3, #11
 8002586:	e0d3      	b.n	8002730 <CO_RPDO_init+0x268>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	43db      	mvns	r3, r3
 800258c:	0fdb      	lsrs	r3, r3, #31
 800258e:	b2db      	uxtb	r3, r3
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	b29b      	uxth	r3, r3
 8002596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00d      	beq.n	80025be <CO_RPDO_init+0xf6>
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	7b5b      	ldrb	r3, [r3, #13]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <CO_RPDO_init+0xe8>
 80025aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <CO_RPDO_init+0xf6>
        valid = false;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <CO_RPDO_init+0xf6>
            erroneousMap = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00e      	beq.n	80025e2 <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <CO_RPDO_init+0x10a>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	e000      	b.n	80025d4 <CO_RPDO_init+0x10c>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 80025da:	221a      	movs	r2, #26
 80025dc:	2101      	movs	r1, #1
 80025de:	f7fe f98c 	bl	80008fa <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 80025e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <CO_RPDO_init+0x124>
        CAN_ID = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 80025ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d008      	beq.n	8002604 <CO_RPDO_init+0x13c>
 80025f2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80025f4:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80025f6:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80025fa:	400b      	ands	r3, r1
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d101      	bne.n	8002604 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8002600:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002602:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CAN_ID, 0x7FF, false, (void*)RPDO, CO_PDO_receive);
 8002604:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002606:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 800260a:	4b4b      	ldr	r3, [pc, #300]	@ (8002738 <CO_RPDO_init+0x270>)
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2300      	movs	r3, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800261a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800261c:	f004 f804 	bl	8006628 <CO_CANrxBufferInit>
 8002620:	4603      	mov	r3, r0
 8002622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 8002626:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <CO_RPDO_init+0x16c>
        return ret;
 800262e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002632:	e07d      	b.n	8002730 <CO_RPDO_init+0x268>
    }

    PDO->valid = valid;
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002638:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - transmission type */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 800263a:	23fe      	movs	r3, #254	@ 0xfe
 800263c:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 800263e:	f107 0217 	add.w	r2, r7, #23
 8002642:	2301      	movs	r3, #1
 8002644:	2102      	movs	r1, #2
 8002646:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002648:	f7ff faf6 	bl	8001c38 <OD_get_u8>
 800264c:	4603      	mov	r3, r0
 800264e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002652:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 800265a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2U;
 8002660:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002662:	f7ff fac6 	bl	8001bf2 <OD_getIndex>
 8002666:	4603      	mov	r3, r0
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	f043 0202 	orr.w	r2, r3, #2
 800266e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002670:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002672:	f06f 030b 	mvn.w	r3, #11
 8002676:	e05b      	b.n	8002730 <CO_RPDO_init+0x268>
    }

    RPDO->SYNC = SYNC;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    RPDO->synchronous = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2bf0      	cmp	r3, #240	@ 0xf0
 8002684:	bf94      	ite	ls
 8002686:	2301      	movls	r3, #1
 8002688:	2300      	movhi	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif

    /* Configure communication parameter - event-timer (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
    uint16_t eventTime = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	82bb      	strh	r3, [r7, #20]
    (void)OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002698:	f107 0214 	add.w	r2, r7, #20
 800269c:	2301      	movs	r3, #1
 800269e:	2105      	movs	r1, #5
 80026a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026a2:	f7ff fade 	bl	8001c62 <OD_get_u16>
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000U;
 80026a6:	8abb      	ldrh	r3, [r7, #20]
 80026a8:	461a      	mov	r2, r3
 80026aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ae:	fb03 f202 	mul.w	r2, r3, r2
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = true;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	2201      	movs	r2, #1
 80026bc:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevRxIdx;
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80026ce:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80026d6:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80026de:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = RPDO;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	4a13      	ldr	r2, [pc, #76]	@ (800273c <CO_RPDO_init+0x274>)
 80026ee:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	4a12      	ldr	r2, [pc, #72]	@ (8002740 <CO_RPDO_init+0x278>)
 80026f6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = RPDO;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	4a0f      	ldr	r2, [pc, #60]	@ (8002744 <CO_RPDO_init+0x27c>)
 8002706:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <CO_RPDO_init+0x280>)
 800270e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002718:	4619      	mov	r1, r3
 800271a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800271c:	f7ff fa79 	bl	8001c12 <OD_extension_init>
    (void)OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002726:	4619      	mov	r1, r3
 8002728:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800272a:	f7ff fa72 	bl	8001c12 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3730      	adds	r7, #48	@ 0x30
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	080021cb 	.word	0x080021cb
 800273c:	0800212f 	.word	0x0800212f
 8002740:	08002289 	.word	0x08002289
 8002744:	08001553 	.word	0x08001553
 8002748:	08001ffd 	.word	0x08001ffd

0800274c <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b093      	sub	sp, #76	@ 0x4c
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <OD_write_18xx+0x26>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <OD_write_18xx+0x26>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <OD_write_18xx+0x26>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d901      	bls.n	8002776 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002772:	2309      	movs	r3, #9
 8002774:	e136      	b.n	80029e4 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	63bb      	str	r3, [r7, #56]	@ 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800277c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	4618      	mov	r0, r3
 800278a:	f007 f966 	bl	8009a5a <memcpy>

    switch (stream->subIndex) {
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	7d1b      	ldrb	r3, [r3, #20]
 8002792:	3b01      	subs	r3, #1
 8002794:	2b05      	cmp	r3, #5
 8002796:	f200 811a 	bhi.w	80029ce <OD_write_18xx+0x282>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <OD_write_18xx+0x54>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027b9 	.word	0x080027b9
 80027a4:	080028ef 	.word	0x080028ef
 80027a8:	08002951 	.word	0x08002951
 80027ac:	080029cf 	.word	0x080029cf
 80027b0:	0800297f 	.word	0x0800297f
 80027b4:	080029a3 	.word	0x080029a3
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 80027b8:	68b8      	ldr	r0, [r7, #8]
 80027ba:	f7ff f9ff 	bl	8001bbc <CO_getUint32>
 80027be:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	0fdb      	lsrs	r3, r3, #31
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	4b85      	ldr	r3, [pc, #532]	@ (80029ec <OD_write_18xx+0x2a0>)
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d13d      	bne.n	800285a <OD_write_18xx+0x10e>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <OD_write_18xx+0xac>
 80027e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <OD_write_18xx+0xac>
 80027ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ee:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 80027f2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d130      	bne.n	800285a <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d026      	beq.n	800284c <OD_write_18xx+0x100>
 80027fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002800:	2b7f      	cmp	r3, #127	@ 0x7f
 8002802:	d92a      	bls.n	800285a <OD_write_18xx+0x10e>
 8002804:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800280a:	d903      	bls.n	8002814 <OD_write_18xx+0xc8>
 800280c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800280e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002812:	d922      	bls.n	800285a <OD_write_18xx+0x10e>
 8002814:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002816:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800281a:	d903      	bls.n	8002824 <OD_write_18xx+0xd8>
 800281c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800281e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002822:	d31a      	bcc.n	800285a <OD_write_18xx+0x10e>
 8002824:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002826:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800282a:	d903      	bls.n	8002834 <OD_write_18xx+0xe8>
 800282c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800282e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002832:	d312      	bcc.n	800285a <OD_write_18xx+0x10e>
 8002834:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002836:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800283a:	d303      	bcc.n	8002844 <OD_write_18xx+0xf8>
 800283c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800283e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002842:	d30a      	bcc.n	800285a <OD_write_18xx+0x10e>
 8002844:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8002846:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800284a:	d806      	bhi.n	800285a <OD_write_18xx+0x10e>
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <OD_write_18xx+0x112>
 8002852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002854:	7b5b      	ldrb	r3, [r3, #13]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 800285a:	230f      	movs	r3, #15
 800285c:	e0c2      	b.n	80029e4 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 800285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <OD_write_18xx+0x12a>
 8002868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 800286e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8002870:	429a      	cmp	r2, r3
 8002872:	f000 80ae 	beq.w	80029d2 <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 8002876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002878:	f8b3 3142 	ldrh.w	r3, [r3, #322]	@ 0x142
 800287c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800287e:	429a      	cmp	r2, r3
 8002880:	d108      	bne.n	8002894 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f9a1 	bl	8001bd6 <CO_setUint32>
                }
                if (!valid) {
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <OD_write_18xx+0x152>
                    CAN_ID = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 800289e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a0:	6858      	ldr	r0, [r3, #4]
 80028a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a4:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 80028a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028aa:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 80028ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028ae:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 80028b2:	2af0      	cmp	r2, #240	@ 0xf0
 80028b4:	bf94      	ite	ls
 80028b6:	2201      	movls	r2, #1
 80028b8:	2200      	movhi	r2, #0
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	4614      	mov	r4, r2
 80028be:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80028c0:	9401      	str	r4, [sp, #4]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	f003 ff0b 	bl	80066e0 <CO_CANtxBufferInit>
 80028ca:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 80028d2:	2309      	movs	r3, #9
 80028d4:	e086      	b.n	80029e4 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
                PDO->valid = valid;
 80028de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80028e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80028e8:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
            }
            break;
 80028ec:	e071      	b.n	80029d2 <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 80028ee:	68b8      	ldr	r0, [r7, #8]
 80028f0:	f7ff f949 	bl	8001b86 <CO_getUint8>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80028fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8002900:	d905      	bls.n	800290e <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002906:	2bfd      	cmp	r3, #253	@ 0xfd
 8002908:	d801      	bhi.n	800290e <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 800290a:	230f      	movs	r3, #15
 800290c:	e06a      	b.n	80029e4 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 800290e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002912:	2bf0      	cmp	r3, #240	@ 0xf0
 8002914:	bf94      	ite	ls
 8002916:	2301      	movls	r3, #1
 8002918:	2300      	movhi	r3, #0
 800291a:	b2da      	uxtb	r2, r3
 800291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291e:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002922:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8002924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002926:	22ff      	movs	r2, #255	@ 0xff
 8002928:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 800292c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002932:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
            TPDO->sendRequest = true;
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	2201      	movs	r2, #1
 800293a:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 800293e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002940:	2200      	movs	r2, #0
 8002942:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            TPDO->eventTimer = 0;
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002948:	2200      	movs	r2, #0
 800294a:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
#endif
            break;
 800294e:	e041      	b.n	80029d4 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8002950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 8002958:	230f      	movs	r3, #15
 800295a:	e043      	b.n	80029e4 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 800295c:	68b8      	ldr	r0, [r7, #8]
 800295e:	f7ff f91f 	bl	8001ba0 <CO_getUint16>
 8002962:	4603      	mov	r3, r0
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 8002966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002968:	2264      	movs	r2, #100	@ 0x64
 800296a:	fb03 f202 	mul.w	r2, r3, r2
 800296e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002970:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
            TPDO->inhibitTimer = 0;
 8002974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002976:	2200      	movs	r2, #0
 8002978:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
            break;
 800297c:	e02a      	b.n	80029d4 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 800297e:	68b8      	ldr	r0, [r7, #8]
 8002980:	f7ff f90e 	bl	8001ba0 <CO_getUint16>
 8002984:	4603      	mov	r3, r0
 8002986:	62fb      	str	r3, [r7, #44]	@ 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 8002988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800298e:	fb03 f202 	mul.w	r2, r3, r2
 8002992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002994:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
            TPDO->eventTimer = 0;
 8002998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299a:	2200      	movs	r2, #0
 800299c:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 80029a0:	e018      	b.n	80029d4 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 80029a2:	68b8      	ldr	r0, [r7, #8]
 80029a4:	f7ff f8ef 	bl	8001b86 <CO_getUint8>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 80029ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d103      	bne.n	80029be <OD_write_18xx+0x272>
 80029b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80029bc:	d901      	bls.n	80029c2 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 80029be:	230f      	movs	r3, #15
 80029c0:	e010      	b.n	80029e4 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80029c8:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
            break;
 80029cc:	e002      	b.n	80029d4 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <OD_write_18xx+0x288>
            break;
 80029d2:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80029d4:	f107 0114 	add.w	r1, r7, #20
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7fe fe10 	bl	8001602 <OD_writeOriginal>
 80029e2:	4603      	mov	r3, r0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3744      	adds	r7, #68	@ 0x44
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd90      	pop	{r4, r7, pc}
 80029ec:	3ffff800 	.word	0x3ffff800

080029f0 <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <CO_TPDO_init+0x36>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <CO_TPDO_init+0x36>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <CO_TPDO_init+0x36>
 8002a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <CO_TPDO_init+0x36>
 8002a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d002      	beq.n	8002a26 <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 8002a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d102      	bne.n	8002a2c <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e144      	b.n	8002cb6 <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002a2c:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8002a30:	2100      	movs	r1, #0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f006 ff86 	bl	8009944 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a42:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a5a:	f7ff fa25 	bl	8001ea8 <PDO_initMapping>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (ret != CO_ERROR_NO) {
 8002a64:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <CO_TPDO_init+0x82>
        return ret;
 8002a6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002a70:	e121      	b.n	8002cb6 <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002a72:	23fe      	movs	r3, #254	@ 0xfe
 8002a74:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002a76:	f107 021b 	add.w	r2, r7, #27
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a80:	f7ff f8da 	bl	8001c38 <OD_get_u8>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002a8a:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00e      	beq.n	8002ab0 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 8002a98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a9a:	f7ff f8aa 	bl	8001bf2 <OD_getIndex>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aa8:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002aaa:	f06f 030b 	mvn.w	r3, #11
 8002aae:	e102      	b.n	8002cb6 <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 8002ab0:	7efb      	ldrb	r3, [r7, #27]
 8002ab2:	2bfd      	cmp	r3, #253	@ 0xfd
 8002ab4:	d804      	bhi.n	8002ac0 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8002ab6:	7efb      	ldrb	r3, [r7, #27]
 8002ab8:	2bf0      	cmp	r3, #240	@ 0xf0
 8002aba:	d901      	bls.n	8002ac0 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8002abc:	23fe      	movs	r3, #254	@ 0xfe
 8002abe:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8002ac0:	7efa      	ldrb	r2, [r7, #27]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
    TPDO->sendRequest = true;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8002ad4:	f107 0214 	add.w	r2, r7, #20
 8002ad8:	2301      	movs	r3, #1
 8002ada:	2101      	movs	r1, #1
 8002adc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ade:	f7ff f8d5 	bl	8001c8c <OD_get_u32>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (odRet != ODR_OK) {
 8002ae8:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8002af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 8002af6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002af8:	f7ff f87b 	bl	8001bf2 <OD_getIndex>
 8002afc:	4603      	mov	r3, r0
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b06:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002b08:	f06f 030b 	mvn.w	r3, #11
 8002b0c:	e0d3      	b.n	8002cb6 <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	0fdb      	lsrs	r3, r3, #31
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b20:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8002b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <CO_TPDO_init+0x154>
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	7b5b      	ldrb	r3, [r3, #13]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <CO_TPDO_init+0x146>
 8002b30:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <CO_TPDO_init+0x154>
        valid = false;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (erroneousMap == 0U) {
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8002b40:	2301      	movs	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d001      	beq.n	8002b58 <CO_TPDO_init+0x168>
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	e000      	b.n	8002b5a <CO_TPDO_init+0x16a>
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	f44f 4302 	mov.w	r3, #33280	@ 0x8200
 8002b60:	221a      	movs	r2, #26
 8002b62:	2101      	movs	r1, #1
 8002b64:	f7fd fec9 	bl	80008fa <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8002b72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <CO_TPDO_init+0x19a>
 8002b78:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002b7a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002b7c:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002b80:	400b      	ands	r3, r1
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d101      	bne.n	8002b8a <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002b86:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002b88:	857b      	strh	r3, [r7, #42]	@ 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f892 216c 	ldrb.w	r2, [r2, #364]	@ 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8002b94:	2af0      	cmp	r2, #240	@ 0xf0
 8002b96:	bf94      	ite	ls
 8002b98:	2201      	movls	r2, #1
 8002b9a:	2200      	movhi	r2, #0
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002ba2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	@ 0x48
 8002ba6:	9001      	str	r0, [sp, #4]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2300      	movs	r3, #0
 8002bac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002bae:	f003 fd97 	bl	80066e0 <CO_CANtxBufferInit>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

    if (TPDO->CANtxBuff == NULL) {
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	e075      	b.n	8002cb6 <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bce:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002bd8:	f107 0212 	add.w	r2, r7, #18
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2103      	movs	r1, #3
 8002be0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002be2:	f7ff f83e 	bl	8001c62 <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8002be6:	f107 0210 	add.w	r2, r7, #16
 8002bea:	2301      	movs	r3, #1
 8002bec:	2105      	movs	r1, #5
 8002bee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002bf0:	f7ff f837 	bl	8001c62 <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 8002bf4:	8a7b      	ldrh	r3, [r7, #18]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2364      	movs	r3, #100	@ 0x64
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c0c:	fb03 f202 	mul.w	r2, r3, r2
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2178 	strb.w	r2, [r3, #376]	@ 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f503 72bc 	add.w	r2, r3, #376	@ 0x178
 8002c24:	2301      	movs	r3, #1
 8002c26:	2106      	movs	r1, #6
 8002c28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002c2a:	f7ff f805 	bl	8001c38 <OD_get_u8>
    TPDO->SYNC = SYNC;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    TPDO->syncCounter = 255;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	@ 0xff
 8002c3a:	f883 2179 	strb.w	r2, [r3, #377]	@ 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    PDO->OD = OD;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002c54:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002c5c:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
    PDO->configuredCanId = CAN_ID;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002c64:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 8002c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <CO_TPDO_init+0x2d0>)
 8002c74:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <CO_TPDO_init+0x2d4>)
 8002c7c:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc8 <CO_TPDO_init+0x2d8>)
 8002c8c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <CO_TPDO_init+0x2dc>)
 8002c94:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ca2:	f7fe ffb6 	bl	8001c12 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8002cac:	4619      	mov	r1, r3
 8002cae:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002cb0:	f7fe ffaf 	bl	8001c12 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3730      	adds	r7, #48	@ 0x30
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	0800212f 	.word	0x0800212f
 8002cc4:	0800274d 	.word	0x0800274d
 8002cc8:	08001553 	.word	0x08001553
 8002ccc:	08001ffd 	.word	0x08001ffd

08002cd0 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	73fb      	strb	r3, [r7, #15]
    return value;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <CO_getUint32>:
CO_getUint32(const void* buf) {
 8002cea:	b480      	push	{r7}
 8002cec:	b085      	sub	sp, #20
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
    return value;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <OD_getIndex+0x14>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	e000      	b.n	8002d1a <OD_getIndex+0x16>
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8002d34:	2305      	movs	r3, #5
 8002d36:	e003      	b.n	8002d40 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	460b      	mov	r3, r1
 8002d58:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002d5a:	7af9      	ldrb	r1, [r7, #11]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2301      	movs	r3, #1
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7fe fe51 	bl	8001a0c <OD_get_value>
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	460b      	mov	r3, r1
 8002d82:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002d84:	7af9      	ldrb	r1, [r7, #11]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7fe fe3c 	bl	8001a0c <OD_get_value>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af02      	add	r7, sp, #8
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8002dae:	1d3a      	adds	r2, r7, #4
 8002db0:	7af9      	ldrb	r1, [r7, #11]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2304      	movs	r3, #4
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7fe fe64 	bl	8001a86 <OD_set_value>
 8002dbe:	4603      	mov	r3, r0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	791b      	ldrb	r3, [r3, #4]
 8002dda:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	3305      	adds	r3, #5
 8002de0:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d115      	bne.n	8002e14 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b80      	cmp	r3, #128	@ 0x80
 8002dee:	d103      	bne.n	8002df8 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	2200      	movs	r2, #0
 8002df4:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8002df6:	e00d      	b.n	8002e14 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3340      	adds	r3, #64	@ 0x40
 8002e04:	7cfa      	ldrb	r2, [r7, #19]
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 fe26 	bl	8009a5a <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2201      	movs	r2, #1
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	80fb      	strh	r3, [r7, #6]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e36:	6a3a      	ldr	r2, [r7, #32]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <CO_SDOserver_init_canRxTx+0x2e>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d101      	bne.n	8002e4a <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e04e      	b.n	8002ee8 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db02      	blt.n	8002e62 <CO_SDOserver_init_canRxTx+0x46>
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	e000      	b.n	8002e64 <CO_SDOserver_init_canRxTx+0x48>
 8002e62:	2300      	movs	r3, #0
 8002e64:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	db02      	blt.n	8002e72 <CO_SDOserver_init_canRxTx+0x56>
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	e000      	b.n	8002e74 <CO_SDOserver_init_canRxTx+0x58>
 8002e72:	2300      	movs	r3, #0
 8002e74:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 8002e76:	8afb      	ldrh	r3, [r7, #22]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <CO_SDOserver_init_canRxTx+0x6e>
 8002e7c:	8abb      	ldrh	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	611a      	str	r2, [r3, #16]
 8002e88:	e006      	b.n	8002e98 <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 8002e98:	8afa      	ldrh	r2, [r7, #22]
 8002e9a:	88f9      	ldrh	r1, [r7, #6]
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <CO_SDOserver_init_canRxTx+0xd4>)
 8002e9e:	9302      	str	r3, [sp, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002eac:	68b8      	ldr	r0, [r7, #8]
 8002eae:	f003 fbbb 	bl	8006628 <CO_CANrxBufferInit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	8aba      	ldrh	r2, [r7, #20]
 8002ebc:	88b9      	ldrh	r1, [r7, #4]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f003 fc0a 	bl	80066e0 <CO_CANtxBufferInit>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8002eda:	23ff      	movs	r3, #255	@ 0xff
 8002edc:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8002ee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	08002dc9 	.word	0x08002dc9

08002ef4 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b08f      	sub	sp, #60	@ 0x3c
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <OD_write_1201_additional+0x20>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <OD_write_1201_additional+0x20>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8002f14:	2309      	movs	r3, #9
 8002f16:	e0f9      	b.n	800310c <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    switch (stream->subIndex) {
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	7d1b      	ldrb	r3, [r3, #20]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	f200 80e8 	bhi.w	80030f8 <OD_write_1201_additional+0x204>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <OD_write_1201_additional+0x3c>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f41 	.word	0x08002f41
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08003009 	.word	0x08003009
 8002f3c:	080030cf 	.word	0x080030cf
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 8002f40:	2304      	movs	r3, #4
 8002f42:	e0e3      	b.n	800310c <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8002f44:	68b8      	ldr	r0, [r7, #8]
 8002f46:	f7ff fed0 	bl	8002cea <CO_getUint32>
 8002f4a:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f54:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f60:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	0fdb      	lsrs	r3, r3, #31
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4b69      	ldr	r3, [pc, #420]	@ (8003114 <OD_write_1201_additional+0x220>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d134      	bne.n	8002fe0 <OD_write_1201_additional+0xec>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <OD_write_1201_additional+0x98>
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <OD_write_1201_additional+0x98>
 8002f84:	8afa      	ldrh	r2, [r7, #22]
 8002f86:	8abb      	ldrh	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d129      	bne.n	8002fe0 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d028      	beq.n	8002fe4 <OD_write_1201_additional+0xf0>
 8002f92:	8afb      	ldrh	r3, [r7, #22]
 8002f94:	2b7f      	cmp	r3, #127	@ 0x7f
 8002f96:	d923      	bls.n	8002fe0 <OD_write_1201_additional+0xec>
 8002f98:	8afb      	ldrh	r3, [r7, #22]
 8002f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9e:	d903      	bls.n	8002fa8 <OD_write_1201_additional+0xb4>
 8002fa0:	8afb      	ldrh	r3, [r7, #22]
 8002fa2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8002fa6:	d91b      	bls.n	8002fe0 <OD_write_1201_additional+0xec>
 8002fa8:	8afb      	ldrh	r3, [r7, #22]
 8002faa:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002fae:	d903      	bls.n	8002fb8 <OD_write_1201_additional+0xc4>
 8002fb0:	8afb      	ldrh	r3, [r7, #22]
 8002fb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002fb6:	d313      	bcc.n	8002fe0 <OD_write_1201_additional+0xec>
 8002fb8:	8afb      	ldrh	r3, [r7, #22]
 8002fba:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002fbe:	d903      	bls.n	8002fc8 <OD_write_1201_additional+0xd4>
 8002fc0:	8afb      	ldrh	r3, [r7, #22]
 8002fc2:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8002fc6:	d30b      	bcc.n	8002fe0 <OD_write_1201_additional+0xec>
 8002fc8:	8afb      	ldrh	r3, [r7, #22]
 8002fca:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8002fce:	d303      	bcc.n	8002fd8 <OD_write_1201_additional+0xe4>
 8002fd0:	8afb      	ldrh	r3, [r7, #22]
 8002fd2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd6:	d303      	bcc.n	8002fe0 <OD_write_1201_additional+0xec>
 8002fd8:	8afb      	ldrh	r3, [r7, #22]
 8002fda:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fde:	d901      	bls.n	8002fe4 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8002fe0:	230f      	movs	r3, #15
 8002fe2:	e093      	b.n	800310c <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8002fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	@ 0x4c
 8002fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff0:	f8b3 004e 	ldrh.w	r0, [r3, #78]	@ 0x4e
 8002ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4603      	mov	r3, r0
 8003000:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003002:	f7ff ff0b 	bl	8002e1c <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003006:	e07a      	b.n	80030fe <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f7ff fe6e 	bl	8002cea <CO_getUint32>
 800300e:	6278      	str	r0, [r7, #36]	@ 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	b29b      	uxth	r3, r3
 8003014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003018:	847b      	strh	r3, [r7, #34]	@ 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	b29b      	uxth	r3, r3
 8003020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003024:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	43db      	mvns	r3, r3
 800302a:	0fdb      	lsrs	r3, r3, #31
 800302c:	b2db      	uxtb	r3, r3
 800302e:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8003030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003032:	4b38      	ldr	r3, [pc, #224]	@ (8003114 <OD_write_1201_additional+0x220>)
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d134      	bne.n	80030a4 <OD_write_1201_additional+0x1b0>
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <OD_write_1201_additional+0x15c>
 8003040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <OD_write_1201_additional+0x15c>
 8003048:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800304a:	8c3b      	ldrh	r3, [r7, #32]
 800304c:	429a      	cmp	r2, r3
 800304e:	d129      	bne.n	80030a4 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d028      	beq.n	80030a8 <OD_write_1201_additional+0x1b4>
 8003056:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003058:	2b7f      	cmp	r3, #127	@ 0x7f
 800305a:	d923      	bls.n	80030a4 <OD_write_1201_additional+0x1b0>
 800305c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800305e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003062:	d903      	bls.n	800306c <OD_write_1201_additional+0x178>
 8003064:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003066:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800306a:	d91b      	bls.n	80030a4 <OD_write_1201_additional+0x1b0>
 800306c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800306e:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8003072:	d903      	bls.n	800307c <OD_write_1201_additional+0x188>
 8003074:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003076:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800307a:	d313      	bcc.n	80030a4 <OD_write_1201_additional+0x1b0>
 800307c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800307e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003082:	d903      	bls.n	800308c <OD_write_1201_additional+0x198>
 8003084:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003086:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 800308a:	d30b      	bcc.n	80030a4 <OD_write_1201_additional+0x1b0>
 800308c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800308e:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8003092:	d303      	bcc.n	800309c <OD_write_1201_additional+0x1a8>
 8003094:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800309a:	d303      	bcc.n	80030a4 <OD_write_1201_additional+0x1b0>
 800309c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800309e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030a2:	d901      	bls.n	80030a8 <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 80030a4:	230f      	movs	r3, #15
 80030a6:	e031      	b.n	800310c <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	f8b3 004c 	ldrh.w	r0, [r3, #76]	@ 0x4c
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	f8b3 404e 	ldrh.w	r4, [r3, #78]	@ 0x4e
 80030b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030be:	9201      	str	r2, [sp, #4]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4623      	mov	r3, r4
 80030c4:	4602      	mov	r2, r0
 80030c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030c8:	f7ff fea8 	bl	8002e1c <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 80030cc:	e017      	b.n	80030fe <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80030d4:	230b      	movs	r3, #11
 80030d6:	e019      	b.n	800310c <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80030d8:	68b8      	ldr	r0, [r7, #8]
 80030da:	f7ff fdf9 	bl	8002cd0 <CO_getUint8>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 80030e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <OD_write_1201_additional+0x200>
 80030ec:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da03      	bge.n	80030fc <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80030f4:	230f      	movs	r3, #15
 80030f6:	e009      	b.n	800310c <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 80030f8:	230e      	movs	r3, #14
 80030fa:	e007      	b.n	800310c <OD_write_1201_additional+0x218>
            break;
 80030fc:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7fe fa7c 	bl	8001602 <OD_writeOriginal>
 800310a:	4603      	mov	r3, r0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3734      	adds	r7, #52	@ 0x34
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	3ffff800 	.word	0x3ffff800

08003118 <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	@ 0x30
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <CO_SDOserver_init+0x26>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <CO_SDOserver_init+0x26>
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <CO_SDOserver_init+0x26>
 8003138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	e0f5      	b.n	8003330 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8003150:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003152:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003156:	fb03 f202 	mul.w	r2, r3, r2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d117      	bne.n	800319a <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <CO_SDOserver_init+0x60>
 8003170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	da02      	bge.n	800317e <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e0d8      	b.n	8003330 <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8003186:	84fb      	strh	r3, [r7, #38]	@ 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 8003190:	84bb      	strh	r3, [r7, #36]	@ 0x24
        SDO->valid = true;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	611a      	str	r2, [r3, #16]
 8003198:	e0a4      	b.n	80032e4 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fdb2 	bl	8002d04 <OD_getIndex>
 80031a0:	4603      	mov	r3, r0
 80031a2:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 80031a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80031a6:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 80031aa:	d123      	bne.n	80031f4 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <CO_SDOserver_init+0xa2>
 80031b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da02      	bge.n	80031c0 <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	e0b7      	b.n	8003330 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80031c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80031d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            SDO->valid = true;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80031da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80031dc:	2301      	movs	r3, #1
 80031de:	2101      	movs	r1, #1
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fddc 	bl	8002d9e <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80031e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031e8:	2301      	movs	r3, #1
 80031ea:	2102      	movs	r1, #2
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff fdd6 	bl	8002d9e <OD_set_u32>
 80031f2:	e077      	b.n	80032e4 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 80031f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80031f6:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 80031fa:	d96f      	bls.n	80032dc <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 80031fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80031fe:	f5b3 5f94 	cmp.w	r3, #4736	@ 0x1280
 8003202:	d26b      	bcs.n	80032dc <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003204:	f107 021d 	add.w	r2, r7, #29
 8003208:	2301      	movs	r3, #1
 800320a:	2100      	movs	r1, #0
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fd9c 	bl	8002d4a <OD_get_u8>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8003218:	f107 0218 	add.w	r2, r7, #24
 800321c:	2301      	movs	r3, #1
 800321e:	2101      	movs	r1, #1
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff fda7 	bl	8002d74 <OD_get_u32>
 8003226:	4603      	mov	r3, r0
 8003228:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 800322c:	f107 0214 	add.w	r2, r7, #20
 8003230:	2301      	movs	r3, #1
 8003232:	2102      	movs	r1, #2
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fd9d 	bl	8002d74 <OD_get_u32>
 800323a:	4603      	mov	r3, r0
 800323c:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 800323e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <CO_SDOserver_init+0x14a>
 8003246:	7f7b      	ldrb	r3, [r7, #29]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d002      	beq.n	8003252 <CO_SDOserver_init+0x13a>
 800324c:	7f7b      	ldrb	r3, [r7, #29]
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <CO_SDOserver_init+0x14a>
 8003252:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 800325a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 8003262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8003268:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800326a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800326c:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 800326e:	f06f 030b 	mvn.w	r3, #11
 8003272:	e05d      	b.n	8003330 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db05      	blt.n	8003286 <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 800327e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003282:	b29b      	uxth	r3, r3
 8003284:	e000      	b.n	8003288 <CO_SDOserver_init+0x170>
 8003286:	2300      	movs	r3, #0
 8003288:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db05      	blt.n	800329c <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003294:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003298:	b29b      	uxth	r3, r3
 800329a:	e000      	b.n	800329e <CO_SDOserver_init+0x186>
 800329c:	2300      	movs	r3, #0
 800329e:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	659a      	str	r2, [r3, #88]	@ 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a23      	ldr	r2, [pc, #140]	@ (8003338 <CO_SDOserver_init+0x220>)
 80032aa:	65da      	str	r2, [r3, #92]	@ 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a23      	ldr	r2, [pc, #140]	@ (800333c <CO_SDOserver_init+0x224>)
 80032b0:	661a      	str	r2, [r3, #96]	@ 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3358      	adds	r3, #88	@ 0x58
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fd33 	bl	8002d24 <OD_extension_init>
 80032be:	4603      	mov	r3, r0
 80032c0:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 80032c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 80032ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 80032d0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80032d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d4:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 80032d6:	f06f 030b 	mvn.w	r3, #11
 80032da:	e029      	b.n	8003330 <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
 80032e0:	e026      	b.n	8003330 <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 80032e2:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032ee:	649a      	str	r2, [r3, #72]	@ 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80032f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80032fe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	651a      	str	r2, [r3, #80]	@ 0x50
    SDO->COB_IDServerToClient = 0;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003312:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003314:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003316:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003318:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 800331c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800331e:	9201      	str	r2, [sp, #4]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff fd77 	bl	8002e1c <CO_SDOserver_init_canRxTx>
 800332e:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8003330:	4618      	mov	r0, r3
 8003332:	3728      	adds	r7, #40	@ 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	08001553 	.word	0x08001553
 800333c:	08002ef5 	.word	0x08002ef5

08003340 <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b08b      	sub	sp, #44	@ 0x2c
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	4611      	mov	r1, r2
 800334c:	461a      	mov	r2, r3
 800334e:	460b      	mov	r3, r1
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	4613      	mov	r3, r2
 8003354:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (SDO->finished) {
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8082 	beq.w	800346c <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <validateAndWriteToOD+0x5c>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003378:	429a      	cmp	r2, r3
 800337a:	d00f      	beq.n	800339c <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003384:	429a      	cmp	r2, r3
 8003386:	d901      	bls.n	800338c <validateAndWriteToOD+0x4c>
 8003388:	4a73      	ldr	r2, [pc, #460]	@ (8003558 <validateAndWriteToOD+0x218>)
 800338a:	e000      	b.n	800338e <validateAndWriteToOD+0x4e>
 800338c:	4a73      	ldr	r2, [pc, #460]	@ (800355c <validateAndWriteToOD+0x21c>)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	751a      	strb	r2, [r3, #20]
            return false;
 8003398:	2300      	movs	r3, #0
 800339a:	e0d8      	b.n	800354e <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80033a8:	b25b      	sxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	da42      	bge.n	8003434 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <validateAndWriteToOD+0x7e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d93a      	bls.n	8003434 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033c4:	3302      	adds	r3, #2
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d834      	bhi.n	8003434 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            SDO->bufOffsetWr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            SDO->sizeTran++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	66da      	str	r2, [r3, #108]	@ 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <validateAndWriteToOD+0xc2>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d913      	bls.n	800342a <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4413      	add	r3, r2
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                SDO->bufOffsetWr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	66da      	str	r2, [r3, #108]	@ 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
 8003432:	e02d      	b.n	8003490 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
 8003442:	e025      	b.n	8003490 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	429a      	cmp	r2, r3
 800344c:	d020      	beq.n	8003490 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	429a      	cmp	r2, r3
 8003456:	d201      	bcs.n	800345c <validateAndWriteToOD+0x11c>
 8003458:	4a3f      	ldr	r2, [pc, #252]	@ (8003558 <validateAndWriteToOD+0x218>)
 800345a:	e000      	b.n	800345e <validateAndWriteToOD+0x11e>
 800345c:	4a3f      	ldr	r2, [pc, #252]	@ (800355c <validateAndWriteToOD+0x21c>)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	751a      	strb	r2, [r3, #20]
            return false;
 8003468:	2300      	movs	r3, #0
 800346a:	e070      	b.n	800354e <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <validateAndWriteToOD+0x150>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347c:	429a      	cmp	r2, r3
 800347e:	d907      	bls.n	8003490 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <validateAndWriteToOD+0x218>)
 8003484:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	751a      	strb	r2, [r3, #20]
            return false;
 800348c:	2300      	movs	r3, #0
 800348e:	e05e      	b.n	800354e <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
    ODR_t odRet;

    CO_LOCK_OD(SDO->CANdevTx);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003498:	f3ef 8210 	mrs	r2, PRIMASK
 800349c:	617a      	str	r2, [r7, #20]
  return(result);
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80034a2:	b672      	cpsid	i
}
 80034a4:	bf00      	nop
    odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f103 0018 	add.w	r0, r3, #24
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80034bc:	f107 0310 	add.w	r3, r7, #16
 80034c0:	47a0      	blx	r4
 80034c2:	4603      	mov	r3, r0
 80034c4:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 80034de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d011      	beq.n	800350a <validateAndWriteToOD+0x1ca>
 80034e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d00c      	beq.n	800350a <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80034f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe fa6d 	bl	80019d4 <OD_getSDOabCode>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	751a      	strb	r2, [r3, #20]
        return false;
 8003506:	2300      	movs	r3, #0
 8003508:	e021      	b.n	800354e <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <validateAndWriteToOD+0x1ec>
 8003512:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d107      	bne.n	800352c <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4a0f      	ldr	r2, [pc, #60]	@ (800355c <validateAndWriteToOD+0x21c>)
 8003520:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	751a      	strb	r2, [r3, #20]
        return false;
 8003528:	2300      	movs	r3, #0
 800352a:	e010      	b.n	800354e <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <validateAndWriteToOD+0x20c>
 8003534:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d107      	bne.n	800354c <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4a06      	ldr	r2, [pc, #24]	@ (8003558 <validateAndWriteToOD+0x218>)
 8003540:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	751a      	strb	r2, [r3, #20]
        return false;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	372c      	adds	r7, #44	@ 0x2c
 8003552:	46bd      	mov	sp, r7
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	bf00      	nop
 8003558:	06070012 	.word	0x06070012
 800355c:	06070013 	.word	0x06070013

08003560 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b08d      	sub	sp, #52	@ 0x34
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 80ab 	bne.w	80036de <readFromOd+0x17e>
 8003588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	f080 80a6 	bcs.w	80036de <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035a4:	4413      	add	r3, r2
 80035a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a8:	4619      	mov	r1, r3
 80035aa:	f006 f9b1 	bl	8009910 <memmove>
        SDO->bufOffsetRd = 0;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        SDO->bufOffsetWr = countRemain;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	f1c3 0320 	rsb	r3, r3, #32
 80035c4:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
        ODR_t odRet;

        CO_LOCK_OD(SDO->CANdevTx);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ce:	f3ef 8210 	mrs	r2, PRIMASK
 80035d2:	617a      	str	r2, [r7, #20]
  return(result);
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80035d8:	b672      	cpsid	i
}
 80035da:	bf00      	nop
        odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f103 0018 	add.w	r0, r3, #24
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	3380      	adds	r3, #128	@ 0x80
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	18d1      	adds	r1, r2, r3
 80035ee:	f107 0310 	add.w	r3, r7, #16
 80035f2:	6a3a      	ldr	r2, [r7, #32]
 80035f4:	47a0      	blx	r4
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003602:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f383 8810 	msr	PRIMASK, r3
}
 800360a:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 800360c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003610:	2b00      	cmp	r3, #0
 8003612:	d011      	beq.n	8003638 <readFromOd+0xd8>
 8003614:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d00c      	beq.n	8003638 <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 800361e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe f9d6 	bl	80019d4 <OD_getSDOabCode>
 8003628:	4602      	mov	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	751a      	strb	r2, [r3, #20]
            return false;
 8003634:	2300      	movs	r3, #0
 8003636:	e053      	b.n	80036e0 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363c:	4413      	add	r3, r2
 800363e:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d027      	beq.n	8003696 <readFromOd+0x136>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800364c:	b25b      	sxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	da21      	bge.n	8003696 <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	3380      	adds	r3, #128	@ 0x80
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	3380      	adds	r3, #128	@ 0x80
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4413      	add	r3, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc fddc 	bl	8000224 <strlen>
 800366c:	62b8      	str	r0, [r7, #40]	@ 0x28
            if (countStr == 0U) {
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <readFromOd+0x118>
                countStr = 1;
 8003674:	2301      	movs	r3, #1
 8003676:	62bb      	str	r3, [r7, #40]	@ 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800367c:	429a      	cmp	r2, r3
 800367e:	d20a      	bcs.n	8003696 <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	441a      	add	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	441a      	add	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <readFromOd+0x156>
 80036ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d110      	bne.n	80036d8 <readFromOd+0x178>
            SDO->finished = false;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	675a      	str	r2, [r3, #116]	@ 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d90a      	bls.n	80036de <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a07      	ldr	r2, [pc, #28]	@ (80036e8 <readFromOd+0x188>)
 80036cc:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	751a      	strb	r2, [r3, #20]
                return false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e003      	b.n	80036e0 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	675a      	str	r2, [r3, #116]	@ 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3734      	adds	r7, #52	@ 0x34
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	06040047 	.word	0x06040047

080036ec <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b09b      	sub	sp, #108	@ 0x6c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d103      	bne.n	8003708 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8003700:	f06f 0301 	mvn.w	r3, #1
 8003704:	f000 bd04 	b.w	8004110 <CO_SDOserver_process+0xa24>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 800370e:	2300      	movs	r3, #0
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf14      	ite	ne
 800371a:	2301      	movne	r3, #1
 800371c:	2300      	moveq	r3, #0
 800371e:	b2db      	uxtb	r3, r3
 8003720:	657b      	str	r3, [r7, #84]	@ 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	7d1b      	ldrb	r3, [r3, #20]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10a      	bne.n	8003742 <CO_SDOserver_process+0x56>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <CO_SDOserver_process+0x56>
 8003734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d103      	bne.n	8003742 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003740:	e2db      	b.n	8003cfa <CO_SDOserver_process+0x60e>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <CO_SDOserver_process+0x64>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	63da      	str	r2, [r3, #60]	@ 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003762:	e2ca      	b.n	8003cfa <CO_SDOserver_process+0x60e>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 82c7 	beq.w	8003cfa <CO_SDOserver_process+0x60e>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	7d1b      	ldrb	r3, [r3, #20]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 80cd 	bne.w	8003912 <CO_SDOserver_process+0x226>
            bool_t upload = false;
 8003778:	2300      	movs	r3, #0
 800377a:	663b      	str	r3, [r7, #96]	@ 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003786:	2b20      	cmp	r3, #32
 8003788:	d103      	bne.n	8003792 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2211      	movs	r2, #17
 800378e:	751a      	strb	r2, [r3, #20]
 8003790:	e00f      	b.n	80037b2 <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003798:	2b40      	cmp	r3, #64	@ 0x40
 800379a:	d105      	bne.n	80037a8 <CO_SDOserver_process+0xbc>
                upload = true;
 800379c:	2301      	movs	r3, #1
 800379e:	663b      	str	r3, [r7, #96]	@ 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2221      	movs	r2, #33	@ 0x21
 80037a4:	751a      	strb	r2, [r3, #20]
 80037a6:	e004      	b.n	80037b2 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 80037a8:	4ba9      	ldr	r3, [pc, #676]	@ (8003a50 <CO_SDOserver_process+0x364>)
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 80037b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d163      	bne.n	8003880 <CO_SDOserver_process+0x194>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037be:	b21b      	sxth	r3, r3
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	4313      	orrs	r3, r2
 80037ce:	b21b      	sxth	r3, r3
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	871a      	strh	r2, [r3, #56]	@ 0x38
                SDO->subIndex = SDO->CANrxData[3];
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7fd ff8f 	bl	8001710 <OD_find>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 103a 	ldrb.w	r1, [r3, #58]	@ 0x3a
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f103 0218 	add.w	r2, r3, #24
 80037fe:	2300      	movs	r3, #0
 8003800:	f7fd ffe2 	bl	80017c8 <OD_getSub>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                if (odRet != ODR_OK) {
 800380a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <CO_SDOserver_process+0x13c>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003812:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f8dc 	bl	80019d4 <OD_getSDOabCode>
 800381c:	4603      	mov	r3, r0
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	751a      	strb	r2, [r3, #20]
 8003826:	e02b      	b.n	8003880 <CO_SDOserver_process+0x194>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800382e:	f003 0303 	and.w	r3, r3, #3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d105      	bne.n	8003842 <CO_SDOserver_process+0x156>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003836:	4b87      	ldr	r3, [pc, #540]	@ (8003a54 <CO_SDOserver_process+0x368>)
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	751a      	strb	r2, [r3, #20]
 8003840:	e01e      	b.n	8003880 <CO_SDOserver_process+0x194>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 8003842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <CO_SDOserver_process+0x176>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <CO_SDOserver_process+0x176>
                        abortCode = CO_SDO_AB_WRITEONLY;
 8003856:	4b80      	ldr	r3, [pc, #512]	@ (8003a58 <CO_SDOserver_process+0x36c>)
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	751a      	strb	r2, [r3, #20]
 8003860:	e00e      	b.n	8003880 <CO_SDOserver_process+0x194>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 8003862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <CO_SDOserver_process+0x194>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <CO_SDOserver_process+0x194>
                        abortCode = CO_SDO_AB_READONLY;
 8003876:	4b79      	ldr	r3, [pc, #484]	@ (8003a5c <CO_SDOserver_process+0x370>)
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8003880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003882:	2b00      	cmp	r3, #0
 8003884:	d045      	beq.n	8003912 <CO_SDOserver_process+0x226>
 8003886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d142      	bne.n	8003912 <CO_SDOserver_process+0x226>
                SDO->bufOffsetRd = 0;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->bufOffsetWr = 0;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                SDO->sizeTran = 0;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	66da      	str	r2, [r3, #108]	@ 0x6c
                SDO->finished = false;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	675a      	str	r2, [r3, #116]	@ 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 80038a8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80038ac:	2300      	movs	r3, #0
 80038ae:	2207      	movs	r2, #7
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fe55 	bl	8003560 <readFromOd>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02a      	beq.n	8003912 <CO_SDOserver_process+0x226>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01a      	beq.n	80038fa <CO_SDOserver_process+0x20e>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	669a      	str	r2, [r3, #104]	@ 0x68

                        if (SDO->sizeInd == 0U) {
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <CO_SDOserver_process+0x1f4>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	669a      	str	r2, [r3, #104]	@ 0x68
 80038de:	e018      	b.n	8003912 <CO_SDOserver_process+0x226>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d011      	beq.n	8003912 <CO_SDOserver_process+0x226>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80038ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003a60 <CO_SDOserver_process+0x374>)
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	751a      	strb	r2, [r3, #20]
 80038f8:	e00b      	b.n	8003912 <CO_SDOserver_process+0x226>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003900:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8003902:	2b00      	cmp	r3, #0
 8003904:	db02      	blt.n	800390c <CO_SDOserver_process+0x220>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	e000      	b.n	800390e <CO_SDOserver_process+0x222>
 800390c:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	6693      	str	r3, [r2, #104]	@ 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	7d1b      	ldrb	r3, [r3, #20]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	7d1b      	ldrb	r3, [r3, #20]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	d005      	beq.n	800393a <CO_SDOserver_process+0x24e>
 800392e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <CO_SDOserver_process+0x24e>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <CO_SDOserver_process+0x250>
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8003940:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        if (isOKstate) {
 800394c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 81ca 	beq.w	8003cea <CO_SDOserver_process+0x5fe>
            switch (SDO->state) {
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	7d1b      	ldrb	r3, [r3, #20]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3b11      	subs	r3, #17
 800395e:	2b12      	cmp	r3, #18
 8003960:	f200 81b4 	bhi.w	8003ccc <CO_SDOserver_process+0x5e0>
 8003964:	a201      	add	r2, pc, #4	@ (adr r2, 800396c <CO_SDOserver_process+0x280>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	080039b9 	.word	0x080039b9
 8003970:	08003ccd 	.word	0x08003ccd
 8003974:	08003b85 	.word	0x08003b85
 8003978:	08003ccd 	.word	0x08003ccd
 800397c:	08003ccd 	.word	0x08003ccd
 8003980:	08003ccd 	.word	0x08003ccd
 8003984:	08003ccd 	.word	0x08003ccd
 8003988:	08003ccd 	.word	0x08003ccd
 800398c:	08003ccd 	.word	0x08003ccd
 8003990:	08003ccd 	.word	0x08003ccd
 8003994:	08003ccd 	.word	0x08003ccd
 8003998:	08003ccd 	.word	0x08003ccd
 800399c:	08003ccd 	.word	0x08003ccd
 80039a0:	08003ccd 	.word	0x08003ccd
 80039a4:	08003ccd 	.word	0x08003ccd
 80039a8:	08003ccd 	.word	0x08003ccd
 80039ac:	08003c7b 	.word	0x08003c7b
 80039b0:	08003ccd 	.word	0x08003ccd
 80039b4:	08003c83 	.word	0x08003c83
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80a4 	beq.w	8003b10 <CO_SDOserver_process+0x424>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	647b      	str	r3, [r7, #68]	@ 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 80039ce:	2304      	movs	r3, #4
 80039d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <CO_SDOserver_process+0x30a>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039f4:	e007      	b.n	8003a06 <CO_SDOserver_process+0x31a>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 80039f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <CO_SDOserver_process+0x31a>
 80039fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d801      	bhi.n	8003a06 <CO_SDOserver_process+0x31a>
                            dataSizeToWrite = sizeInOd;
 8003a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8003a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	809a      	strh	r2, [r3, #4]
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8003a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f006 f81c 	bl	8009a5a <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a28:	b25b      	sxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da22      	bge.n	8003a74 <CO_SDOserver_process+0x388>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8003a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <CO_SDOserver_process+0x350>
 8003a34:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d21b      	bcs.n	8003a74 <CO_SDOserver_process+0x388>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 8003a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	643b      	str	r3, [r7, #64]	@ 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 8003a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d10c      	bne.n	8003a64 <CO_SDOserver_process+0x378>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e00b      	b.n	8003a66 <CO_SDOserver_process+0x37a>
 8003a4e:	bf00      	nop
 8003a50:	05040001 	.word	0x05040001
 8003a54:	06010000 	.word	0x06010000
 8003a58:	06010001 	.word	0x06010001
 8003a5c:	06010002 	.word	0x06010002
 8003a60:	06040047 	.word	0x06040047
 8003a64:	2302      	movs	r3, #2
 8003a66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a68:	4413      	add	r3, r2
 8003a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a70:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 8003a72:	e016      	b.n	8003aa2 <CO_SDOserver_process+0x3b6>
                        } else if (sizeInOd == 0U) {
 8003a74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <CO_SDOserver_process+0x396>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a7e:	621a      	str	r2, [r3, #32]
 8003a80:	e00f      	b.n	8003aa2 <CO_SDOserver_process+0x3b6>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 8003a82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d00b      	beq.n	8003aa2 <CO_SDOserver_process+0x3b6>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003a8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d901      	bls.n	8003a96 <CO_SDOserver_process+0x3aa>
 8003a92:	4b91      	ldr	r3, [pc, #580]	@ (8003cd8 <CO_SDOserver_process+0x5ec>)
 8003a94:	e000      	b.n	8003a98 <CO_SDOserver_process+0x3ac>
 8003a96:	4b91      	ldr	r3, [pc, #580]	@ (8003cdc <CO_SDOserver_process+0x5f0>)
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	751a      	strb	r2, [r3, #20]
                            break;
 8003aa0:	e123      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
                        ODR_t odRet;

                        CO_LOCK_OD(SDO->CANdevTx);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aaa:	f3ef 8210 	mrs	r2, PRIMASK
 8003aae:	637a      	str	r2, [r7, #52]	@ 0x34
  return(result);
 8003ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ab2:	635a      	str	r2, [r3, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab4:	b672      	cpsid	i
}
 8003ab6:	bf00      	nop
                        odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f103 0018 	add.w	r0, r3, #24
 8003ac2:	f107 0320 	add.w	r3, r7, #32
 8003ac6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8003aca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003acc:	47a0      	blx	r4
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ade:	f383 8810 	msr	PRIMASK, r3
}
 8003ae2:	bf00      	nop

                        if (odRet != ODR_OK) {
 8003ae4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <CO_SDOserver_process+0x416>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003aec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd ff6f 	bl	80019d4 <OD_getSDOabCode>
 8003af6:	4603      	mov	r3, r0
 8003af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	751a      	strb	r2, [r3, #20]
                            break;
 8003b00:	e0f3      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2212      	movs	r2, #18
 8003b06:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	675a      	str	r2, [r3, #116]	@ 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 8003b0e:	e0ec      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <CO_SDOserver_process+0x484>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3344      	adds	r3, #68	@ 0x44
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	669a      	str	r2, [r3, #104]	@ 0x68
                            if (sizeInOd > 0U) {
 8003b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01e      	beq.n	8003b76 <CO_SDOserver_process+0x48a>
                                if (SDO->sizeInd > sizeInOd) {
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d205      	bcs.n	8003b4e <CO_SDOserver_process+0x462>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 8003b42:	4b65      	ldr	r3, [pc, #404]	@ (8003cd8 <CO_SDOserver_process+0x5ec>)
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	751a      	strb	r2, [r3, #20]
                                    break;
 8003b4c:	e0cd      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                                else if ((SDO->sizeInd < sizeInOd)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d90e      	bls.n	8003b76 <CO_SDOserver_process+0x48a>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	db08      	blt.n	8003b76 <CO_SDOserver_process+0x48a>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 8003b64:	4b5d      	ldr	r3, [pc, #372]	@ (8003cdc <CO_SDOserver_process+0x5f0>)
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	751a      	strb	r2, [r3, #20]
                                    break;
 8003b6e:	e0bc      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                            SDO->sizeInd = 0;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	669a      	str	r2, [r3, #104]	@ 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2212      	movs	r2, #18
 8003b7a:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	675a      	str	r2, [r3, #116]	@ 0x74
                    break;
 8003b82:	e0b2      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b8a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d16d      	bne.n	8003c6e <CO_SDOserver_process+0x582>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	675a      	str	r2, [r3, #116]	@ 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                        if (toggle != SDO->toggle) {
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003bc0:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d005      	beq.n	8003bd4 <CO_SDOserver_process+0x4e8>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8003bc8:	4b45      	ldr	r3, [pc, #276]	@ (8003ce0 <CO_SDOserver_process+0x5f4>)
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	751a      	strb	r2, [r3, #20]
                            break;
 8003bd2:	e08a      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bda:	085b      	lsrs	r3, r3, #1
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bf2:	18d0      	adds	r0, r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3341      	adds	r3, #65	@ 0x41
 8003bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f005 ff2d 	bl	8009a5a <memcpy>
                        SDO->bufOffsetWr += count;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c08:	441a      	add	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        SDO->sizeTran += count;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <CO_SDOserver_process+0x550>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d905      	bls.n	8003c3c <CO_SDOserver_process+0x550>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8003c30:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <CO_SDOserver_process+0x5ec>)
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	751a      	strb	r2, [r3, #20]
                            break;
 8003c3a:	e056      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <CO_SDOserver_process+0x566>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c4a:	f1c3 0320 	rsb	r3, r3, #32
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d809      	bhi.n	8003c66 <CO_SDOserver_process+0x57a>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 8003c52:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003c56:	2300      	movs	r3, #0
 8003c58:	2200      	movs	r2, #0
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff fb70 	bl	8003340 <validateAndWriteToOD>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d040      	beq.n	8003ce8 <CO_SDOserver_process+0x5fc>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2214      	movs	r2, #20
 8003c6a:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8003c6c:	e03d      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce4 <CO_SDOserver_process+0x5f8>)
 8003c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	751a      	strb	r2, [r3, #20]
                    break;
 8003c78:	e037      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2222      	movs	r2, #34	@ 0x22
 8003c7e:	751a      	strb	r2, [r3, #20]
                    break;
 8003c80:	e033      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c88:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8003c8c:	2b60      	cmp	r3, #96	@ 0x60
 8003c8e:	d117      	bne.n	8003cc0 <CO_SDOserver_process+0x5d4>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
                        if (toggle != SDO->toggle) {
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003ca4:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d005      	beq.n	8003cb8 <CO_SDOserver_process+0x5cc>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce0 <CO_SDOserver_process+0x5f4>)
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	751a      	strb	r2, [r3, #20]
                            break;
 8003cb6:	e018      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2224      	movs	r2, #36	@ 0x24
 8003cbc:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 8003cbe:	e014      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                        abortCode = CO_SDO_AB_CMD;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <CO_SDOserver_process+0x5f8>)
 8003cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	751a      	strb	r2, [r3, #20]
                    break;
 8003cca:	e00e      	b.n	8003cea <CO_SDOserver_process+0x5fe>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <CO_SDOserver_process+0x5f8>)
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	751a      	strb	r2, [r3, #20]
                    break;
 8003cd6:	e008      	b.n	8003cea <CO_SDOserver_process+0x5fe>
 8003cd8:	06070012 	.word	0x06070012
 8003cdc:	06070013 	.word	0x06070013
 8003ce0:	05030000 	.word	0x05030000
 8003ce4:	05040001 	.word	0x05040001
                                break;
 8003ce8:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
        timeDifference_us = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8003cfa:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d11e      	bne.n	8003d40 <CO_SDOserver_process+0x654>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d205      	bcs.n	8003d1a <CO_SDOserver_process+0x62e>
            SDO->timeoutTimer += timeDifference_us;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d304      	bcc.n	8003d30 <CO_SDOserver_process+0x644>
            abortCode = CO_SDO_AB_TIMEOUT;
 8003d26:	4b9c      	ldr	r3, [pc, #624]	@ (8003f98 <CO_SDOserver_process+0x8ac>)
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <CO_SDOserver_process+0x654>
            ret = CO_SDO_RT_transmittBufferFull;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003d40:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 81ab 	bne.w	80040a0 <CO_SDOserver_process+0x9b4>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	3305      	adds	r3, #5
 8003d50:	2208      	movs	r2, #8
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 fdf5 	bl	8009944 <memset>

        switch (SDO->state) {
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	7d1b      	ldrb	r3, [r3, #20]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3b12      	subs	r3, #18
 8003d62:	2b12      	cmp	r3, #18
 8003d64:	f200 8199 	bhi.w	800409a <CO_SDOserver_process+0x9ae>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <CO_SDOserver_process+0x684>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003dbd 	.word	0x08003dbd
 8003d74:	0800409b 	.word	0x0800409b
 8003d78:	08003e3f 	.word	0x08003e3f
 8003d7c:	0800409b 	.word	0x0800409b
 8003d80:	0800409b 	.word	0x0800409b
 8003d84:	0800409b 	.word	0x0800409b
 8003d88:	0800409b 	.word	0x0800409b
 8003d8c:	0800409b 	.word	0x0800409b
 8003d90:	0800409b 	.word	0x0800409b
 8003d94:	0800409b 	.word	0x0800409b
 8003d98:	0800409b 	.word	0x0800409b
 8003d9c:	0800409b 	.word	0x0800409b
 8003da0:	0800409b 	.word	0x0800409b
 8003da4:	0800409b 	.word	0x0800409b
 8003da8:	0800409b 	.word	0x0800409b
 8003dac:	0800409b 	.word	0x0800409b
 8003db0:	08003e9b 	.word	0x08003e9b
 8003db4:	0800409b 	.word	0x0800409b
 8003db8:	08003f69 	.word	0x08003f69
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2260      	movs	r2, #96	@ 0x60
 8003dc2:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8003dea:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	67da      	str	r2, [r3, #124]	@ 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f002 fce9 	bl	80067d4 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <CO_SDOserver_process+0x72c>
                    SDO->state = CO_SDO_ST_IDLE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8003e16:	e143      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
                    SDO->toggle = 0x00;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->sizeTran = 0;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	66da      	str	r2, [r3, #108]	@ 0x6c
                    SDO->bufOffsetWr = 0;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                    SDO->bufOffsetRd = 0;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2213      	movs	r2, #19
 8003e3a:	751a      	strb	r2, [r3, #20]
                break;
 8003e3c:	e130      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 2070 	ldrb.w	r2, [r3, #112]	@ 0x70
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f042 0220 	orr.w	r2, r2, #32
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <CO_SDOserver_process+0x772>
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	e000      	b.n	8003e60 <CO_SDOserver_process+0x774>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	67da      	str	r2, [r3, #124]	@ 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f002 fcac 	bl	80067d4 <CO_CANsend>
                if (SDO->finished) {
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <CO_SDOserver_process+0x7a6>
                    SDO->state = CO_SDO_ST_IDLE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 8003e90:	e106      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2213      	movs	r2, #19
 8003e96:	751a      	strb	r2, [r3, #20]
                break;
 8003e98:	e102      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d024      	beq.n	8003eec <CO_SDOserver_process+0x800>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d820      	bhi.n	8003eec <CO_SDOserver_process+0x800>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f1c3 0304 	rsb	r3, r3, #4
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f042 0243 	orr.w	r2, r2, #67	@ 0x43
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f103 0009 	add.w	r0, r3, #9
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f005 fdbe 	bl	8009a5a <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003eea:	e020      	b.n	8003f2e <CO_SDOserver_process+0x842>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <CO_SDOserver_process+0x826>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8003efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003efc:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2241      	movs	r2, #65	@ 0x41
 8003f04:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	3309      	adds	r3, #9
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e003      	b.n	8003f1a <CO_SDOserver_process+0x82e>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2240      	movs	r2, #64	@ 0x40
 8003f18:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    SDO->timeoutTimer = 0;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2223      	movs	r2, #35	@ 0x23
 8003f2c:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8003f54:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f002 fc37 	bl	80067d4 <CO_CANsend>
                break;
 8003f66:	e09b      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 8003f68:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2207      	movs	r2, #7
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff faf5 	bl	8003560 <readFromOd>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8090 	beq.w	800409e <CO_SDOserver_process+0x9b2>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	f892 2070 	ldrb.w	r2, [r2, #112]	@ 0x70
 8003f88:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <CO_SDOserver_process+0x8b0>
 8003f94:	2210      	movs	r2, #16
 8003f96:	e002      	b.n	8003f9e <CO_SDOserver_process+0x8b2>
 8003f98:	05040000 	.word	0x05040000
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8003fb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d906      	bls.n	8003fc8 <CO_SDOserver_process+0x8dc>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01b      	beq.n	8003ffa <CO_SDOserver_process+0x90e>
 8003fc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fc4:	2b07      	cmp	r3, #7
 8003fc6:	d118      	bne.n	8003ffa <CO_SDOserver_process+0x90e>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	795a      	ldrb	r2, [r3, #5]
 8003fce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f1c3 0307 	rsb	r3, r3, #7
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003ff8:	e007      	b.n	800400a <CO_SDOserver_process+0x91e>
                } else {
                    SDO->timeoutTimer = 0;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	67da      	str	r2, [r3, #124]	@ 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2223      	movs	r2, #35	@ 0x23
 8004004:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8004006:	2307      	movs	r3, #7
 8004008:	65bb      	str	r3, [r7, #88]	@ 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	1d98      	adds	r0, r3, #6
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800401c:	4413      	add	r3, r2
 800401e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004020:	4619      	mov	r1, r3
 8004022:	f005 fd1a 	bl	8009a5a <memcpy>
                SDO->bufOffsetRd += count;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800402c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800402e:	441a      	add	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                SDO->sizeTran += count;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800403a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800403c:	441a      	add	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01e      	beq.n	8004088 <CO_SDOserver_process+0x99c>
                    if (SDO->sizeTran > SDO->sizeInd) {
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004052:	429a      	cmp	r2, r3
 8004054:	d905      	bls.n	8004062 <CO_SDOserver_process+0x976>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8004056:	4b30      	ldr	r3, [pc, #192]	@ (8004118 <CO_SDOserver_process+0xa2c>)
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	751a      	strb	r2, [r3, #20]
                        break;
 8004060:	e01e      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8004062:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <CO_SDOserver_process+0x99c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004072:	429a      	cmp	r2, r3
 8004074:	d208      	bcs.n	8004088 <CO_SDOserver_process+0x99c>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004076:	4b29      	ldr	r3, [pc, #164]	@ (800411c <CO_SDOserver_process+0xa30>)
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	751a      	strb	r2, [r3, #20]
                        break;
 8004086:	e00b      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4619      	mov	r1, r3
 8004092:	4610      	mov	r0, r2
 8004094:	f002 fb9e 	bl	80067d4 <CO_CANsend>
                break;
 8004098:	e002      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <CO_SDOserver_process+0x9b4>
                    break;
 800409e:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 80040a0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d131      	bne.n	800410c <CO_SDOserver_process+0xa20>
        if (SDO->state == CO_SDO_ST_ABORT) {
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	7d1b      	ldrb	r3, [r3, #20]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d12c      	bne.n	800410c <CO_SDOserver_process+0xa20>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b4:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2280      	movs	r2, #128	@ 0x80
 80040bc:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 80040e4:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	3309      	adds	r3, #9
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4619      	mov	r1, r3
 80040fa:	4610      	mov	r0, r2
 80040fc:	f002 fb6a 	bl	80067d4 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004106:	23f6      	movs	r3, #246	@ 0xf6
 8004108:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 800410c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8004110:	4618      	mov	r0, r3
 8004112:	376c      	adds	r7, #108	@ 0x6c
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	06070012 	.word	0x06070012
 800411c:	06070013 	.word	0x06070013

08004120 <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	73fb      	strb	r3, [r7, #15]
    return value;
 800412e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <CO_getUint32>:
CO_getUint32(const void* buf) {
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
    return value;
 8004148:	68fb      	ldr	r3, [r7, #12]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <OD_getIndex+0x14>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	e000      	b.n	800416a <OD_getIndex+0x16>
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004184:	2305      	movs	r3, #5
 8004186:	e003      	b.n	8004190 <OD_extension_init+0x1c>
    entry->extension = extension;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af02      	add	r7, sp, #8
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	460b      	mov	r3, r1
 80041a8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80041aa:	7af9      	ldrb	r1, [r7, #11]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2301      	movs	r3, #1
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fd fc29 	bl	8001a0c <OD_get_value>
 80041ba:	4603      	mov	r3, r0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	460b      	mov	r3, r1
 80041d2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80041d4:	7af9      	ldrb	r1, [r7, #11]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2304      	movs	r3, #4
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7fd fc14 	bl	8001a0c <OD_get_value>
 80041e4:	4603      	mov	r3, r0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	7c5b      	ldrb	r3, [r3, #17]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004214:	2301      	movs	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e019      	b.n	800424e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004220:	b2da      	uxtb	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	721a      	strb	r2, [r3, #8]
 8004226:	e012      	b.n	800424e <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d109      	bne.n	8004242 <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3305      	adds	r3, #5
 8004232:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e005      	b.n	800424e <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00c      	beq.n	800426e <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2201      	movs	r2, #1
 800426c:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b08f      	sub	sp, #60	@ 0x3c
 800427c:	af04      	add	r7, sp, #16
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00c      	beq.n	80042a6 <OD_write_1005+0x2e>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	7d1b      	ldrb	r3, [r3, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <OD_write_1005+0x2e>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <OD_write_1005+0x2e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d102      	bne.n	80042a6 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 80042a6:	2309      	movs	r3, #9
 80042a8:	e0a2      	b.n	80043f0 <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 80042b0:	68b8      	ldr	r0, [r7, #8]
 80042b2:	f7ff ff42 	bl	800413a <CO_getUint32>
 80042b6:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c0:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	4b48      	ldr	r3, [pc, #288]	@ (80043f8 <OD_write_1005+0x180>)
 80042d8:	4013      	ands	r3, r2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d133      	bne.n	8004346 <OD_write_1005+0xce>
 80042de:	8bfb      	ldrh	r3, [r7, #30]
 80042e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80042e2:	d930      	bls.n	8004346 <OD_write_1005+0xce>
 80042e4:	8bfb      	ldrh	r3, [r7, #30]
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ea:	d903      	bls.n	80042f4 <OD_write_1005+0x7c>
 80042ec:	8bfb      	ldrh	r3, [r7, #30]
 80042ee:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80042f2:	d928      	bls.n	8004346 <OD_write_1005+0xce>
 80042f4:	8bfb      	ldrh	r3, [r7, #30]
 80042f6:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80042fa:	d903      	bls.n	8004304 <OD_write_1005+0x8c>
 80042fc:	8bfb      	ldrh	r3, [r7, #30]
 80042fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004302:	d320      	bcc.n	8004346 <OD_write_1005+0xce>
 8004304:	8bfb      	ldrh	r3, [r7, #30]
 8004306:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800430a:	d903      	bls.n	8004314 <OD_write_1005+0x9c>
 800430c:	8bfb      	ldrh	r3, [r7, #30]
 800430e:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004312:	d318      	bcc.n	8004346 <OD_write_1005+0xce>
 8004314:	8bfb      	ldrh	r3, [r7, #30]
 8004316:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 800431a:	d303      	bcc.n	8004324 <OD_write_1005+0xac>
 800431c:	8bfb      	ldrh	r3, [r7, #30]
 800431e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004322:	d310      	bcc.n	8004346 <OD_write_1005+0xce>
 8004324:	8bfb      	ldrh	r3, [r7, #30]
 8004326:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800432a:	d80c      	bhi.n	8004346 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <OD_write_1005+0xd2>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <OD_write_1005+0xd2>
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004340:	8bfa      	ldrh	r2, [r7, #30]
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 8004346:	230f      	movs	r3, #15
 8004348:	e052      	b.n	80043f0 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004350:	8bfa      	ldrh	r2, [r7, #30]
 8004352:	429a      	cmp	r2, r3
 8004354:	d039      	beq.n	80043ca <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	8e99      	ldrh	r1, [r3, #52]	@ 0x34
 800435e:	8bfa      	ldrh	r2, [r7, #30]
 8004360:	4b26      	ldr	r3, [pc, #152]	@ (80043fc <OD_write_1005+0x184>)
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	2300      	movs	r3, #0
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004370:	f002 f95a 	bl	8006628 <CO_CANrxBufferInit>
 8004374:	4603      	mov	r3, r0
 8004376:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8004378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004380:	2309      	movs	r3, #9
 8004382:	e035      	b.n	80043f0 <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <OD_write_1005+0x122>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <OD_write_1005+0x124>
 800439a:	2300      	movs	r3, #0
 800439c:	8bfa      	ldrh	r2, [r7, #30]
 800439e:	2400      	movs	r4, #0
 80043a0:	9401      	str	r4, [sp, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	f002 f99b 	bl	80066e0 <CO_CANtxBufferInit>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	62da      	str	r2, [r3, #44]	@ 0x2c

        if (SYNC->CANtxBuff == NULL) {
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	2200      	movs	r2, #0
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24
            return ODR_DEV_INCOMPAT;
 80043be:	2309      	movs	r3, #9
 80043c0:	e016      	b.n	80043f0 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	8bfa      	ldrh	r2, [r7, #30]
 80043c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (isProducer) {
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <OD_write_1005+0x16a>
        SYNC->counter = 0;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	2200      	movs	r2, #0
 80043da:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7fd f90a 	bl	8001602 <OD_writeOriginal>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	372c      	adds	r7, #44	@ 0x2c
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd90      	pop	{r4, r7, pc}
 80043f8:	bffff800 	.word	0xbffff800
 80043fc:	080041ef 	.word	0x080041ef

08004400 <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00c      	beq.n	800442e <OD_write_1019+0x2e>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	7d1b      	ldrb	r3, [r3, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <OD_write_1019+0x2e>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <OD_write_1019+0x2e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d102      	bne.n	800442e <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 800442e:	2309      	movs	r3, #9
 8004430:	e040      	b.n	80044b4 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f7ff fe71 	bl	8004120 <CO_getUint8>
 800443e:	4603      	mov	r3, r0
 8004440:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d002      	beq.n	800444e <OD_write_1019+0x4e>
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2bf0      	cmp	r3, #240	@ 0xf0
 800444c:	d901      	bls.n	8004452 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 800444e:	230f      	movs	r3, #15
 8004450:	e030      	b.n	80044b4 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 800445c:	2317      	movs	r3, #23
 800445e:	e029      	b.n	80044b4 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f8b3 104a 	ldrh.w	r1, [r3, #74]	@ 0x4a
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <OD_write_1019+0x7a>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <OD_write_1019+0x7c>
 800447a:	2300      	movs	r3, #0
 800447c:	2400      	movs	r4, #0
 800447e:	9401      	str	r4, [sp, #4]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	f002 f92c 	bl	80066e0 <CO_CANtxBufferInit>
 8004488:	4602      	mov	r2, r0
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	62da      	str	r2, [r3, #44]	@ 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24
        return ODR_DEV_INCOMPAT;
 800449c:	2309      	movs	r3, #9
 800449e:	e009      	b.n	80044b4 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	7cfa      	ldrb	r2, [r7, #19]
 80044a4:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7fd f8a8 	bl	8001602 <OD_writeOriginal>
 80044b2:	4603      	mov	r3, r0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd90      	pop	{r4, r7, pc}

080044bc <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08c      	sub	sp, #48	@ 0x30
 80044c0:	af04      	add	r7, sp, #16
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <CO_SYNC_init+0x32>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <CO_SYNC_init+0x32>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <CO_SYNC_init+0x32>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295
 80044f2:	e0fd      	b.n	80046f0 <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 80044f4:	225c      	movs	r2, #92	@ 0x5c
 80044f6:	2100      	movs	r1, #0
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f005 fa23 	bl	8009944 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 80044fe:	2380      	movs	r3, #128	@ 0x80
 8004500:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004502:	f107 0218 	add.w	r2, r7, #24
 8004506:	2301      	movs	r3, #1
 8004508:	2100      	movs	r1, #0
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff fe5a 	bl	80041c4 <OD_get_u32>
 8004510:	4603      	mov	r3, r0
 8004512:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8004514:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00c      	beq.n	8004536 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 800451c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fe16 	bl	8004154 <OD_getIndex>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800452e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004530:	f06f 030b 	mvn.w	r3, #11
 8004534:	e0dc      	b.n	80046f0 <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	@ 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4a6e      	ldr	r2, [pc, #440]	@ (80046f8 <CO_SYNC_init+0x23c>)
 8004540:	63da      	str	r2, [r3, #60]	@ 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a6d      	ldr	r2, [pc, #436]	@ (80046fc <CO_SYNC_init+0x240>)
 8004546:	641a      	str	r2, [r3, #64]	@ 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3338      	adds	r3, #56	@ 0x38
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fe10 	bl	8004174 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8004554:	2300      	movs	r3, #0
 8004556:	2204      	movs	r2, #4
 8004558:	2100      	movs	r1, #0
 800455a:	6838      	ldr	r0, [r7, #0]
 800455c:	f7fd fad0 	bl	8001b00 <OD_getPtr>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 800456e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8004574:	6838      	ldr	r0, [r7, #0]
 8004576:	f7ff fded 	bl	8004154 <OD_getIndex>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004580:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8004582:	f06f 030b 	mvn.w	r3, #11
 8004586:	e0b3      	b.n	80046f0 <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 8004588:	2300      	movs	r3, #0
 800458a:	2204      	movs	r2, #4
 800458c:	2100      	movs	r1, #0
 800458e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004590:	f7fd fab6 	bl	8001b00 <OD_getPtr>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <CO_SYNC_init+0x106>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 80045a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d006      	beq.n	80045bc <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80045ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045b0:	f7ff fdd0 	bl	8004154 <OD_getIndex>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ba:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80045bc:	f06f 030b 	mvn.w	r3, #11
 80045c0:	e096      	b.n	80046f0 <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d033      	beq.n	8004634 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80045cc:	f107 0217 	add.w	r2, r7, #23
 80045d0:	2301      	movs	r3, #1
 80045d2:	2100      	movs	r1, #0
 80045d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045d6:	f7ff fde0 	bl	800419a <OD_get_u8>
 80045da:	4603      	mov	r3, r0
 80045dc:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80045de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 80045e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 80045ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80045ee:	f7ff fdb1 	bl	8004154 <OD_getIndex>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045f8:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80045fa:	f06f 030b 	mvn.w	r3, #11
 80045fe:	e077      	b.n	80046f0 <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d102      	bne.n	800460c <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 8004606:	2302      	movs	r3, #2
 8004608:	75fb      	strb	r3, [r7, #23]
 800460a:	e004      	b.n	8004616 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2bf0      	cmp	r3, #240	@ 0xf0
 8004610:	d901      	bls.n	8004616 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 8004612:	23f0      	movs	r3, #240	@ 0xf0
 8004614:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	64da      	str	r2, [r3, #76]	@ 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a36      	ldr	r2, [pc, #216]	@ (80046f8 <CO_SYNC_init+0x23c>)
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a36      	ldr	r2, [pc, #216]	@ (8004700 <CO_SYNC_init+0x244>)
 8004626:	655a      	str	r2, [r3, #84]	@ 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	334c      	adds	r3, #76	@ 0x4c
 800462c:	4619      	mov	r1, r3
 800462e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004630:	f7ff fda0 	bl	8004174 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8004634:	7dfa      	ldrb	r2, [r7, #23]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24
    SYNC->CANdevTx = CANdevTx;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SYNC->CANdevRx = CANdevRx;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004670:	631a      	str	r2, [r3, #48]	@ 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004676:	869a      	strh	r2, [r3, #52]	@ 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800467c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004688:	b29a      	uxth	r2, r3
 800468a:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 800468c:	4b1d      	ldr	r3, [pc, #116]	@ (8004704 <CO_SYNC_init+0x248>)
 800468e:	9302      	str	r3, [sp, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800469c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800469e:	f001 ffc3 	bl	8006628 <CO_CANrxBufferInit>
 80046a2:	4603      	mov	r3, r0
 80046a4:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 80046a6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <CO_SYNC_init+0x1f8>
        return ret;
 80046ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80046b2:	e01d      	b.n	80046f0 <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046bc:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 80046be:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <CO_SYNC_init+0x20c>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <CO_SYNC_init+0x20e>
 80046c8:	2300      	movs	r3, #0
 80046ca:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80046cc:	2000      	movs	r0, #0
 80046ce:	9001      	str	r0, [sp, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80046d6:	f002 f803 	bl	80066e0 <CO_CANtxBufferInit>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (SYNC->CANtxBuff == NULL) {
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	e000      	b.n	80046f0 <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	08001553 	.word	0x08001553
 80046fc:	08004279 	.word	0x08004279
 8004700:	08004401 	.word	0x08004401
 8004704:	080041ef 	.word	0x080041ef

08004708 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	81fb      	strh	r3, [r7, #14]
    return value;
 8004718:	89fb      	ldrh	r3, [r7, #14]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    (void)memmove((void*)&value, buf, sizeof(value));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
    return value;
 8004732:	68fb      	ldr	r3, [r7, #12]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <OD_getIndex+0x14>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	e000      	b.n	8004754 <OD_getIndex+0x16>
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 800476e:	2305      	movs	r3, #5
 8004770:	e003      	b.n	800477a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	460b      	mov	r3, r1
 8004792:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004794:	7af9      	ldrb	r1, [r7, #11]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2304      	movs	r3, #4
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7fd f934 	bl	8001a0c <OD_get_value>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	791b      	ldrb	r3, [r3, #4]
 80047c0:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	3305      	adds	r3, #5
 80047c6:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d108      	bne.n	80047e0 <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2206      	movs	r2, #6
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f005 f940 	bl	8009a5a <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2201      	movs	r2, #1
 80047de:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80047e0:	bf00      	nop
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00c      	beq.n	8004816 <OD_write_1012+0x2e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	7d1b      	ldrb	r3, [r3, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <OD_write_1012+0x2e>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <OD_write_1012+0x2e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d102      	bne.n	8004816 <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 8004816:	2309      	movs	r3, #9
 8004818:	e051      	b.n	80048be <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8004820:	68b8      	ldr	r0, [r7, #8]
 8004822:	f7ff ff7f 	bl	8004724 <CO_getUint32>
 8004826:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004830:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <OD_write_1012+0xe0>)
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d126      	bne.n	800488a <OD_write_1012+0xa2>
 800483c:	8afb      	ldrh	r3, [r7, #22]
 800483e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004840:	d923      	bls.n	800488a <OD_write_1012+0xa2>
 8004842:	8afb      	ldrh	r3, [r7, #22]
 8004844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004848:	d903      	bls.n	8004852 <OD_write_1012+0x6a>
 800484a:	8afb      	ldrh	r3, [r7, #22]
 800484c:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004850:	d91b      	bls.n	800488a <OD_write_1012+0xa2>
 8004852:	8afb      	ldrh	r3, [r7, #22]
 8004854:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8004858:	d903      	bls.n	8004862 <OD_write_1012+0x7a>
 800485a:	8afb      	ldrh	r3, [r7, #22]
 800485c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004860:	d313      	bcc.n	800488a <OD_write_1012+0xa2>
 8004862:	8afb      	ldrh	r3, [r7, #22]
 8004864:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004868:	d903      	bls.n	8004872 <OD_write_1012+0x8a>
 800486a:	8afb      	ldrh	r3, [r7, #22]
 800486c:	f5b3 6fd0 	cmp.w	r3, #1664	@ 0x680
 8004870:	d30b      	bcc.n	800488a <OD_write_1012+0xa2>
 8004872:	8afb      	ldrh	r3, [r7, #22]
 8004874:	f5b3 6fdc 	cmp.w	r3, #1760	@ 0x6e0
 8004878:	d303      	bcc.n	8004882 <OD_write_1012+0x9a>
 800487a:	8afb      	ldrh	r3, [r7, #22]
 800487c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004880:	d303      	bcc.n	800488a <OD_write_1012+0xa2>
 8004882:	8afb      	ldrh	r3, [r7, #22]
 8004884:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004888:	d901      	bls.n	800488e <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800488a:	230f      	movs	r3, #15
 800488c:	e017      	b.n	80048be <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	0fdb      	lsrs	r3, r3, #31
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7fc fea3 	bl	8001602 <OD_writeOriginal>
 80048bc:	4603      	mov	r3, r0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	3ffff800 	.word	0x3ffff800

080048cc <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08c      	sub	sp, #48	@ 0x30
 80048d0:	af04      	add	r7, sp, #16
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <CO_TIME_init+0x20>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <CO_TIME_init+0x20>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80048ec:	f04f 33ff 	mov.w	r3, #4294967295
 80048f0:	e061      	b.n	80049b6 <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 80048f2:	222c      	movs	r2, #44	@ 0x2c
 80048f4:	2100      	movs	r1, #0
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f005 f824 	bl	8009944 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80048fc:	f107 0214 	add.w	r2, r7, #20
 8004900:	2301      	movs	r3, #1
 8004902:	2100      	movs	r1, #0
 8004904:	68b8      	ldr	r0, [r7, #8]
 8004906:	f7ff ff3d 	bl	8004784 <OD_get_u32>
 800490a:	4603      	mov	r3, r0
 800490c:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 800490e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 8004916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d006      	beq.n	800492a <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 800491c:	68b8      	ldr	r0, [r7, #8]
 800491e:	f7ff ff0e 	bl	800473e <OD_getIndex>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800492a:	f06f 030b 	mvn.w	r3, #11
 800492e:	e042      	b.n	80049b6 <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a21      	ldr	r2, [pc, #132]	@ (80049c0 <CO_TIME_init+0xf4>)
 800493a:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <CO_TIME_init+0xf8>)
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	331c      	adds	r3, #28
 8004946:	4619      	mov	r1, r3
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f7ff ff08 	bl	800475e <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004956:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	0fdb      	lsrs	r3, r3, #31
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d015      	beq.n	80049b4 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 8004988:	8bba      	ldrh	r2, [r7, #28]
 800498a:	8879      	ldrh	r1, [r7, #2]
 800498c:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <CO_TIME_init+0xfc>)
 800498e:	9302      	str	r3, [sp, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fe43 	bl	8006628 <CO_CANrxBufferInit>
 80049a2:	4603      	mov	r3, r0
 80049a4:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 80049a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <CO_TIME_init+0xe8>
            return ret;
 80049ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80049b2:	e000      	b.n	80049b6 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	08001553 	.word	0x08001553
 80049c4:	080047e9 	.word	0x080047e9
 80049c8:	080047af 	.word	0x080047af

080049cc <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	@ 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d024      	beq.n	8004a2c <CO_TIME_process+0x60>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01f      	beq.n	8004a32 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fe95 	bl	8004724 <CO_getUint32>
 80049fa:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fe81 	bl	8004708 <CO_getUint16>
 8004a06:	4603      	mov	r3, r0
 8004a08:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8bfa      	ldrh	r2, [r7, #30]
 8004a18:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8004a20:	2301      	movs	r3, #1
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8004a2a:	e002      	b.n	8004a32 <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d132      	bne.n	8004aa2 <CO_TIME_process+0xd6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d02f      	beq.n	8004aa2 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	89db      	ldrh	r3, [r3, #14]
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4a16      	ldr	r2, [pc, #88]	@ (8004aac <CO_TIME_process+0xe0>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	099b      	lsrs	r3, r3, #6
 8004a58:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <CO_TIME_process+0xe0>)
 8004a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab0 <CO_TIME_process+0xe4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d90b      	bls.n	8004aa2 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <CO_TIME_process+0xe8>)
 8004a90:	4413      	add	r3, r2
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	899b      	ldrh	r3, [r3, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3728      	adds	r7, #40	@ 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	10624dd3 	.word	0x10624dd3
 8004ab0:	05265bff 	.word	0x05265bff
 8004ab4:	fad9a400 	.word	0xfad9a400

08004ab8 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	e006      	b.n	8004ade <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8004ad0:	220c      	movs	r2, #12
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f004 ff35 	bl	8009944 <memset>

    return ret;
 8004ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	@ 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8004b10:	e112      	b.n	8004d38 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	7a5b      	ldrb	r3, [r3, #9]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf0c      	ite	eq
 8004b1e:	2301      	moveq	r3, #1
 8004b20:	2300      	movne	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	613b      	str	r3, [r7, #16]

        tick = true;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f5a3 4343 	sub.w	r3, r3, #49920	@ 0xc300
 8004b32:	3b50      	subs	r3, #80	@ 0x50
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	791b      	ldrb	r3, [r3, #4]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	711a      	strb	r2, [r3, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	791b      	ldrb	r3, [r3, #4]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	f240 80dd 	bls.w	8004d08 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	711a      	strb	r2, [r3, #4]
            rd = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	7a5b      	ldrb	r3, [r3, #9]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 8004b68:	7ffb      	ldrb	r3, [r7, #31]
 8004b6a:	f043 0302 	orr.w	r3, r3, #2
 8004b6e:	77fb      	strb	r3, [r7, #31]
 8004b70:	e003      	b.n	8004b7a <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 8004b72:	7fbb      	ldrb	r3, [r7, #30]
 8004b74:	f043 0302 	orr.w	r3, r3, #2
 8004b78:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	795b      	ldrb	r3, [r3, #5]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	715a      	strb	r2, [r3, #5]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	795b      	ldrb	r3, [r3, #5]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d010      	beq.n	8004bb0 <CO_LEDs_process+0xc8>
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	dc12      	bgt.n	8004bb8 <CO_LEDs_process+0xd0>
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d002      	beq.n	8004b9c <CO_LEDs_process+0xb4>
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d005      	beq.n	8004ba6 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 8004b9a:	e00d      	b.n	8004bb8 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8004b9c:	7ffb      	ldrb	r3, [r7, #31]
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e009      	b.n	8004bba <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8004ba6:	7fbb      	ldrb	r3, [r7, #30]
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	77bb      	strb	r3, [r7, #30]
 8004bae:	e004      	b.n	8004bba <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	715a      	strb	r2, [r3, #5]
 8004bb6:	e000      	b.n	8004bba <CO_LEDs_process+0xd2>
                default: /* none */ break;
 8004bb8:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	799b      	ldrb	r3, [r3, #6]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	719a      	strb	r2, [r3, #6]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	799b      	ldrb	r3, [r3, #6]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	2b07      	cmp	r3, #7
 8004bce:	d821      	bhi.n	8004c14 <CO_LEDs_process+0x12c>
 8004bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <CO_LEDs_process+0xf0>)
 8004bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd6:	bf00      	nop
 8004bd8:	08004bf9 	.word	0x08004bf9
 8004bdc:	08004c03 	.word	0x08004c03
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004c03 	.word	0x08004c03
 8004be8:	08004c15 	.word	0x08004c15
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c0d 	.word	0x08004c0d
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
 8004bfa:	f043 0308 	orr.w	r3, r3, #8
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e009      	b.n	8004c16 <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 8004c02:	7fbb      	ldrb	r3, [r7, #30]
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	77bb      	strb	r3, [r7, #30]
 8004c0a:	e004      	b.n	8004c16 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	719a      	strb	r2, [r3, #6]
 8004c12:	e000      	b.n	8004c16 <CO_LEDs_process+0x12e>
                default: /* none */ break;
 8004c14:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	79db      	ldrb	r3, [r3, #7]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	71da      	strb	r2, [r3, #7]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	79db      	ldrb	r3, [r3, #7]
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	bf8c      	ite	hi
 8004c2a:	2201      	movhi	r2, #1
 8004c2c:	2200      	movls	r2, #0
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d12c      	bne.n	8004c8e <CO_LEDs_process+0x1a6>
 8004c34:	2201      	movs	r2, #1
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	f003 0254 	and.w	r2, r3, #84	@ 0x54
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	bf14      	ite	ne
 8004c42:	2201      	movne	r2, #1
 8004c44:	2200      	moveq	r2, #0
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d117      	bne.n	8004c7c <CO_LEDs_process+0x194>
 8004c4c:	f003 022a 	and.w	r2, r3, #42	@ 0x2a
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	bf14      	ite	ne
 8004c54:	2201      	movne	r2, #1
 8004c56:	2200      	moveq	r2, #0
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	d109      	bne.n	8004c72 <CO_LEDs_process+0x18a>
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 8004c70:	e00d      	b.n	8004c8e <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	f043 0310 	orr.w	r3, r3, #16
 8004c78:	77fb      	strb	r3, [r7, #31]
 8004c7a:	e009      	b.n	8004c90 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 8004c7c:	7fbb      	ldrb	r3, [r7, #30]
 8004c7e:	f043 0310 	orr.w	r3, r3, #16
 8004c82:	77bb      	strb	r3, [r7, #30]
 8004c84:	e004      	b.n	8004c90 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	71da      	strb	r2, [r3, #7]
 8004c8c:	e000      	b.n	8004c90 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 8004c8e:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	7a1b      	ldrb	r3, [r3, #8]
 8004c94:	3301      	adds	r3, #1
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	721a      	strb	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	7a1b      	ldrb	r3, [r3, #8]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	bf8c      	ite	hi
 8004ca4:	2201      	movhi	r2, #1
 8004ca6:	2200      	movls	r2, #0
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	d137      	bne.n	8004d1e <CO_LEDs_process+0x236>
 8004cae:	2201      	movs	r2, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	f403 72aa 	and.w	r2, r3, #340	@ 0x154
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	bf14      	ite	ne
 8004cbc:	2201      	movne	r2, #1
 8004cbe:	2200      	moveq	r2, #0
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	d117      	bne.n	8004cf6 <CO_LEDs_process+0x20e>
 8004cc6:	f003 02aa 	and.w	r2, r3, #170	@ 0xaa
 8004cca:	2a00      	cmp	r2, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2201      	movne	r2, #1
 8004cd0:	2200      	moveq	r2, #0
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	d109      	bne.n	8004cec <CO_LEDs_process+0x204>
 8004cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 8004cea:	e018      	b.n	8004d1e <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 8004cec:	7ffb      	ldrb	r3, [r7, #31]
 8004cee:	f043 0320 	orr.w	r3, r3, #32
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e014      	b.n	8004d20 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 8004cf6:	7fbb      	ldrb	r3, [r7, #30]
 8004cf8:	f043 0320 	orr.w	r3, r3, #32
 8004cfc:	77bb      	strb	r3, [r7, #30]
 8004cfe:	e00f      	b.n	8004d20 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	721a      	strb	r2, [r3, #8]
 8004d06:	e00b      	b.n	8004d20 <CO_LEDs_process+0x238>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	7a5b      	ldrb	r3, [r3, #9]
 8004d0c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004d10:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	7a9b      	ldrb	r3, [r3, #10]
 8004d16:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004d1a:	77bb      	strb	r3, [r7, #30]
 8004d1c:	e000      	b.n	8004d20 <CO_LEDs_process+0x238>
                default: /* none */ break;
 8004d1e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <CO_LEDs_process+0x248>
            rd |= CO_LED_flicker;
 8004d26:	7ffb      	ldrb	r3, [r7, #31]
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e003      	b.n	8004d38 <CO_LEDs_process+0x250>
        } else {
            gr |= CO_LED_flicker;
 8004d30:	7fbb      	ldrb	r3, [r7, #30]
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8004d40:	4293      	cmp	r3, r2
 8004d42:	f63f aee6 	bhi.w	8004b12 <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d077      	beq.n	8004e3c <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <CO_LEDs_process+0x270>
            rd_co = 1;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75fb      	strb	r3, [r7, #23]
 8004d56:	e032      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 8004d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
 8004d68:	e029      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 8004d70:	7ffb      	ldrb	r3, [r7, #31]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	75fb      	strb	r3, [r7, #23]
 8004d78:	e021      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	75fb      	strb	r3, [r7, #23]
 8004d88:	e019      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	75fb      	strb	r3, [r7, #23]
 8004d98:	e011      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	75fb      	strb	r3, [r7, #23]
 8004da8:	e009      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d004      	beq.n	8004dba <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 8004db0:	7ffb      	ldrb	r3, [r7, #31]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	75fb      	strb	r3, [r7, #23]
 8004db8:	e001      	b.n	8004dbe <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 8004dc4:	7fbb      	ldrb	r3, [r7, #30]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	75bb      	strb	r3, [r7, #22]
 8004dcc:	e022      	b.n	8004e14 <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 8004dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 8004dd4:	7fbb      	ldrb	r3, [r7, #30]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	75bb      	strb	r3, [r7, #22]
 8004ddc:	e01a      	b.n	8004e14 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d104      	bne.n	8004df0 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 8004de6:	7fbb      	ldrb	r3, [r7, #30]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	75bb      	strb	r3, [r7, #22]
 8004dee:	e011      	b.n	8004e14 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 8004df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df6:	d104      	bne.n	8004e02 <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 8004df8:	7fbb      	ldrb	r3, [r7, #30]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	75bb      	strb	r3, [r7, #22]
 8004e00:	e008      	b.n	8004e14 <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d102      	bne.n	8004e10 <CO_LEDs_process+0x328>
            gr_co = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75bb      	strb	r3, [r7, #22]
 8004e0e:	e001      	b.n	8004e14 <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 8004e1a:	7ffb      	ldrb	r3, [r7, #31]
 8004e1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e20:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 8004e22:	7dbb      	ldrb	r3, [r7, #22]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 8004e28:	7fbb      	ldrb	r3, [r7, #30]
 8004e2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e2e:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	7ffa      	ldrb	r2, [r7, #31]
 8004e34:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	7fba      	ldrb	r2, [r7, #30]
 8004e3a:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8004e3c:	bf00      	nop
 8004e3e:	3724      	adds	r7, #36	@ 0x24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b090      	sub	sp, #64	@ 0x40
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	791b      	ldrb	r3, [r3, #4]
 8004e5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8004e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	f040 814f 	bne.w	8005106 <CO_LSSslave_receive+0x2be>
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 814a 	bne.w	8005106 <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 8004e72:	2300      	movs	r3, #0
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	3305      	adds	r3, #5
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t cs = data[0];
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8004e84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d12d      	bne.n	8004ee8 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	3301      	adds	r3, #1
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8004e94:	7ffb      	ldrb	r3, [r7, #31]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <CO_LSSslave_receive+0x58>
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d020      	beq.n	8004ee0 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8004e9e:	e12c      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	7c1b      	ldrb	r3, [r3, #16]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d110      	bne.n	8004eca <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eae:	2bff      	cmp	r3, #255	@ 0xff
 8004eb0:	d10b      	bne.n	8004eca <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2bff      	cmp	r3, #255	@ 0xff
 8004eba:	d006      	beq.n	8004eca <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004ec2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	2200      	movs	r2, #0
 8004ece:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed2:	3314      	adds	r3, #20
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 fd33 	bl	8009944 <memset>
                    break;
 8004ede:	e10c      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	741a      	strb	r2, [r3, #16]
 8004ee6:	e108      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	7c1b      	ldrb	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f040 80f0 	bne.w	80050d2 <CO_LSSslave_receive+0x28a>
            switch (cs) {
 8004ef2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ef6:	3b40      	subs	r3, #64	@ 0x40
 8004ef8:	2b11      	cmp	r3, #17
 8004efa:	f200 80f9 	bhi.w	80050f0 <CO_LSSslave_receive+0x2a8>
 8004efe:	a201      	add	r2, pc, #4	@ (adr r2, 8004f04 <CO_LSSslave_receive+0xbc>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f4d 	.word	0x08004f4d
 8004f08:	08004f5d 	.word	0x08004f5d
 8004f0c:	08004f6d 	.word	0x08004f6d
 8004f10:	08004f7d 	.word	0x08004f7d
 8004f14:	080050f1 	.word	0x080050f1
 8004f18:	080050f1 	.word	0x080050f1
 8004f1c:	080050f1 	.word	0x080050f1
 8004f20:	080050f1 	.word	0x080050f1
 8004f24:	080050f1 	.word	0x080050f1
 8004f28:	080050f1 	.word	0x080050f1
 8004f2c:	080050f1 	.word	0x080050f1
 8004f30:	080050f1 	.word	0x080050f1
 8004f34:	080050f1 	.word	0x080050f1
 8004f38:	080050f1 	.word	0x080050f1
 8004f3c:	080050f1 	.word	0x080050f1
 8004f40:	080050f1 	.word	0x080050f1
 8004f44:	080050f1 	.word	0x080050f1
 8004f48:	08004fd9 	.word	0x08004fd9
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4e:	3301      	adds	r3, #1
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	615a      	str	r2, [r3, #20]
                    break;
 8004f5a:	e0ce      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5e:	3301      	adds	r3, #1
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	619a      	str	r2, [r3, #24]
                    break;
 8004f6a:	e0c6      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6e:	3301      	adds	r3, #1
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f78:	61da      	str	r2, [r3, #28]
                    break;
 8004f7a:	e0be      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	3301      	adds	r3, #1
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f88:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 8004f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	f040 80ae 	bne.w	80050f4 <CO_LSSslave_receive+0x2ac>
 8004f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	f040 80a7 	bne.w	80050f4 <CO_LSSslave_receive+0x2ac>
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f040 80a0 	bne.w	80050f4 <CO_LSSslave_receive+0x2ac>
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	f040 8099 	bne.w	80050f4 <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fca:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004fce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                        request_LSSslave_process = true;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    }
                    break;
 8004fd6:	e08d      	b.n	80050f4 <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2bff      	cmp	r3, #255	@ 0xff
 8004fe0:	f040 808a 	bne.w	80050f8 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fea:	2bff      	cmp	r3, #255	@ 0xff
 8004fec:	f040 8084 	bne.w	80050f8 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 8004ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff2:	3305      	adds	r3, #5
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                        uint8_t lssSub = data[6];
 8004ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffc:	3306      	adds	r3, #6
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                        uint8_t lssNext = data[7];
 8005004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005006:	3307      	adds	r3, #7
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 800500e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005012:	2b1f      	cmp	r3, #31
 8005014:	d903      	bls.n	800501e <CO_LSSslave_receive+0x1d6>
 8005016:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800501a:	2b80      	cmp	r3, #128	@ 0x80
 800501c:	d16d      	bne.n	80050fa <CO_LSSslave_receive+0x2b2>
 800501e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005022:	2b03      	cmp	r3, #3
 8005024:	d869      	bhi.n	80050fa <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 8005026:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800502a:	2b03      	cmp	r3, #3
 800502c:	d865      	bhi.n	80050fa <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 800502e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005030:	3301      	adds	r3, #1
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
                        ack = false;
 800503a:	2300      	movs	r3, #0
 800503c:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800503e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005042:	2b80      	cmp	r3, #128	@ 0x80
 8005044:	d10d      	bne.n	8005062 <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 8005046:	2301      	movs	r3, #1
 8005048:	63bb      	str	r3, [r7, #56]	@ 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	3324      	adds	r3, #36	@ 0x24
 8005056:	2210      	movs	r2, #16
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f004 fc72 	bl	8009944 <memset>
 8005060:	e02c      	b.n	80050bc <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8005062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005064:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005068:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800506c:	429a      	cmp	r2, r3
 800506e:	d125      	bne.n	80050bc <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8005070:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005074:	f04f 32ff 	mov.w	r2, #4294967295
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 800507e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	405a      	eors	r2, r3
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d113      	bne.n	80050bc <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8005094:	2301      	movs	r3, #1
 8005096:	63bb      	str	r3, [r7, #56]	@ 0x38
                                LSSslave->fastscanPos = lssNext;
 8005098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800509e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 80050a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d108      	bne.n	80050bc <CO_LSSslave_receive+0x274>
 80050aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80050ae:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d202      	bcs.n	80050bc <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	2201      	movs	r2, #1
 80050ba:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01a      	beq.n	80050f8 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80050c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                            request_LSSslave_process = true;
 80050cc:	2301      	movs	r3, #1
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
                        }
                    }
                    break;
 80050d0:	e012      	b.n	80050f8 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 80050d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d4:	3349      	adds	r3, #73	@ 0x49
 80050d6:	2208      	movs	r2, #8
 80050d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050da:	4618      	mov	r0, r3
 80050dc:	f004 fcbd 	bl	8009a5a <memcpy>
            LSSslave->service = cs;
 80050e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80050e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            request_LSSslave_process = true;
 80050ea:	2301      	movs	r3, #1
 80050ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ee:	e004      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                    break;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                    break;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <CO_LSSslave_receive+0x2b2>
                    break;
 80050f8:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80050fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	2201      	movs	r2, #1
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005106:	bf00      	nop
 8005108:	3740      	adds	r7, #64	@ 0x40
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop

08005110 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	@ 0x28
 8005114:	af04      	add	r7, sp, #16
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d018      	beq.n	800515a <CO_LSSslave_init+0x4a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d015      	beq.n	800515a <CO_LSSslave_init+0x4a>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <CO_LSSslave_init+0x4a>
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00f      	beq.n	800515a <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 800513a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <CO_LSSslave_init+0x4a>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d004      	beq.n	8005152 <CO_LSSslave_init+0x42>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	b25b      	sxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	da06      	bge.n	8005160 <CO_LSSslave_init+0x50>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2bff      	cmp	r3, #255	@ 0xff
 8005158:	d002      	beq.n	8005160 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295
 800515e:	e046      	b.n	80051ee <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005160:	2274      	movs	r2, #116	@ 0x74
 8005162:	2100      	movs	r1, #0
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f004 fbed 	bl	8009944 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2210      	movs	r2, #16
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f004 fc72 	bl	8009a5a <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	@ 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	63da      	str	r2, [r3, #60]	@ 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 80051a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80051a2:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80051a4:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <CO_LSSslave_init+0xe8>)
 80051a6:	9302      	str	r3, [sp, #8]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	2300      	movs	r3, #0
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80051b4:	6a38      	ldr	r0, [r7, #32]
 80051b6:	f001 fa37 	bl	8006628 <CO_CANrxBufferInit>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 80051c4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051c6:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80051c8:	2300      	movs	r3, #0
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	2308      	movs	r3, #8
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2300      	movs	r3, #0
 80051d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051d4:	f001 fa84 	bl	80066e0 <CO_CANtxBufferInit>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	671a      	str	r2, [r3, #112]	@ 0x70

    if (LSSslave->TXbuff == NULL) {
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80051e6:	23ff      	movs	r3, #255	@ 0xff
 80051e8:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 80051ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	08004e49 	.word	0x08004e49

080051fc <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	@ 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8202 	beq.w	8005616 <CO_LSSslave_process+0x41a>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521a:	3305      	adds	r3, #5
 800521c:	2208      	movs	r2, #8
 800521e:	2100      	movs	r1, #0
 8005220:	4618      	mov	r0, r3
 8005222:	f004 fb8f 	bl	8009944 <memset>

        switch (LSSslave->service) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800522c:	3b04      	subs	r3, #4
 800522e:	2b5a      	cmp	r3, #90	@ 0x5a
 8005230:	f200 81dc 	bhi.w	80055ec <CO_LSSslave_process+0x3f0>
 8005234:	a201      	add	r2, pc, #4	@ (adr r2, 800523c <CO_LSSslave_process+0x40>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	080053a9 	.word	0x080053a9
 8005240:	080055ed 	.word	0x080055ed
 8005244:	080055ed 	.word	0x080055ed
 8005248:	080055ed 	.word	0x080055ed
 800524c:	080055ed 	.word	0x080055ed
 8005250:	080055ed 	.word	0x080055ed
 8005254:	080055ed 	.word	0x080055ed
 8005258:	080055ed 	.word	0x080055ed
 800525c:	080055ed 	.word	0x080055ed
 8005260:	080055ed 	.word	0x080055ed
 8005264:	080055ed 	.word	0x080055ed
 8005268:	080055ed 	.word	0x080055ed
 800526c:	080055ed 	.word	0x080055ed
 8005270:	080053bd 	.word	0x080053bd
 8005274:	080055ed 	.word	0x080055ed
 8005278:	0800540b 	.word	0x0800540b
 800527c:	080055ed 	.word	0x080055ed
 8005280:	080054a7 	.word	0x080054a7
 8005284:	080055ed 	.word	0x080055ed
 8005288:	080054e3 	.word	0x080054e3
 800528c:	080055ed 	.word	0x080055ed
 8005290:	080055ed 	.word	0x080055ed
 8005294:	080055ed 	.word	0x080055ed
 8005298:	080055ed 	.word	0x080055ed
 800529c:	080055ed 	.word	0x080055ed
 80052a0:	080055ed 	.word	0x080055ed
 80052a4:	080055ed 	.word	0x080055ed
 80052a8:	080055ed 	.word	0x080055ed
 80052ac:	080055ed 	.word	0x080055ed
 80052b0:	080055ed 	.word	0x080055ed
 80052b4:	080055ed 	.word	0x080055ed
 80052b8:	080055ed 	.word	0x080055ed
 80052bc:	080055ed 	.word	0x080055ed
 80052c0:	080055ed 	.word	0x080055ed
 80052c4:	080055ed 	.word	0x080055ed
 80052c8:	080055ed 	.word	0x080055ed
 80052cc:	080055ed 	.word	0x080055ed
 80052d0:	080055ed 	.word	0x080055ed
 80052d4:	080055ed 	.word	0x080055ed
 80052d8:	080055ed 	.word	0x080055ed
 80052dc:	080055ed 	.word	0x080055ed
 80052e0:	080055ed 	.word	0x080055ed
 80052e4:	080055ed 	.word	0x080055ed
 80052e8:	080055ed 	.word	0x080055ed
 80052ec:	080055ed 	.word	0x080055ed
 80052f0:	080055ed 	.word	0x080055ed
 80052f4:	080055ed 	.word	0x080055ed
 80052f8:	080055ed 	.word	0x080055ed
 80052fc:	080055ed 	.word	0x080055ed
 8005300:	080055ed 	.word	0x080055ed
 8005304:	080055ed 	.word	0x080055ed
 8005308:	080055ed 	.word	0x080055ed
 800530c:	080055ed 	.word	0x080055ed
 8005310:	080055ed 	.word	0x080055ed
 8005314:	080055ed 	.word	0x080055ed
 8005318:	080055ed 	.word	0x080055ed
 800531c:	080055ed 	.word	0x080055ed
 8005320:	080055ed 	.word	0x080055ed
 8005324:	080055ed 	.word	0x080055ed
 8005328:	080055ed 	.word	0x080055ed
 800532c:	080055ed 	.word	0x080055ed
 8005330:	080055ed 	.word	0x080055ed
 8005334:	080055ed 	.word	0x080055ed
 8005338:	080053af 	.word	0x080053af
 800533c:	080055ed 	.word	0x080055ed
 8005340:	080055ed 	.word	0x080055ed
 8005344:	080055ed 	.word	0x080055ed
 8005348:	080055ed 	.word	0x080055ed
 800534c:	080055ed 	.word	0x080055ed
 8005350:	080055ed 	.word	0x080055ed
 8005354:	080055ed 	.word	0x080055ed
 8005358:	080055ed 	.word	0x080055ed
 800535c:	080055ed 	.word	0x080055ed
 8005360:	080055ed 	.word	0x080055ed
 8005364:	080055ed 	.word	0x080055ed
 8005368:	080055ed 	.word	0x080055ed
 800536c:	080055ed 	.word	0x080055ed
 8005370:	080055df 	.word	0x080055df
 8005374:	080055ed 	.word	0x080055ed
 8005378:	080055ed 	.word	0x080055ed
 800537c:	080055ed 	.word	0x080055ed
 8005380:	080055ed 	.word	0x080055ed
 8005384:	080055ed 	.word	0x080055ed
 8005388:	080055ed 	.word	0x080055ed
 800538c:	080055ed 	.word	0x080055ed
 8005390:	080055ed 	.word	0x080055ed
 8005394:	08005539 	.word	0x08005539
 8005398:	0800555b 	.word	0x0800555b
 800539c:	0800557d 	.word	0x0800557d
 80053a0:	0800559f 	.word	0x0800559f
 80053a4:	080055c1 	.word	0x080055c1
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 80053a8:	2301      	movs	r3, #1
 80053aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 80053ac:	e125      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	2244      	movs	r2, #68	@ 0x44
 80053b4:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 80053b6:	2301      	movs	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80053ba:	e11e      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80053c2:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <CO_LSSslave_process+0x1dc>
 80053d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	da02      	bge.n	80053de <CO_LSSslave_process+0x1e2>
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	2bff      	cmp	r3, #255	@ 0xff
 80053dc:	d104      	bne.n	80053e8 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	7cfa      	ldrb	r2, [r7, #19]
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	e002      	b.n	80053ee <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80053f8:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fe:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005402:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005404:	2301      	movs	r3, #1
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005408:	e0f7      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80ee 	beq.w	80055f0 <CO_LSSslave_process+0x3f4>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800541a:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005422:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005430:	7f7b      	ldrb	r3, [r7, #29]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d121      	bne.n	800547a <CO_LSSslave_process+0x27e>
 8005436:	7f3b      	ldrb	r3, [r7, #28]
 8005438:	2b05      	cmp	r3, #5
 800543a:	d01e      	beq.n	800547a <CO_LSSslave_process+0x27e>
 800543c:	7f3b      	ldrb	r3, [r7, #28]
 800543e:	2b09      	cmp	r3, #9
 8005440:	d81b      	bhi.n	800547a <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8005442:	7f3b      	ldrb	r3, [r7, #28]
 8005444:	4a76      	ldr	r2, [pc, #472]	@ (8005620 <CO_LSSslave_process+0x424>)
 8005446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800544a:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005454:	8b79      	ldrh	r1, [r7, #26]
 8005456:	4610      	mov	r0, r2
 8005458:	4798      	blx	r3
 800545a:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	8b7a      	ldrh	r2, [r7, #26]
 8005468:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800546a:	e009      	b.n	8005480 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 800546c:	23ff      	movs	r3, #255	@ 0xff
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8005478:	e002      	b.n	8005480 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 800548a:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005490:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005494:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549a:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800549e:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 80054a0:	2301      	movs	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80054a4:	e0a9      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80a2 	beq.w	80055f4 <CO_LSSslave_process+0x3f8>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 809f 	beq.w	80055f8 <CO_LSSslave_process+0x3fc>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80054ca:	461a      	mov	r2, r3
 80054cc:	8bfb      	ldrh	r3, [r7, #30]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80054da:	8bf9      	ldrh	r1, [r7, #30]
 80054dc:	4610      	mov	r0, r2
 80054de:	4798      	blx	r3
                }
                break;
 80054e0:	e08a      	b.n	80055f8 <CO_LSSslave_process+0x3fc>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <CO_LSSslave_process+0x2fc>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f6:	e011      	b.n	800551c <CO_LSSslave_process+0x320>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005504:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6b92      	ldr	r2, [r2, #56]	@ 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 800550a:	8812      	ldrh	r2, [r2, #0]
 800550c:	4798      	blx	r3
 800550e:	6238      	str	r0, [r7, #32]
                    if (!result) {
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d102      	bne.n	800551c <CO_LSSslave_process+0x320>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8005516:	2302      	movs	r3, #2
 8005518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005526:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005530:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 8005532:	2301      	movs	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005536:	e060      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005542:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554e:	3306      	adds	r3, #6
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005554:	2301      	movs	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8005558:	e04f      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005564:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005570:	3306      	adds	r3, #6
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005576:	2301      	movs	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800557a:	e03e      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8005586:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	3306      	adds	r3, #6
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8005598:	2301      	movs	r3, #1
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800559c:	e02d      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80055a8:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b4:	3306      	adds	r3, #6
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80055be:	e01c      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 80055ca:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80055d6:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 80055d8:	2301      	movs	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80055dc:	e00d      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e2:	224f      	movs	r2, #79	@ 0x4f
 80055e4:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 80055e6:	2301      	movs	r3, #1
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 80055ea:	e006      	b.n	80055fa <CO_LSSslave_process+0x3fe>
            }
            default: {
                /* none */
                break;
 80055ec:	bf00      	nop
 80055ee:	e004      	b.n	80055fa <CO_LSSslave_process+0x3fe>
                    break;
 80055f0:	bf00      	nop
 80055f2:	e002      	b.n	80055fa <CO_LSSslave_process+0x3fe>
                    break;
 80055f4:	bf00      	nop
 80055f6:	e000      	b.n	80055fa <CO_LSSslave_process+0x3fe>
                break;
 80055f8:	bf00      	nop
            }
        }

        if (CANsend) {
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <CO_LSSslave_process+0x414>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f001 f8e2 	bl	80067d4 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    return resetCommunication;
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005618:	4618      	mov	r0, r3
 800561a:	3730      	adds	r7, #48	@ 0x30
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0800a414 	.word	0x0800a414

08005624 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	08db      	lsrs	r3, r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2201      	movs	r2, #1
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	73bb      	strb	r3, [r7, #14]
               : false;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b09      	cmp	r3, #9
 800564e:	d807      	bhi.n	8005660 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	5cd2      	ldrb	r2, [r2, r3]
 8005656:	7bbb      	ldrb	r3, [r7, #14]
 8005658:	4013      	ands	r3, r2
 800565a:	b2db      	uxtb	r3, r3
               : false;
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <CO_isError+0x40>
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <CO_isError+0x42>
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <CO_getErrorRegister+0x1e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <CO_getErrorRegister+0x1e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	e000      	b.n	8005690 <CO_getErrorRegister+0x20>
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <CO_NMT_getInternalState+0x16>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f993 3000 	ldrsb.w	r3, [r3]
 80056ae:	e000      	b.n	80056b2 <CO_NMT_getInternalState+0x18>
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <CO_LSSslave_getState+0x14>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	7c1b      	ldrb	r3, [r3, #16]
 80056ce:	e000      	b.n	80056d2 <CO_LSSslave_getState+0x16>
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 80056f2:	2140      	movs	r1, #64	@ 0x40
 80056f4:	2001      	movs	r0, #1
 80056f6:	f003 fd73 	bl	80091e0 <calloc>
 80056fa:	4603      	mov	r3, r0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8101 	beq.w	8005908 <CO_new+0x22c>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3340      	adds	r3, #64	@ 0x40
 800570a:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 800570c:	212c      	movs	r1, #44	@ 0x2c
 800570e:	2001      	movs	r0, #1
 8005710:	f003 fd66 	bl	80091e0 <calloc>
 8005714:	4603      	mov	r3, r0
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	611a      	str	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80f1 	beq.w	8005908 <CO_new+0x22c>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	332c      	adds	r3, #44	@ 0x2c
 800572a:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 800572c:	2308      	movs	r3, #8
 800572e:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8005730:	2130      	movs	r1, #48	@ 0x30
 8005732:	2001      	movs	r0, #1
 8005734:	f003 fd54 	bl	80091e0 <calloc>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 80df 	beq.w	8005908 <CO_new+0x22c>
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3330      	adds	r3, #48	@ 0x30
 800574e:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8005750:	7afb      	ldrb	r3, [r7, #11]
 8005752:	2110      	movs	r1, #16
 8005754:	4618      	mov	r0, r3
 8005756:	f003 fd43 	bl	80091e0 <calloc>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	619a      	str	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80ce 	beq.w	8005908 <CO_new+0x22c>
 800576c:	7afb      	ldrb	r3, [r7, #11]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4413      	add	r3, r2
 8005774:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8005776:	2150      	movs	r1, #80	@ 0x50
 8005778:	2001      	movs	r0, #1
 800577a:	f003 fd31 	bl	80091e0 <calloc>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	61da      	str	r2, [r3, #28]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80bc 	beq.w	8005908 <CO_new+0x22c>
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	3350      	adds	r3, #80	@ 0x50
 8005794:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 8005796:	2311      	movs	r3, #17
 8005798:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 800579a:	7abb      	ldrb	r3, [r7, #10]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d912      	bls.n	80057c6 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 80057a0:	7abb      	ldrb	r3, [r7, #10]
 80057a2:	2108      	movs	r1, #8
 80057a4:	4618      	mov	r0, r3
 80057a6:	f003 fd1b 	bl	80091e0 <calloc>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80a6 	beq.w	8005908 <CO_new+0x22c>
 80057bc:	7abb      	ldrb	r3, [r7, #10]
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80057c6:	21ac      	movs	r1, #172	@ 0xac
 80057c8:	2001      	movs	r0, #1
 80057ca:	f003 fd09 	bl	80091e0 <calloc>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8094 	beq.w	8005908 <CO_new+0x22c>
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	33ac      	adds	r3, #172	@ 0xac
 80057e4:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80057e6:	212c      	movs	r1, #44	@ 0x2c
 80057e8:	2001      	movs	r0, #1
 80057ea:	f003 fcf9 	bl	80091e0 <calloc>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8084 	beq.w	8005908 <CO_new+0x22c>
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	332c      	adds	r3, #44	@ 0x2c
 8005804:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8005806:	215c      	movs	r1, #92	@ 0x5c
 8005808:	2001      	movs	r0, #1
 800580a:	f003 fce9 	bl	80091e0 <calloc>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d074      	beq.n	8005908 <CO_new+0x22c>
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	335c      	adds	r3, #92	@ 0x5c
 8005822:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0U) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8005824:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8005828:	2004      	movs	r0, #4
 800582a:	f003 fcd9 	bl	80091e0 <calloc>
 800582e:	4603      	mov	r3, r0
 8005830:	461a      	mov	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	631a      	str	r2, [r3, #48]	@ 0x30
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	2b00      	cmp	r3, #0
 800583c:	d064      	beq.n	8005908 <CO_new+0x22c>
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8005844:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8005846:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 800584a:	2004      	movs	r0, #4
 800584c:	f003 fcc8 	bl	80091e0 <calloc>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	635a      	str	r2, [r3, #52]	@ 0x34
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585c:	2b00      	cmp	r3, #0
 800585e:	d053      	beq.n	8005908 <CO_new+0x22c>
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8005866:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8005868:	210c      	movs	r1, #12
 800586a:	2001      	movs	r0, #1
 800586c:	f003 fcb8 	bl	80091e0 <calloc>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	639a      	str	r2, [r3, #56]	@ 0x38
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d043      	beq.n	8005908 <CO_new+0x22c>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	330c      	adds	r3, #12
 8005884:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8005886:	2174      	movs	r1, #116	@ 0x74
 8005888:	2001      	movs	r0, #1
 800588a:	f003 fca9 	bl	80091e0 <calloc>
 800588e:	4603      	mov	r3, r0
 8005890:	461a      	mov	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d034      	beq.n	8005908 <CO_new+0x22c>
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3374      	adds	r3, #116	@ 0x74
 80058a2:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 80058a4:	2138      	movs	r1, #56	@ 0x38
 80058a6:	2001      	movs	r0, #1
 80058a8:	f003 fc9a 	bl	80091e0 <calloc>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d025      	beq.n	8005908 <CO_new+0x22c>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	3338      	adds	r3, #56	@ 0x38
 80058c0:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80058c2:	210c      	movs	r1, #12
 80058c4:	2011      	movs	r0, #17
 80058c6:	f003 fc8b 	bl	80091e0 <calloc>
 80058ca:	4603      	mov	r3, r0
 80058cc:	461a      	mov	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <CO_new+0x22c>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	33cc      	adds	r3, #204	@ 0xcc
 80058de:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80058e0:	2118      	movs	r1, #24
 80058e2:	2009      	movs	r0, #9
 80058e4:	f003 fc7c 	bl	80091e0 <calloc>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <CO_new+0x22c>
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	33d8      	adds	r3, #216	@ 0xd8
 80058fc:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d102      	bne.n	8005914 <CO_new+0x238>
        CO_delete(co);
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f80b 	bl	800592a <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <CO_new+0x244>
        *heapMemoryUsed = mem;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8005920:	697b      	ldr	r3, [r7, #20]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <CO_delete>:

void
CO_delete(CO_t* co) {
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d053      	beq.n	80059e0 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fe5d 	bl	80065fc <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4618      	mov	r0, r3
 8005948:	f003 fc66 	bl	8009218 <free>
    CO_free(co->CANrx);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4618      	mov	r0, r3
 8005952:	f003 fc61 	bl	8009218 <free>
    CO_free(co->CANmodule);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f003 fc5c 	bl	8009218 <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	4618      	mov	r0, r3
 8005966:	f003 fc57 	bl	8009218 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596e:	4618      	mov	r0, r3
 8005970:	f003 fc52 	bl	8009218 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005978:	4618      	mov	r0, r3
 800597a:	f003 fc4d 	bl	8009218 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	4618      	mov	r0, r3
 8005984:	f003 fc48 	bl	8009218 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	4618      	mov	r0, r3
 800598e:	f003 fc43 	bl	8009218 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	4618      	mov	r0, r3
 8005998:	f003 fc3e 	bl	8009218 <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    CO_free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f003 fc39 	bl	8009218 <free>

    /* Emergency */
    CO_free(co->em);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f003 fc34 	bl	8009218 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f003 fc2f 	bl	8009218 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	4618      	mov	r0, r3
 80059c0:	f003 fc2a 	bl	8009218 <free>
    CO_free(co->HBcons);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f003 fc25 	bl	8009218 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f003 fc20 	bl	8009218 <free>

    /* CANopen object */
    CO_free(co);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f003 fc1d 	bl	8009218 <free>
 80059de:	e000      	b.n	80059e2 <CO_delete+0xb8>
        return;
 80059e0:	bf00      	nop
}
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005a00:	e01a      	b.n	8005a38 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8005a0a:	68b8      	ldr	r0, [r7, #8]
 8005a0c:	f000 fd06 	bl	800641c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6858      	ldr	r0, [r3, #4]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6899      	ldr	r1, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	9202      	str	r2, [sp, #8]
 8005a20:	2209      	movs	r2, #9
 8005a22:	9201      	str	r2, [sp, #4]
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2311      	movs	r3, #17
 8005a28:	460a      	mov	r2, r1
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	f000 fd1e 	bl	800646c <CO_CANmodule_init>
 8005a30:	4603      	mov	r3, r0
 8005a32:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8005a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	@ 0x30
 8005a44:	af06      	add	r7, sp, #24
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	e01a      	b.n	8005a90 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	6852      	ldr	r2, [r2, #4]
 8005a66:	f240 71e4 	movw	r1, #2020	@ 0x7e4
 8005a6a:	9105      	str	r1, [sp, #20]
 8005a6c:	2108      	movs	r1, #8
 8005a6e:	9104      	str	r1, [sp, #16]
 8005a70:	9203      	str	r2, [sp, #12]
 8005a72:	f240 72e5 	movw	r2, #2021	@ 0x7e5
 8005a76:	9202      	str	r2, [sp, #8]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	9201      	str	r2, [sp, #4]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	f7ff fb44 	bl	8005110 <CO_LSSslave_init>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8005a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 8005a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9a:	b091      	sub	sp, #68	@ 0x44
 8005a9c:	af0a      	add	r7, sp, #40	@ 0x28
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005aac:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab0:	e12f      	b.n	8005d12 <CO_CANopenInit+0x27a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <CO_CANopenInit+0x26>
        em = co->em;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005ac4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005ac8:	2bff      	cmp	r3, #255	@ 0xff
 8005aca:	d103      	bne.n	8005ad4 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	e00a      	b.n	8005aea <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8005ad4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <CO_CANopenInit+0x4c>
 8005adc:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da02      	bge.n	8005aea <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae8:	e113      	b.n	8005d12 <CO_CANopenInit+0x27a>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fe ffe2 	bl	8004ab8 <CO_LEDs_init>
 8005af4:	4603      	mov	r3, r0
 8005af6:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 8005af8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <CO_CANopenInit+0x6e>
            return err;
 8005b00:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b04:	e105      	b.n	8005d12 <CO_CANopenInit+0x27a>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8005b0e:	f06f 0312 	mvn.w	r3, #18
 8005b12:	e0fe      	b.n	8005d12 <CO_CANopenInit+0x27a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	69d8      	ldr	r0, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685c      	ldr	r4, [r3, #4]
 8005b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f103 050c 	add.w	r5, r3, #12
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 8005b2a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005b30:	336c      	adds	r3, #108	@ 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8005b32:	4a7a      	ldr	r2, [pc, #488]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8005b38:	3218      	adds	r2, #24
 8005b3a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b3c:	9105      	str	r1, [sp, #20]
 8005b3e:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8005b42:	9104      	str	r1, [sp, #16]
 8005b44:	9203      	str	r2, [sp, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	9202      	str	r2, [sp, #8]
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	2311      	movs	r3, #17
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	4633      	mov	r3, r6
 8005b52:	462a      	mov	r2, r5
 8005b54:	4621      	mov	r1, r4
 8005b56:	f7fa fca5 	bl	80004a4 <CO_EM_init>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8005b5e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <CO_CANopenInit+0xd4>
            return err;
 8005b66:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005b6a:	e0d2      	b.n	8005d12 <CO_CANopenInit+0x27a>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691c      	ldr	r4, [r3, #16]
 8005b70:	4b6a      	ldr	r3, [pc, #424]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f103 0590 	add.w	r5, r3, #144	@ 0x90
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	6852      	ldr	r2, [r2, #4]
 8005b82:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 8005b86:	b289      	uxth	r1, r1
 8005b88:	f501 61e0 	add.w	r1, r1, #1792	@ 0x700
 8005b8c:	b289      	uxth	r1, r1
 8005b8e:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 8005b92:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005b94:	9008      	str	r0, [sp, #32]
 8005b96:	9107      	str	r1, [sp, #28]
 8005b98:	2107      	movs	r1, #7
 8005b9a:	9106      	str	r1, [sp, #24]
 8005b9c:	9205      	str	r2, [sp, #20]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	9204      	str	r2, [sp, #16]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	9203      	str	r2, [sp, #12]
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	4633      	mov	r3, r6
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7fb faf6 	bl	80011a8 <CO_NMT_init>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8005bc0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <CO_CANopenInit+0x136>
            return err;
 8005bc8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005bcc:	e0a1      	b.n	8005d12 <CO_CANopenInit+0x27a>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6958      	ldr	r0, [r3, #20]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8005bd6:	4b51      	ldr	r3, [pc, #324]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 8005bdc:	3384      	adds	r3, #132	@ 0x84
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	6852      	ldr	r2, [r2, #4]
 8005be2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005be4:	9103      	str	r1, [sp, #12]
 8005be6:	2108      	movs	r1, #8
 8005be8:	9102      	str	r1, [sp, #8]
 8005bea:	9201      	str	r2, [sp, #4]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	2308      	movs	r3, #8
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	f7fa ffe6 	bl	8000bc4 <CO_HBconsumer_init>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 8005bfc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <CO_CANopenInit+0x172>
            return err;
 8005c04:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005c08:	e083      	b.n	8005d12 <CO_CANopenInit+0x27a>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8005c0a:	4b44      	ldr	r3, [pc, #272]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	33b4      	adds	r3, #180	@ 0xb4
 8005c12:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005c14:	2300      	movs	r3, #0
 8005c16:	827b      	strh	r3, [r7, #18]
 8005c18:	e02f      	b.n	8005c7a <CO_CANopenInit+0x1e2>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c1e:	8a7b      	ldrh	r3, [r7, #18]
 8005c20:	21ac      	movs	r1, #172	@ 0xac
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	18d5      	adds	r5, r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	8a7a      	ldrh	r2, [r7, #18]
 8005c2e:	3207      	adds	r2, #7
 8005c30:	b292      	uxth	r2, r2
 8005c32:	68f9      	ldr	r1, [r7, #12]
 8005c34:	6849      	ldr	r1, [r1, #4]
 8005c36:	8a78      	ldrh	r0, [r7, #18]
 8005c38:	3006      	adds	r0, #6
 8005c3a:	b280      	uxth	r0, r0
 8005c3c:	f897 6048 	ldrb.w	r6, [r7, #72]	@ 0x48
 8005c40:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8005c42:	9405      	str	r4, [sp, #20]
 8005c44:	9004      	str	r0, [sp, #16]
 8005c46:	9103      	str	r1, [sp, #12]
 8005c48:	9202      	str	r2, [sp, #8]
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4633      	mov	r3, r6
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	4628      	mov	r0, r5
 8005c58:	f7fd fa5e 	bl	8003118 <CO_SDOserver_init>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 8005c60:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <CO_CANopenInit+0x1d6>
                return err;
 8005c68:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005c6c:	e051      	b.n	8005d12 <CO_CANopenInit+0x27a>
            }
            SDOsrvPar++;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	330c      	adds	r3, #12
 8005c72:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8005c74:	8a7b      	ldrh	r3, [r7, #18]
 8005c76:	3301      	adds	r3, #1
 8005c78:	827b      	strh	r3, [r7, #18]
 8005c7a:	8a7b      	ldrh	r3, [r7, #18]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0cc      	beq.n	8005c1a <CO_CANopenInit+0x182>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8005c84:	4b25      	ldr	r3, [pc, #148]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	2302      	movs	r3, #2
 8005c98:	f7fe fe18 	bl	80048cc <CO_TIME_init>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8005ca0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <CO_CANopenInit+0x216>
            return err;
 8005ca8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005cac:	e031      	b.n	8005d12 <CO_CANopenInit+0x27a>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f103 0624 	add.w	r6, r3, #36	@ 0x24
 8005cbc:	4b17      	ldr	r3, [pc, #92]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005cc6:	4b15      	ldr	r3, [pc, #84]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005ccc:	333c      	adds	r3, #60	@ 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8005cce:	4a13      	ldr	r2, [pc, #76]	@ (8005d1c <CO_CANopenInit+0x284>)
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8005cd4:	32a8      	adds	r2, #168	@ 0xa8
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	6849      	ldr	r1, [r1, #4]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	6840      	ldr	r0, [r0, #4]
 8005cde:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8005ce0:	9406      	str	r4, [sp, #24]
 8005ce2:	2400      	movs	r4, #0
 8005ce4:	9405      	str	r4, [sp, #20]
 8005ce6:	9004      	str	r0, [sp, #16]
 8005ce8:	2001      	movs	r0, #1
 8005cea:	9003      	str	r0, [sp, #12]
 8005cec:	9102      	str	r1, [sp, #8]
 8005cee:	9201      	str	r2, [sp, #4]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	4663      	mov	r3, ip
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f7fe fbdf 	bl	80044bc <CO_SYNC_init>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8005d02:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <CO_CANopenInit+0x278>
            return err;
 8005d0a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8005d0e:	e000      	b.n	8005d12 <CO_CANopenInit+0x27a>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	200003cc 	.word	0x200003cc

08005d20 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b093      	sub	sp, #76	@ 0x4c
 8005d24:	af06      	add	r7, sp, #24
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	e0b4      	b.n	8005ea4 <CO_CANopenInitPDO+0x184>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 8005d3a:	78fb      	ldrb	r3, [r7, #3]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <CO_CANopenInitPDO+0x30>
 8005d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db03      	blt.n	8005d50 <CO_CANopenInitPDO+0x30>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <CO_CANopenInitPDO+0x3e>
 8005d58:	f06f 0312 	mvn.w	r3, #18
 8005d5c:	e0a2      	b.n	8005ea4 <CO_CANopenInitPDO+0x184>
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	e09f      	b.n	8005ea4 <CO_CANopenInitPDO+0x184>
    }

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    if (CO_GET_CNT(RPDO) > 0U) {
        OD_entry_t* RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8005d64:	4b51      	ldr	r3, [pc, #324]	@ (8005eac <CO_CANopenInitPDO+0x18c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	33cc      	adds	r3, #204	@ 0xcc
 8005d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        OD_entry_t* RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005eac <CO_CANopenInitPDO+0x18c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	33fc      	adds	r3, #252	@ 0xfc
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8005d78:	2300      	movs	r3, #0
 8005d7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005d7c:	e03d      	b.n	8005dfa <CO_CANopenInitPDO+0xda>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	84bb      	strh	r3, [r7, #36]	@ 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8005d82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d808      	bhi.n	8005d9a <CO_CANopenInitPDO+0x7a>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_RPDO_1 + (i * 0x100U)) + nodeId);
 8005d88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4413      	add	r3, r2
 8005d98:	84bb      	strh	r3, [r7, #36]	@ 0x24
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i], od, em,
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005da0:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	18d0      	adds	r0, r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005db4:	3203      	adds	r2, #3
 8005db6:	b292      	uxth	r2, r2
 8005db8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dba:	9105      	str	r1, [sp, #20]
 8005dbc:	9204      	str	r2, [sp, #16]
 8005dbe:	9303      	str	r3, [sp, #12]
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	9302      	str	r3, [sp, #8]
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4623      	mov	r3, r4
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	f7fc fb79 	bl	80024c8 <CO_RPDO_init>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	75bb      	strb	r3, [r7, #22]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, RPDOcomm, RPDOmap, co->CANmodule, CO_GET_CO(RX_IDX_RPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8005dda:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <CO_CANopenInitPDO+0xc8>
                return err;
 8005de2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005de6:	e05d      	b.n	8005ea4 <CO_CANopenInitPDO+0x184>
            }
            RPDOcomm++;
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	330c      	adds	r3, #12
 8005dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            RPDOmap++;
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	330c      	adds	r3, #12
 8005df2:	62bb      	str	r3, [r7, #40]	@ 0x28
        for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8005df4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005df6:	3301      	adds	r3, #1
 8005df8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005dfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d9be      	bls.n	8005d7e <CO_CANopenInitPDO+0x5e>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8005e00:	4b2a      	ldr	r3, [pc, #168]	@ (8005eac <CO_CANopenInitPDO+0x18c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8005e0a:	623b      	str	r3, [r7, #32]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8005e0c:	4b27      	ldr	r3, [pc, #156]	@ (8005eac <CO_CANopenInitPDO+0x18c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005e16:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8005e18:	2300      	movs	r3, #0
 8005e1a:	837b      	strh	r3, [r7, #26]
 8005e1c:	e03e      	b.n	8005e9c <CO_CANopenInitPDO+0x17c>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8005e22:	8b7b      	ldrh	r3, [r7, #26]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d809      	bhi.n	8005e3c <CO_CANopenInitPDO+0x11c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 8005e28:	8b7b      	ldrh	r3, [r7, #26]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4413      	add	r3, r2
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005e3a:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e40:	8b7b      	ldrh	r3, [r7, #26]
 8005e42:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	18d0      	adds	r0, r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	8b7a      	ldrh	r2, [r7, #26]
 8005e56:	3202      	adds	r2, #2
 8005e58:	b292      	uxth	r2, r2
 8005e5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e5c:	9105      	str	r1, [sp, #20]
 8005e5e:	9204      	str	r2, [sp, #16]
 8005e60:	9303      	str	r3, [sp, #12]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	8b3b      	ldrh	r3, [r7, #24]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4623      	mov	r3, r4
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	f7fc fdbc 	bl	80029f0 <CO_TPDO_init>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	75fb      	strb	r3, [r7, #23]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8005e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <CO_CANopenInitPDO+0x16a>
                return err;
 8005e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e88:	e00c      	b.n	8005ea4 <CO_CANopenInitPDO+0x184>
            }
            TPDOcomm++;
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	623b      	str	r3, [r7, #32]
            TPDOmap++;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	330c      	adds	r3, #12
 8005e94:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8005e96:	8b7b      	ldrh	r3, [r7, #26]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	837b      	strh	r3, [r7, #26]
 8005e9c:	8b7b      	ldrh	r3, [r7, #26]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d9bd      	bls.n	8005e1e <CO_CANopenInitPDO+0xfe>
        }
    }
#endif

    return CO_ERROR_NO;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3734      	adds	r7, #52	@ 0x34
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd90      	pop	{r4, r7, pc}
 8005eac:	200003cc 	.word	0x200003cc

08005eb0 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8005eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb2:	b09b      	sub	sp, #108	@ 0x6c
 8005eb4:	af08      	add	r7, sp, #32
 8005eb6:	61f8      	str	r0, [r7, #28]
 8005eb8:	61b9      	str	r1, [r7, #24]
 8005eba:	617a      	str	r2, [r7, #20]
 8005ebc:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fbe6 	bl	800569a <CO_NMT_getInternalState>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8005ed4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eda:	d003      	beq.n	8005ee4 <CO_process+0x34>
 8005edc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8005ee0:	2b05      	cmp	r3, #5
 8005ee2:	d101      	bne.n	8005ee8 <CO_process+0x38>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <CO_process+0x3a>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fcb6 	bl	8006862 <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff f97e 	bl	80051fc <CO_LSSslave_process>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	8a5b      	ldrh	r3, [r3, #18]
 8005f18:	867b      	strh	r3, [r7, #50]	@ 0x32
    bool_t LSSslave_configuration = false;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	643b      	str	r3, [r7, #64]	@ 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fbca 	bl	80056bc <CO_LSSslave_getState>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <CO_process+0x82>
            LSSslave_configuration = true;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	2118      	movs	r1, #24
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fb73 	bl	8005624 <CO_isError>
 8005f3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	211b      	movs	r1, #27
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fb6c 	bl	8005624 <CO_isError>
 8005f4c:	62b8      	str	r0, [r7, #40]	@ 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	211c      	movs	r1, #28
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fb65 	bl	8005624 <CO_isError>
 8005f5a:	6278      	str	r0, [r7, #36]	@ 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8005f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <CO_process+0xbc>
 8005f66:	f997 5023 	ldrsb.w	r5, [r7, #35]	@ 0x23
 8005f6a:	e000      	b.n	8005f6e <CO_process+0xbe>
 8005f6c:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8005f6e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005f70:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8005f80:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8005f82:	f240 3303 	movw	r3, #771	@ 0x303
 8005f86:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <CO_process+0xee>
 8005f9a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8005f9c:	e000      	b.n	8005fa0 <CO_process+0xf0>
 8005f9e:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <CO_process+0x106>
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <CO_process+0x102>
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <CO_process+0x106>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <CO_process+0x108>
 8005fb6:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005fb8:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fb56 	bl	8005670 <CO_getErrorRegister>
 8005fc4:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bf14      	ite	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	2300      	moveq	r3, #0
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	9307      	str	r3, [sp, #28]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9306      	str	r3, [sp, #24]
 8005fda:	9205      	str	r2, [sp, #20]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	9403      	str	r4, [sp, #12]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9302      	str	r3, [sp, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7fe fd77 	bl	8004ae8 <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <CO_process+0x158>
        return reset;
 8006002:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006006:	e047      	b.n	8006098 <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	69d8      	ldr	r0, [r3, #28]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006012:	f7fa fb27 	bl	8000664 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	6918      	ldr	r0, [r3, #16]
 800601a:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	f7fb f97f 	bl	8001324 <CO_NMT_process>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 800602c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006030:	2b7f      	cmp	r3, #127	@ 0x7f
 8006032:	d003      	beq.n	800603c <CO_process+0x18c>
 8006034:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006038:	2b05      	cmp	r3, #5
 800603a:	d101      	bne.n	8006040 <CO_process+0x190>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <CO_process+0x192>
 8006040:	2300      	movs	r3, #0
 8006042:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006044:	2300      	movs	r3, #0
 8006046:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800604a:	e011      	b.n	8006070 <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006050:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006054:	21ac      	movs	r1, #172	@ 0xac
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	18d0      	adds	r0, r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006062:	f7fd fb43 	bl	80036ec <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006066:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800606a:	3301      	adds	r3, #1
 800606c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006070:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0e9      	beq.n	800604c <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	6958      	ldr	r0, [r3, #20]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006082:	f7fa fedf 	bl	8000e44 <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fc9c 	bl	80049cc <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8006094:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006098:	4618      	mov	r0, r3
 800609a:	374c      	adds	r7, #76	@ 0x4c
 800609c:	46bd      	mov	sp, r7
 800609e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060a0 <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 80060a8:	4a13      	ldr	r2, [pc, #76]	@ (80060f8 <canopen_app_init+0x58>)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 80060b2:	f107 0308 	add.w	r3, r7, #8
 80060b6:	4619      	mov	r1, r3
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fb0f 	bl	80056dc <CO_new>
 80060be:	4603      	mov	r3, r0
 80060c0:	4a0e      	ldr	r2, [pc, #56]	@ (80060fc <canopen_app_init+0x5c>)
 80060c2:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 80060c4:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <canopen_app_init+0x5c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d104      	bne.n	80060d6 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 80060cc:	480c      	ldr	r0, [pc, #48]	@ (8006100 <canopen_app_init+0x60>)
 80060ce:	f003 fb3f 	bl	8009750 <puts>
        return 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e00c      	b.n	80060f0 <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4619      	mov	r1, r3
 80060da:	480a      	ldr	r0, [pc, #40]	@ (8006104 <canopen_app_init+0x64>)
 80060dc:	f003 fad0 	bl	8009680 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 80060e0:	4b05      	ldr	r3, [pc, #20]	@ (80060f8 <canopen_app_init+0x58>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a05      	ldr	r2, [pc, #20]	@ (80060fc <canopen_app_init+0x5c>)
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 80060ea:	f000 f80d 	bl	8006108 <canopen_app_resetCommunication>
    return 0;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20000454 	.word	0x20000454
 80060fc:	20000458 	.word	0x20000458
 8006100:	0800a1e4 	.word	0x0800a1e4
 8006104:	0800a204 	.word	0x0800a204

08006108 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b08f      	sub	sp, #60	@ 0x3c
 800610c:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 800610e:	487d      	ldr	r0, [pc, #500]	@ (8006304 <canopen_app_resetCommunication+0x1fc>)
 8006110:	f003 fb1e 	bl	8009750 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006114:	4b7c      	ldr	r3, [pc, #496]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 800611e:	4b7b      	ldr	r3, [pc, #492]	@ (800630c <canopen_app_resetCommunication+0x204>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f97a 	bl	800641c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006128:	4b77      	ldr	r3, [pc, #476]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fa64 	bl	80065fc <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006134:	4b74      	ldr	r3, [pc, #464]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a74      	ldr	r2, [pc, #464]	@ (800630c <canopen_app_resetCommunication+0x204>)
 800613a:	6811      	ldr	r1, [r2, #0]
 800613c:	2200      	movs	r2, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fc52 	bl	80059e8 <CO_CANinit>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	4b71      	ldr	r3, [pc, #452]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800614a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 800614c:	4b70      	ldr	r3, [pc, #448]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800614e:	f993 3000 	ldrsb.w	r3, [r3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d008      	beq.n	8006168 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006156:	4b6e      	ldr	r3, [pc, #440]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 8006158:	f993 3000 	ldrsb.w	r3, [r3]
 800615c:	4619      	mov	r1, r3
 800615e:	486d      	ldr	r0, [pc, #436]	@ (8006314 <canopen_app_resetCommunication+0x20c>)
 8006160:	f003 fa8e 	bl	8009680 <iprintf>
        return 1;
 8006164:	2301      	movs	r3, #1
 8006166:	e0c8      	b.n	80062fa <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006168:	4b6b      	ldr	r3, [pc, #428]	@ (8006318 <canopen_app_resetCommunication+0x210>)
 800616a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616c:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 800616e:	4b6a      	ldr	r3, [pc, #424]	@ (8006318 <canopen_app_resetCommunication+0x210>)
 8006170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006172:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006174:	4b68      	ldr	r3, [pc, #416]	@ (8006318 <canopen_app_resetCommunication+0x210>)
 8006176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006178:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 800617a:	4b67      	ldr	r3, [pc, #412]	@ (8006318 <canopen_app_resetCommunication+0x210>)
 800617c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 800617e:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006180:	4b61      	ldr	r3, [pc, #388]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	4b61      	ldr	r3, [pc, #388]	@ (800630c <canopen_app_resetCommunication+0x204>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	4b60      	ldr	r3, [pc, #384]	@ (800630c <canopen_app_resetCommunication+0x204>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3302      	adds	r3, #2
 8006190:	f107 0108 	add.w	r1, r7, #8
 8006194:	f7ff fc54 	bl	8005a40 <CO_LSSinit>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	4b5c      	ldr	r3, [pc, #368]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800619e:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 80061a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 80061a2:	f993 3000 	ldrsb.w	r3, [r3]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 80061aa:	4b59      	ldr	r3, [pc, #356]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 80061ac:	f993 3000 	ldrsb.w	r3, [r3]
 80061b0:	4619      	mov	r1, r3
 80061b2:	485a      	ldr	r0, [pc, #360]	@ (800631c <canopen_app_resetCommunication+0x214>)
 80061b4:	f003 fa64 	bl	8009680 <iprintf>
        return 2;
 80061b8:	2302      	movs	r3, #2
 80061ba:	e09e      	b.n	80062fa <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 80061bc:	4b53      	ldr	r3, [pc, #332]	@ (800630c <canopen_app_resetCommunication+0x204>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b52      	ldr	r3, [pc, #328]	@ (800630c <canopen_app_resetCommunication+0x204>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 80061cc:	4b4e      	ldr	r3, [pc, #312]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4b53      	ldr	r3, [pc, #332]	@ (8006320 <canopen_app_resetCommunication+0x218>)
 80061d2:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 80061d4:	4b4d      	ldr	r3, [pc, #308]	@ (800630c <canopen_app_resetCommunication+0x204>)
 80061d6:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	1d3a      	adds	r2, r7, #4
 80061dc:	9207      	str	r2, [sp, #28]
 80061de:	9306      	str	r3, [sp, #24]
 80061e0:	2300      	movs	r3, #0
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80061ee:	9303      	str	r3, [sp, #12]
 80061f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80061f4:	9302      	str	r3, [sp, #8]
 80061f6:	f242 1311 	movw	r3, #8465	@ 0x2111
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	460b      	mov	r3, r1
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	f7ff fc47 	bl	8005a98 <CO_CANopenInit>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	4b40      	ldr	r3, [pc, #256]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 8006210:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006212:	4b3f      	ldr	r3, [pc, #252]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 8006214:	f993 3000 	ldrsb.w	r3, [r3]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01a      	beq.n	8006252 <canopen_app_resetCommunication+0x14a>
 800621c:	4b3c      	ldr	r3, [pc, #240]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800621e:	f993 3000 	ldrsb.w	r3, [r3]
 8006222:	f113 0f13 	cmn.w	r3, #19
 8006226:	d014      	beq.n	8006252 <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006228:	4b39      	ldr	r3, [pc, #228]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800622a:	f993 3000 	ldrsb.w	r3, [r3]
 800622e:	f113 0f0c 	cmn.w	r3, #12
 8006232:	d105      	bne.n	8006240 <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4619      	mov	r1, r3
 8006238:	483a      	ldr	r0, [pc, #232]	@ (8006324 <canopen_app_resetCommunication+0x21c>)
 800623a:	f003 fa21 	bl	8009680 <iprintf>
 800623e:	e006      	b.n	800624e <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006240:	4b33      	ldr	r3, [pc, #204]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 8006242:	f993 3000 	ldrsb.w	r3, [r3]
 8006246:	4619      	mov	r1, r3
 8006248:	4837      	ldr	r0, [pc, #220]	@ (8006328 <canopen_app_resetCommunication+0x220>)
 800624a:	f003 fa19 	bl	8009680 <iprintf>
        }
        return 3;
 800624e:	2303      	movs	r3, #3
 8006250:	e053      	b.n	80062fa <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006252:	4b2d      	ldr	r3, [pc, #180]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	4b2c      	ldr	r3, [pc, #176]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69d9      	ldr	r1, [r3, #28]
 800625c:	4b30      	ldr	r3, [pc, #192]	@ (8006320 <canopen_app_resetCommunication+0x218>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b2a      	ldr	r3, [pc, #168]	@ (800630c <canopen_app_resetCommunication+0x204>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	785c      	ldrb	r4, [r3, #1]
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	4623      	mov	r3, r4
 800626c:	f7ff fd58 	bl	8005d20 <CO_CANopenInitPDO>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	4b26      	ldr	r3, [pc, #152]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 8006276:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006278:	4b25      	ldr	r3, [pc, #148]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800627a:	f993 3000 	ldrsb.w	r3, [r3]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d014      	beq.n	80062ac <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006282:	4b23      	ldr	r3, [pc, #140]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 8006284:	f993 3000 	ldrsb.w	r3, [r3]
 8006288:	f113 0f0c 	cmn.w	r3, #12
 800628c:	d105      	bne.n	800629a <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4619      	mov	r1, r3
 8006292:	4824      	ldr	r0, [pc, #144]	@ (8006324 <canopen_app_resetCommunication+0x21c>)
 8006294:	f003 f9f4 	bl	8009680 <iprintf>
 8006298:	e006      	b.n	80062a8 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 800629a:	4b1d      	ldr	r3, [pc, #116]	@ (8006310 <canopen_app_resetCommunication+0x208>)
 800629c:	f993 3000 	ldrsb.w	r3, [r3]
 80062a0:	4619      	mov	r1, r3
 80062a2:	4822      	ldr	r0, [pc, #136]	@ (800632c <canopen_app_resetCommunication+0x224>)
 80062a4:	f003 f9ec 	bl	8009680 <iprintf>
        }
        return 4;
 80062a8:	2304      	movs	r3, #4
 80062aa:	e026      	b.n	80062fa <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 80062ac:	4b17      	ldr	r3, [pc, #92]	@ (800630c <canopen_app_resetCommunication+0x204>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f002 fce4 	bl	8008c80 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 80062b8:	4b13      	ldr	r3, [pc, #76]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 80062c2:	481b      	ldr	r0, [pc, #108]	@ (8006330 <canopen_app_resetCommunication+0x228>)
 80062c4:	f003 fa44 	bl	8009750 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 80062c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <canopen_app_resetCommunication+0x200>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f8b4 	bl	800643c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 80062d4:	4817      	ldr	r0, [pc, #92]	@ (8006334 <canopen_app_resetCommunication+0x22c>)
 80062d6:	f003 fa3b 	bl	8009750 <puts>
    fflush(stdout);
 80062da:	4b17      	ldr	r3, [pc, #92]	@ (8006338 <canopen_app_resetCommunication+0x230>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f003 f8f7 	bl	80094d4 <fflush>
    time_old = time_current = HAL_GetTick();
 80062e6:	f000 ff3d 	bl	8007164 <HAL_GetTick>
 80062ea:	4603      	mov	r3, r0
 80062ec:	4a13      	ldr	r2, [pc, #76]	@ (800633c <canopen_app_resetCommunication+0x234>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4b12      	ldr	r3, [pc, #72]	@ (800633c <canopen_app_resetCommunication+0x234>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a12      	ldr	r2, [pc, #72]	@ (8006340 <canopen_app_resetCommunication+0x238>)
 80062f6:	6013      	str	r3, [r2, #0]
    return 0;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd90      	pop	{r4, r7, pc}
 8006302:	bf00      	nop
 8006304:	0800a22c 	.word	0x0800a22c
 8006308:	20000458 	.word	0x20000458
 800630c:	20000454 	.word	0x20000454
 8006310:	20000464 	.word	0x20000464
 8006314:	0800a254 	.word	0x0800a254
 8006318:	20000000 	.word	0x20000000
 800631c:	0800a27c 	.word	0x0800a27c
 8006320:	200003cc 	.word	0x200003cc
 8006324:	0800a2a8 	.word	0x0800a2a8
 8006328:	0800a2d0 	.word	0x0800a2d0
 800632c:	0800a2fc 	.word	0x0800a2fc
 8006330:	0800a324 	.word	0x0800a324
 8006334:	0800a34c 	.word	0x0800a34c
 8006338:	200003e8 	.word	0x200003e8
 800633c:	20000460 	.word	0x20000460
 8006340:	2000045c 	.word	0x2000045c

08006344 <canopen_app_process>:

void
canopen_app_process() {
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 800634a:	f000 ff0b 	bl	8007164 <HAL_GetTick>
 800634e:	4603      	mov	r3, r0
 8006350:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <canopen_app_process+0xc0>)
 8006352:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8006354:	4b2b      	ldr	r3, [pc, #172]	@ (8006404 <canopen_app_process+0xc0>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b2b      	ldr	r3, [pc, #172]	@ (8006408 <canopen_app_process+0xc4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d04c      	beq.n	80063fa <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8006360:	4b28      	ldr	r3, [pc, #160]	@ (8006404 <canopen_app_process+0xc0>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b28      	ldr	r3, [pc, #160]	@ (8006408 <canopen_app_process+0xc4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8006374:	4b23      	ldr	r3, [pc, #140]	@ (8006404 <canopen_app_process+0xc0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a23      	ldr	r2, [pc, #140]	@ (8006408 <canopen_app_process+0xc4>)
 800637a:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 800637c:	4b23      	ldr	r3, [pc, #140]	@ (800640c <canopen_app_process+0xc8>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	2300      	movs	r3, #0
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	2100      	movs	r1, #0
 8006386:	f7ff fd93 	bl	8005eb0 <CO_process>
 800638a:	4603      	mov	r3, r0
 800638c:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 800638e:	4b1f      	ldr	r3, [pc, #124]	@ (800640c <canopen_app_process+0xc8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006394:	7a5a      	ldrb	r2, [r3, #9]
 8006396:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <canopen_app_process+0xcc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	09d2      	lsrs	r2, r2, #7
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 80063a0:	4b1a      	ldr	r3, [pc, #104]	@ (800640c <canopen_app_process+0xc8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a6:	7a9a      	ldrb	r2, [r3, #10]
 80063a8:	4b19      	ldr	r3, [pc, #100]	@ (8006410 <canopen_app_process+0xcc>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	09d2      	lsrs	r2, r2, #7
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d118      	bne.n	80063ea <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 80063b8:	4b15      	ldr	r3, [pc, #84]	@ (8006410 <canopen_app_process+0xcc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4618      	mov	r0, r3
 80063c0:	f002 fcbe 	bl	8008d40 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80063c4:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <canopen_app_process+0xcc>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f827 	bl	800641c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 80063ce:	4b0f      	ldr	r3, [pc, #60]	@ (800640c <canopen_app_process+0xc8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff faa9 	bl	800592a <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80063d8:	480e      	ldr	r0, [pc, #56]	@ (8006414 <canopen_app_process+0xd0>)
 80063da:	f003 f9b9 	bl	8009750 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 80063de:	4b0c      	ldr	r3, [pc, #48]	@ (8006410 <canopen_app_process+0xcc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fe5c 	bl	80060a0 <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80063e8:	e007      	b.n	80063fa <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d104      	bne.n	80063fa <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 80063f0:	4809      	ldr	r0, [pc, #36]	@ (8006418 <canopen_app_process+0xd4>)
 80063f2:	f003 f9ad 	bl	8009750 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80063f6:	f001 fe70 	bl	80080da <HAL_NVIC_SystemReset>
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000460 	.word	0x20000460
 8006408:	2000045c 	.word	0x2000045c
 800640c:	20000458 	.word	0x20000458
 8006410:	20000454 	.word	0x20000454
 8006414:	0800a368 	.word	0x0800a368
 8006418:	0800a390 	.word	0x0800a390

0800641c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f8aa 	bl	8007588 <HAL_CAN_Stop>
#endif
    }
}
 8006434:	bf00      	nop
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	4618      	mov	r0, r3
 8006454:	f001 f854 	bl	8007500 <HAL_CAN_Start>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	615a      	str	r2, [r3, #20]
        }
    }
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 800646c:	b580      	push	{r7, lr}
 800646e:	b090      	sub	sp, #64	@ 0x40
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <CO_CANmodule_init+0x20>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <CO_CANmodule_init+0x20>
 8006486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006488:	2b00      	cmp	r3, #0
 800648a:	d102      	bne.n	8006492 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800648c:	f04f 33ff 	mov.w	r3, #4294967295
 8006490:	e0ab      	b.n	80065ea <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8006498:	4a56      	ldr	r2, [pc, #344]	@ (80065f4 <CO_CANmodule_init+0x188>)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	887a      	ldrh	r2, [r7, #2]
 80064a8:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ae:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80064b6:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	849a      	strh	r2, [r3, #36]	@ 0x24
    CANmodule->errOld = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 80064e2:	2300      	movs	r3, #0
 80064e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80064e6:	e02b      	b.n	8006540 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 80064e8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	461a      	mov	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4413      	add	r3, r2
 80064f8:	2200      	movs	r2, #0
 80064fa:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 80064fc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	461a      	mov	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006510:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8006512:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006514:	4613      	mov	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	461a      	mov	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	2200      	movs	r2, #0
 8006524:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8006526:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 800653a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800653c:	3301      	adds	r3, #1
 800653e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006540:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006542:	887b      	ldrh	r3, [r7, #2]
 8006544:	429a      	cmp	r2, r3
 8006546:	d3cf      	bcc.n	80064e8 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8006548:	2300      	movs	r3, #0
 800654a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800654c:	e00c      	b.n	8006568 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 800654e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8006550:	4613      	mov	r3, r2
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4413      	add	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	461a      	mov	r2, r3
 800655a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800655c:	4413      	add	r3, r2
 800655e:	2200      	movs	r2, #0
 8006560:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8006562:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006564:	3301      	adds	r3, #1
 8006566:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006568:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800656a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800656e:	429a      	cmp	r2, r3
 8006570:	d3ed      	bcc.n	800654e <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1d      	ldr	r2, [pc, #116]	@ (80065f8 <CO_CANmodule_init+0x18c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d102      	bne.n	800658c <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800658a:	e001      	b.n	8006590 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 800658c:	230e      	movs	r3, #14
 800658e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006594:	2301      	movs	r3, #1
 8006596:	633b      	str	r3, [r7, #48]	@ 0x30
    FilterConfig.FilterIdHigh = 0x0;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 800659c:	2300      	movs	r3, #0
 800659e:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	627b      	str	r3, [r7, #36]	@ 0x24

    FilterConfig.FilterActivation = ENABLE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 80065b0:	230e      	movs	r3, #14
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f107 0214 	add.w	r2, r7, #20
 80065bc:	4611      	mov	r1, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fed5 	bl	800736e <HAL_CAN_ConfigFilter>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
 80065ce:	e00c      	b.n	80065ea <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2113      	movs	r1, #19
 80065d6:	4618      	mov	r0, r3
 80065d8:	f001 fa43 	bl	8007a62 <HAL_CAN_ActivateNotification>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80065e2:	f04f 33ff 	mov.w	r3, #4294967295
 80065e6:	e000      	b.n	80065ea <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3740      	adds	r7, #64	@ 0x40
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000468 	.word	0x20000468
 80065f8:	40006400 	.word	0x40006400

080065fc <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <CO_CANmodule_disable+0x22>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4618      	mov	r0, r3
 800661a:	f000 ffb5 	bl	8007588 <HAL_CAN_Stop>
#endif
    }
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	461a      	mov	r2, r3
 8006636:	4603      	mov	r3, r0
 8006638:	817b      	strh	r3, [r7, #10]
 800663a:	460b      	mov	r3, r1
 800663c:	813b      	strh	r3, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d03c      	beq.n	80066c6 <CO_CANrxBufferInit+0x9e>
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	2b00      	cmp	r3, #0
 8006650:	d039      	beq.n	80066c6 <CO_CANrxBufferInit+0x9e>
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	d036      	beq.n	80066c6 <CO_CANrxBufferInit+0x9e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	891b      	ldrh	r3, [r3, #8]
 800665c:	897a      	ldrh	r2, [r7, #10]
 800665e:	429a      	cmp	r2, r3
 8006660:	d231      	bcs.n	80066c6 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6859      	ldr	r1, [r3, #4]
 8006666:	897a      	ldrh	r2, [r7, #10]
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006678:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800667e:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8006680:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006688:	b21b      	sxth	r3, r3
 800668a:	6a3a      	ldr	r2, [r7, #32]
 800668c:	2a00      	cmp	r2, #0
 800668e:	d001      	beq.n	8006694 <CO_CANrxBufferInit+0x6c>
 8006690:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <CO_CANrxBufferInit+0xb4>)
 8006692:	e000      	b.n	8006696 <CO_CANrxBufferInit+0x6e>
 8006694:	2200      	movs	r2, #0
 8006696:	4313      	orrs	r3, r2
 8006698:	b21b      	sxth	r3, r3
 800669a:	b29a      	uxth	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 80066a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066a8:	b21b      	sxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b21b      	sxth	r3, r3
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d004      	beq.n	80066cc <CO_CANrxBufferInit+0xa4>
            __NOP();
 80066c2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80066c4:	e002      	b.n	80066cc <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80066c6:	23ff      	movs	r3, #255	@ 0xff
 80066c8:	75fb      	strb	r3, [r7, #23]
 80066ca:	e000      	b.n	80066ce <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80066cc:	bf00      	nop
    }

    return ret;
 80066ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr
 80066dc:	ffff8000 	.word	0xffff8000

080066e0 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	4613      	mov	r3, r2
 80066f0:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d024      	beq.n	8006746 <CO_CANtxBufferInit+0x66>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8a1b      	ldrh	r3, [r3, #16]
 8006700:	897a      	ldrh	r2, [r7, #10]
 8006702:	429a      	cmp	r2, r3
 8006704:	d21f      	bcs.n	8006746 <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68d9      	ldr	r1, [r3, #12]
 800670a:	897a      	ldrh	r2, [r7, #10]
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	440b      	add	r3, r1
 8006716:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 8006718:	893b      	ldrh	r3, [r7, #8]
 800671a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	2a00      	cmp	r2, #0
 8006722:	d002      	beq.n	800672a <CO_CANtxBufferInit+0x4a>
 8006724:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006728:	e000      	b.n	800672c <CO_CANtxBufferInit+0x4c>
 800672a:	2200      	movs	r2, #0
 800672c:	431a      	orrs	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006738:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006744:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 8006746:	697b      	ldr	r3, [r7, #20]
}
 8006748:	4618      	mov	r0, r3
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr
	...

08006754 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4618      	mov	r0, r3
 800676a:	f001 f825 	bl	80077b8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d028      	beq.n	80067c6 <prv_send_can_message+0x72>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.ExtId = 0u;
 8006774:	4b16      	ldr	r3, [pc, #88]	@ (80067d0 <prv_send_can_message+0x7c>)
 8006776:	2200      	movs	r2, #0
 8006778:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 800677a:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <prv_send_can_message+0x7c>)
 800677c:	2200      	movs	r2, #0
 800677e:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	461a      	mov	r2, r3
 8006786:	4b12      	ldr	r3, [pc, #72]	@ (80067d0 <prv_send_can_message+0x7c>)
 8006788:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006792:	4a0f      	ldr	r2, [pc, #60]	@ (80067d0 <prv_send_can_message+0x7c>)
 8006794:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	0b9b      	lsrs	r3, r3, #14
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	4a0b      	ldr	r2, [pc, #44]	@ (80067d0 <prv_send_can_message+0x7c>)
 80067a2:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6898      	ldr	r0, [r3, #8]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	1d5a      	adds	r2, r3, #5
 80067ae:	f107 0308 	add.w	r3, r7, #8
 80067b2:	4907      	ldr	r1, [pc, #28]	@ (80067d0 <prv_send_can_message+0x7c>)
 80067b4:	f000 ff31 	bl	800761a <HAL_CAN_AddTxMessage>
 80067b8:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 80067c4:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	2000046c 	.word	0x2000046c

080067d4 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	8a5b      	ldrh	r3, [r3, #18]
 80067f6:	f043 0308 	orr.w	r3, r3, #8
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8006800:	23f7      	movs	r3, #247	@ 0xf7
 8006802:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006804:	f3ef 8310 	mrs	r3, PRIMASK
 8006808:	613b      	str	r3, [r7, #16]
  return(result);
 800680a:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006810:	b672      	cpsid	i
}
 8006812:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff9c 	bl	8006754 <prv_send_can_message>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695a      	ldr	r2, [r3, #20]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	61da      	str	r2, [r3, #28]
 800682a:	e00d      	b.n	8006848 <CO_CANsend+0x74>
    } else {
        /* Only increment count if buffer wasn't already full */
        if (!buffer->bufferFull) {
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <CO_CANsend+0x74>
            buffer->bufferFull = true;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2201      	movs	r2, #1
 8006838:	611a      	str	r2, [r3, #16]
            CANmodule->CANtxCount++;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800683e:	b29b      	uxth	r3, r3
 8006840:	3301      	adds	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	849a      	strh	r2, [r3, #36]	@ 0x24
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	bf00      	nop

    return err;
 8006856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d02e      	beq.n	80068e6 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8a5b      	ldrh	r3, [r3, #18]
 800688c:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	629a      	str	r2, [r3, #40]	@ 0x28

        if (err & CAN_ESR_BOFF) {
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 800689e:	89fb      	ldrh	r3, [r7, #14]
 80068a0:	f043 0304 	orr.w	r3, r3, #4
 80068a4:	81fb      	strh	r3, [r7, #14]
 80068a6:	e01b      	b.n	80068e0 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	f423 7341 	bic.w	r3, r3, #772	@ 0x304
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80068be:	89fb      	ldrh	r3, [r7, #14]
 80068c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80068d4:	89fb      	ldrh	r3, [r7, #14]
 80068d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068da:	f043 0302 	orr.w	r3, r3, #2
 80068de:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	89fa      	ldrh	r2, [r7, #14]
 80068e4:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08c      	sub	sp, #48	@ 0x30
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8006906:	f107 0314 	add.w	r3, r7, #20
 800690a:	3305      	adds	r3, #5
 800690c:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <prv_read_can_received_msg+0xd0>)
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 ff85 	bl	8007820 <HAL_CAN_GetRxMessage>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d14c      	bne.n	80069b6 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 800691c:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <prv_read_can_received_msg+0xd0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a27      	ldr	r2, [pc, #156]	@ (80069c0 <prv_read_can_received_msg+0xd0>)
 8006922:	68d2      	ldr	r2, [r2, #12]
 8006924:	2a02      	cmp	r2, #2
 8006926:	d102      	bne.n	800692e <prv_read_can_received_msg+0x3e>
 8006928:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800692c:	e000      	b.n	8006930 <prv_read_can_received_msg+0x40>
 800692e:	2200      	movs	r2, #0
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8006934:	4b22      	ldr	r3, [pc, #136]	@ (80069c0 <prv_read_can_received_msg+0xd0>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8006940:	4b20      	ldr	r3, [pc, #128]	@ (80069c4 <prv_read_can_received_msg+0xd4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 800694a:	be00      	bkpt	0x0000
 800694c:	e01f      	b.n	800698e <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800694e:	4b1d      	ldr	r3, [pc, #116]	@ (80069c4 <prv_read_can_received_msg+0xd4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8006956:	4b1b      	ldr	r3, [pc, #108]	@ (80069c4 <prv_read_can_received_msg+0xd4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	891b      	ldrh	r3, [r3, #8]
 800695c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800695e:	e013      	b.n	8006988 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	4053      	eors	r3, r2
 800696a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696c:	8852      	ldrh	r2, [r2, #2]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                break;
 800697a:	e008      	b.n	800698e <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800697c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800697e:	3b01      	subs	r3, #1
 8006980:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006984:	330c      	adds	r3, #12
 8006986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006988:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e8      	bne.n	8006960 <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800698e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006992:	2b00      	cmp	r3, #0
 8006994:	d010      	beq.n	80069b8 <prv_read_can_received_msg+0xc8>
 8006996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00d      	beq.n	80069b8 <prv_read_can_received_msg+0xc8>
 800699c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069aa:	6852      	ldr	r2, [r2, #4]
 80069ac:	f107 0114 	add.w	r1, r7, #20
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
 80069b4:	e000      	b.n	80069b8 <prv_read_can_received_msg+0xc8>
        return;
 80069b6:	bf00      	nop
    }
}
 80069b8:	3730      	adds	r7, #48	@ 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000484 	.word	0x20000484
 80069c4:	20000468 	.word	0x20000468

080069c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff ff8b 	bl	80068f0 <prv_read_can_received_msg>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 80069ea:	2200      	movs	r2, #0
 80069ec:	2101      	movs	r1, #1
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff ff7e 	bl	80068f0 <prv_read_can_received_msg>
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d039      	beq.n	8006a90 <CO_CANinterrupt_TX+0x94>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a22:	f3ef 8310 	mrs	r3, PRIMASK
 8006a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a28:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8006a2e:	b672      	cpsid	i
}
 8006a30:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	8a1b      	ldrh	r3, [r3, #16]
 8006a36:	827b      	strh	r3, [r7, #18]
 8006a38:	e01e      	b.n	8006a78 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d014      	beq.n	8006a6c <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 8006a42:	6979      	ldr	r1, [r7, #20]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fe85 	bl	8006754 <prv_send_can_message>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d017      	beq.n	8006a80 <CO_CANinterrupt_TX+0x84>
                    buffer->bufferFull = false;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2200      	movs	r2, #0
 8006a54:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	849a      	strh	r2, [r3, #36]	@ 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	827b      	strh	r3, [r7, #18]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	3318      	adds	r3, #24
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	8a7b      	ldrh	r3, [r7, #18]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1dd      	bne.n	8006a3a <CO_CANinterrupt_TX+0x3e>
 8006a7e:	e000      	b.n	8006a82 <CO_CANinterrupt_TX+0x86>
                }
                else
                    break;  // if we could not send the message, break out of the loop (the tx buffers are full)
 8006a80:	bf00      	nop
            }
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f383 8810 	msr	PRIMASK, r3
}
 8006a8e:	bf00      	nop
    }
}
 8006a90:	bf00      	nop
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006aa0:	4b04      	ldr	r3, [pc, #16]	@ (8006ab4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ffa8 	bl	80069fc <CO_CANinterrupt_TX>
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000468 	.word	0x20000468

08006ab8 <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006ac0:	4b04      	ldr	r3, [pc, #16]	@ (8006ad4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7ff ff98 	bl	80069fc <CO_CANinterrupt_TX>
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000468 	.word	0x20000468

08006ad8 <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff ff88 	bl	80069fc <CO_CANinterrupt_TX>
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000468 	.word	0x20000468

08006af8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8006afc:	4b17      	ldr	r3, [pc, #92]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006afe:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <MX_CAN_Init+0x68>)
 8006b00:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8006b02:	4b16      	ldr	r3, [pc, #88]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b04:	2209      	movs	r2, #9
 8006b06:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8006b08:	4b14      	ldr	r3, [pc, #80]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006b0e:	4b13      	ldr	r3, [pc, #76]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8006b14:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006b1a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b22:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8006b24:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8006b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8006b30:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8006b36:	4b09      	ldr	r3, [pc, #36]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8006b3c:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8006b42:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8006b48:	4804      	ldr	r0, [pc, #16]	@ (8006b5c <MX_CAN_Init+0x64>)
 8006b4a:	f000 fb15 	bl	8007178 <HAL_CAN_Init>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8006b54:	f000 f903 	bl	8006d5e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8006b58:	bf00      	nop
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200004a0 	.word	0x200004a0
 8006b60:	40006400 	.word	0x40006400

08006b64 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	@ 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2d      	ldr	r2, [pc, #180]	@ (8006c34 <HAL_CAN_MspInit+0xd0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d153      	bne.n	8006c2c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006b84:	4b2c      	ldr	r3, [pc, #176]	@ (8006c38 <HAL_CAN_MspInit+0xd4>)
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	4a2b      	ldr	r2, [pc, #172]	@ (8006c38 <HAL_CAN_MspInit+0xd4>)
 8006b8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006b8e:	61d3      	str	r3, [r2, #28]
 8006b90:	4b29      	ldr	r3, [pc, #164]	@ (8006c38 <HAL_CAN_MspInit+0xd4>)
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b9c:	4b26      	ldr	r3, [pc, #152]	@ (8006c38 <HAL_CAN_MspInit+0xd4>)
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	4a25      	ldr	r2, [pc, #148]	@ (8006c38 <HAL_CAN_MspInit+0xd4>)
 8006ba2:	f043 0308 	orr.w	r3, r3, #8
 8006ba6:	6193      	str	r3, [r2, #24]
 8006ba8:	4b23      	ldr	r3, [pc, #140]	@ (8006c38 <HAL_CAN_MspInit+0xd4>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006bb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc2:	f107 0314 	add.w	r3, r7, #20
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	481c      	ldr	r0, [pc, #112]	@ (8006c3c <HAL_CAN_MspInit+0xd8>)
 8006bca:	f001 fa97 	bl	80080fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bdc:	f107 0314 	add.w	r3, r7, #20
 8006be0:	4619      	mov	r1, r3
 8006be2:	4816      	ldr	r0, [pc, #88]	@ (8006c3c <HAL_CAN_MspInit+0xd8>)
 8006be4:	f001 fa8a 	bl	80080fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8006be8:	4b15      	ldr	r3, [pc, #84]	@ (8006c40 <HAL_CAN_MspInit+0xdc>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c06:	4a0e      	ldr	r2, [pc, #56]	@ (8006c40 <HAL_CAN_MspInit+0xdc>)
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2105      	movs	r1, #5
 8006c10:	2014      	movs	r0, #20
 8006c12:	f001 fa38 	bl	8008086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006c16:	2014      	movs	r0, #20
 8006c18:	f001 fa51 	bl	80080be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2105      	movs	r1, #5
 8006c20:	2016      	movs	r0, #22
 8006c22:	f001 fa30 	bl	8008086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8006c26:	2016      	movs	r0, #22
 8006c28:	f001 fa49 	bl	80080be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	3728      	adds	r7, #40	@ 0x28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40006400 	.word	0x40006400
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	40010c00 	.word	0x40010c00
 8006c40:	40010000 	.word	0x40010000

08006c44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <MX_GPIO_Init+0x40>)
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006c84 <MX_GPIO_Init+0x40>)
 8006c50:	f043 0320 	orr.w	r3, r3, #32
 8006c54:	6193      	str	r3, [r2, #24]
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <MX_GPIO_Init+0x40>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	607b      	str	r3, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c62:	4b08      	ldr	r3, [pc, #32]	@ (8006c84 <MX_GPIO_Init+0x40>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	4a07      	ldr	r2, [pc, #28]	@ (8006c84 <MX_GPIO_Init+0x40>)
 8006c68:	f043 0308 	orr.w	r3, r3, #8
 8006c6c:	6193      	str	r3, [r2, #24]
 8006c6e:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <MX_GPIO_Init+0x40>)
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]

}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bc80      	pop	{r7}
 8006c82:	4770      	bx	lr
 8006c84:	40021000 	.word	0x40021000

08006c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c8e:	f000 fa11 	bl	80070b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c92:	f000 f81f 	bl	8006cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c96:	f7ff ffd5 	bl	8006c44 <MX_GPIO_Init>
  MX_CAN_Init();
 8006c9a:	f7ff ff2d 	bl	8006af8 <MX_CAN_Init>
  MX_TIM6_Init();
 8006c9e:	f000 f987 	bl	8006fb0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canopenNodeSTM32;
  canopenNodeSTM32.CANHandle = &hcan;
 8006ca2:	4b09      	ldr	r3, [pc, #36]	@ (8006cc8 <main+0x40>)
 8006ca4:	60bb      	str	r3, [r7, #8]
  canopenNodeSTM32.HWInitFunction = MX_CAN_Init; // CubeMX生成的CAN初始化函数
 8006ca6:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <main+0x44>)
 8006ca8:	60fb      	str	r3, [r7, #12]
  canopenNodeSTM32.timerHandle = &htim6;          // 1ms定时器
 8006caa:	4b09      	ldr	r3, [pc, #36]	@ (8006cd0 <main+0x48>)
 8006cac:	607b      	str	r3, [r7, #4]
  canopenNodeSTM32.desiredNodeID = 1;             // 节点ID
 8006cae:	2301      	movs	r3, #1
 8006cb0:	703b      	strb	r3, [r7, #0]
  canopenNodeSTM32.baudrate = 500;                // 125kbps
 8006cb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006cb6:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canopenNodeSTM32);
 8006cb8:	463b      	mov	r3, r7
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff f9f0 	bl	80060a0 <canopen_app_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  canopen_app_process();
 8006cc0:	f7ff fb40 	bl	8006344 <canopen_app_process>
 8006cc4:	e7fc      	b.n	8006cc0 <main+0x38>
 8006cc6:	bf00      	nop
 8006cc8:	200004a0 	.word	0x200004a0
 8006ccc:	08006af9 	.word	0x08006af9
 8006cd0:	200004cc 	.word	0x200004cc

08006cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b090      	sub	sp, #64	@ 0x40
 8006cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cda:	f107 0318 	add.w	r3, r7, #24
 8006cde:	2228      	movs	r2, #40	@ 0x28
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f002 fe2e 	bl	8009944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ce8:	1d3b      	adds	r3, r7, #4
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	60da      	str	r2, [r3, #12]
 8006cf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006cfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006cfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006d00:	2300      	movs	r3, #0
 8006d02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d04:	2301      	movs	r3, #1
 8006d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006d10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006d12:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d18:	f107 0318 	add.w	r3, r7, #24
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 fb81 	bl	8008424 <HAL_RCC_OscConfig>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006d28:	f000 f819 	bl	8006d5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d2c:	230f      	movs	r3, #15
 8006d2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d30:	2302      	movs	r3, #2
 8006d32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006d38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006d42:	1d3b      	adds	r3, r7, #4
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fdee 	bl	8008928 <HAL_RCC_ClockConfig>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006d52:	f000 f804 	bl	8006d5e <Error_Handler>
  }
}
 8006d56:	bf00      	nop
 8006d58:	3740      	adds	r7, #64	@ 0x40
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006d62:	b672      	cpsid	i
}
 8006d64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d66:	bf00      	nop
 8006d68:	e7fd      	b.n	8006d66 <Error_Handler+0x8>
	...

08006d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006d72:	4b15      	ldr	r3, [pc, #84]	@ (8006dc8 <HAL_MspInit+0x5c>)
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	4a14      	ldr	r2, [pc, #80]	@ (8006dc8 <HAL_MspInit+0x5c>)
 8006d78:	f043 0301 	orr.w	r3, r3, #1
 8006d7c:	6193      	str	r3, [r2, #24]
 8006d7e:	4b12      	ldr	r3, [pc, #72]	@ (8006dc8 <HAL_MspInit+0x5c>)
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	60bb      	str	r3, [r7, #8]
 8006d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <HAL_MspInit+0x5c>)
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006dc8 <HAL_MspInit+0x5c>)
 8006d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d94:	61d3      	str	r3, [r2, #28]
 8006d96:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <HAL_MspInit+0x5c>)
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8006da2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <HAL_MspInit+0x60>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	4a04      	ldr	r2, [pc, #16]	@ (8006dcc <HAL_MspInit+0x60>)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	40010000 	.word	0x40010000

08006dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006dd4:	bf00      	nop
 8006dd6:	e7fd      	b.n	8006dd4 <NMI_Handler+0x4>

08006dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <HardFault_Handler+0x4>

08006de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <MemManage_Handler+0x4>

08006de8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <BusFault_Handler+0x4>

08006df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <UsageFault_Handler+0x4>

08006df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dfc:	bf00      	nop
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr

08006e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e14:	bf00      	nop
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr

08006e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e20:	f000 f98e 	bl	8007140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e24:	bf00      	nop
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006e2c:	4802      	ldr	r0, [pc, #8]	@ (8006e38 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006e2e:	f000 fe3d 	bl	8007aac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006e32:	bf00      	nop
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	200004a0 	.word	0x200004a0

08006e3c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006e40:	4802      	ldr	r0, [pc, #8]	@ (8006e4c <CAN1_SCE_IRQHandler+0x10>)
 8006e42:	f000 fe33 	bl	8007aac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006e46:	bf00      	nop
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200004a0 	.word	0x200004a0

08006e50 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006e54:	4802      	ldr	r0, [pc, #8]	@ (8006e60 <TIM6_IRQHandler+0x10>)
 8006e56:	f001 ffa1 	bl	8008d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200004cc 	.word	0x200004cc

08006e64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	e00a      	b.n	8006e8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e76:	f3af 8000 	nop.w
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	60ba      	str	r2, [r7, #8]
 8006e82:	b2ca      	uxtb	r2, r1
 8006e84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	dbf0      	blt.n	8006e76 <_read+0x12>
  }

  return len;
 8006e94:	687b      	ldr	r3, [r7, #4]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	e009      	b.n	8006ec4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	60ba      	str	r2, [r7, #8]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	dbf1      	blt.n	8006eb0 <_write+0x12>
  }
  return len;
 8006ecc:	687b      	ldr	r3, [r7, #4]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <_close>:

int _close(int file)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr

08006eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006efc:	605a      	str	r2, [r3, #4]
  return 0;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <_isatty>:

int _isatty(int file)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f12:	2301      	movs	r3, #1
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr

08006f1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bc80      	pop	{r7}
 8006f34:	4770      	bx	lr
	...

08006f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f40:	4a14      	ldr	r2, [pc, #80]	@ (8006f94 <_sbrk+0x5c>)
 8006f42:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <_sbrk+0x60>)
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f4c:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <_sbrk+0x64>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d102      	bne.n	8006f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f54:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <_sbrk+0x64>)
 8006f56:	4a12      	ldr	r2, [pc, #72]	@ (8006fa0 <_sbrk+0x68>)
 8006f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f5a:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <_sbrk+0x64>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4413      	add	r3, r2
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d207      	bcs.n	8006f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f68:	f002 fd4a 	bl	8009a00 <__errno>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	220c      	movs	r2, #12
 8006f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	e009      	b.n	8006f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f78:	4b08      	ldr	r3, [pc, #32]	@ (8006f9c <_sbrk+0x64>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f7e:	4b07      	ldr	r3, [pc, #28]	@ (8006f9c <_sbrk+0x64>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	4a05      	ldr	r2, [pc, #20]	@ (8006f9c <_sbrk+0x64>)
 8006f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	2000c000 	.word	0x2000c000
 8006f98:	00000400 	.word	0x00000400
 8006f9c:	200004c8 	.word	0x200004c8
 8006fa0:	20000668 	.word	0x20000668

08006fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fa8:	bf00      	nop
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bc80      	pop	{r7}
 8006fae:	4770      	bx	lr

08006fb0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006fbe:	4b15      	ldr	r3, [pc, #84]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006fc0:	4a15      	ldr	r2, [pc, #84]	@ (8007018 <MX_TIM6_Init+0x68>)
 8006fc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8006fc4:	4b13      	ldr	r3, [pc, #76]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fca:	4b12      	ldr	r3, [pc, #72]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8006fd0:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006fd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006fde:	480d      	ldr	r0, [pc, #52]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006fe0:	f001 fdfe 	bl	8008be0 <HAL_TIM_Base_Init>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006fea:	f7ff feb8 	bl	8006d5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4806      	ldr	r0, [pc, #24]	@ (8007014 <MX_TIM6_Init+0x64>)
 8006ffc:	f002 f872 	bl	80090e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8007006:	f7ff feaa 	bl	8006d5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200004cc 	.word	0x200004cc
 8007018:	40001000 	.word	0x40001000

0800701c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a0d      	ldr	r2, [pc, #52]	@ (8007060 <HAL_TIM_Base_MspInit+0x44>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d113      	bne.n	8007056 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <HAL_TIM_Base_MspInit+0x48>)
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4a0c      	ldr	r2, [pc, #48]	@ (8007064 <HAL_TIM_Base_MspInit+0x48>)
 8007034:	f043 0310 	orr.w	r3, r3, #16
 8007038:	61d3      	str	r3, [r2, #28]
 800703a:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <HAL_TIM_Base_MspInit+0x48>)
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 5, 0);
 8007046:	2200      	movs	r2, #0
 8007048:	2105      	movs	r1, #5
 800704a:	2036      	movs	r0, #54	@ 0x36
 800704c:	f001 f81b 	bl	8008086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007050:	2036      	movs	r0, #54	@ 0x36
 8007052:	f001 f834 	bl	80080be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40001000 	.word	0x40001000
 8007064:	40021000 	.word	0x40021000

08007068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007068:	f7ff ff9c 	bl	8006fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800706c:	480b      	ldr	r0, [pc, #44]	@ (800709c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800706e:	490c      	ldr	r1, [pc, #48]	@ (80070a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007070:	4a0c      	ldr	r2, [pc, #48]	@ (80070a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007074:	e002      	b.n	800707c <LoopCopyDataInit>

08007076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800707a:	3304      	adds	r3, #4

0800707c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800707c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800707e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007080:	d3f9      	bcc.n	8007076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007082:	4a09      	ldr	r2, [pc, #36]	@ (80070a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007084:	4c09      	ldr	r4, [pc, #36]	@ (80070ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007088:	e001      	b.n	800708e <LoopFillZerobss>

0800708a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800708a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800708c:	3204      	adds	r2, #4

0800708e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800708e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007090:	d3fb      	bcc.n	800708a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007092:	f002 fcbb 	bl	8009a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007096:	f7ff fdf7 	bl	8006c88 <main>
  bx lr
 800709a:	4770      	bx	lr
  ldr r0, =_sdata
 800709c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070a0:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 80070a4:	0800ab28 	.word	0x0800ab28
  ldr r2, =_sbss
 80070a8:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 80070ac:	20000664 	.word	0x20000664

080070b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070b0:	e7fe      	b.n	80070b0 <ADC1_2_IRQHandler>
	...

080070b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070b8:	4b08      	ldr	r3, [pc, #32]	@ (80070dc <HAL_Init+0x28>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a07      	ldr	r2, [pc, #28]	@ (80070dc <HAL_Init+0x28>)
 80070be:	f043 0310 	orr.w	r3, r3, #16
 80070c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070c4:	2003      	movs	r0, #3
 80070c6:	f000 ffd3 	bl	8008070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070ca:	200f      	movs	r0, #15
 80070cc:	f000 f808 	bl	80070e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070d0:	f7ff fe4c 	bl	8006d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40022000 	.word	0x40022000

080070e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070e8:	4b12      	ldr	r3, [pc, #72]	@ (8007134 <HAL_InitTick+0x54>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <HAL_InitTick+0x58>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	4619      	mov	r1, r3
 80070f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80070f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80070fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 ffef 	bl	80080e2 <HAL_SYSTICK_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e00e      	b.n	800712c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d80a      	bhi.n	800712a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007114:	2200      	movs	r2, #0
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	f000 ffb3 	bl	8008086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007120:	4a06      	ldr	r2, [pc, #24]	@ (800713c <HAL_InitTick+0x5c>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e000      	b.n	800712c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	200003d0 	.word	0x200003d0
 8007138:	200003d8 	.word	0x200003d8
 800713c:	200003d4 	.word	0x200003d4

08007140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <HAL_IncTick+0x1c>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	4b05      	ldr	r3, [pc, #20]	@ (8007160 <HAL_IncTick+0x20>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4413      	add	r3, r2
 8007150:	4a03      	ldr	r2, [pc, #12]	@ (8007160 <HAL_IncTick+0x20>)
 8007152:	6013      	str	r3, [r2, #0]
}
 8007154:	bf00      	nop
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr
 800715c:	200003d8 	.word	0x200003d8
 8007160:	20000514 	.word	0x20000514

08007164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  return uwTick;
 8007168:	4b02      	ldr	r3, [pc, #8]	@ (8007174 <HAL_GetTick+0x10>)
 800716a:	681b      	ldr	r3, [r3, #0]
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr
 8007174:	20000514 	.word	0x20000514

08007178 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e0ed      	b.n	8007366 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff fce4 	bl	8006b64 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071ac:	f7ff ffda 	bl	8007164 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071b2:	e012      	b.n	80071da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071b4:	f7ff ffd6 	bl	8007164 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b0a      	cmp	r3, #10
 80071c0:	d90b      	bls.n	80071da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2205      	movs	r2, #5
 80071d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e0c5      	b.n	8007366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0e5      	beq.n	80071b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0202 	bic.w	r2, r2, #2
 80071f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071f8:	f7ff ffb4 	bl	8007164 <HAL_GetTick>
 80071fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80071fe:	e012      	b.n	8007226 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007200:	f7ff ffb0 	bl	8007164 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b0a      	cmp	r3, #10
 800720c:	d90b      	bls.n	8007226 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007212:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2205      	movs	r2, #5
 800721e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e09f      	b.n	8007366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	7e1b      	ldrb	r3, [r3, #24]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d108      	bne.n	800724e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	e007      	b.n	800725e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800725c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7e5b      	ldrb	r3, [r3, #25]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d108      	bne.n	8007278 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e007      	b.n	8007288 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007286:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7e9b      	ldrb	r3, [r3, #26]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d108      	bne.n	80072a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0220 	orr.w	r2, r2, #32
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e007      	b.n	80072b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0220 	bic.w	r2, r2, #32
 80072b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	7edb      	ldrb	r3, [r3, #27]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d108      	bne.n	80072cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0210 	bic.w	r2, r2, #16
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e007      	b.n	80072dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0210 	orr.w	r2, r2, #16
 80072da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7f1b      	ldrb	r3, [r3, #28]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d108      	bne.n	80072f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0208 	orr.w	r2, r2, #8
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e007      	b.n	8007306 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0208 	bic.w	r2, r2, #8
 8007304:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	7f5b      	ldrb	r3, [r3, #29]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d108      	bne.n	8007320 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0204 	orr.w	r2, r2, #4
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	e007      	b.n	8007330 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0204 	bic.w	r2, r2, #4
 800732e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	ea42 0103 	orr.w	r1, r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	1e5a      	subs	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	430a      	orrs	r2, r1
 8007354:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800736e:	b480      	push	{r7}
 8007370:	b087      	sub	sp, #28
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007384:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007386:	7cfb      	ldrb	r3, [r7, #19]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d003      	beq.n	8007394 <HAL_CAN_ConfigFilter+0x26>
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	2b02      	cmp	r3, #2
 8007390:	f040 80aa 	bne.w	80074e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800739a:	f043 0201 	orr.w	r2, r3, #1
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2201      	movs	r2, #1
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	43db      	mvns	r3, r3
 80073be:	401a      	ands	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d123      	bne.n	8007416 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	43db      	mvns	r3, r3
 80073d8:	401a      	ands	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	3248      	adds	r2, #72	@ 0x48
 80073f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800740a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800740c:	6979      	ldr	r1, [r7, #20]
 800740e:	3348      	adds	r3, #72	@ 0x48
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	440b      	add	r3, r1
 8007414:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d122      	bne.n	8007464 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	431a      	orrs	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800743e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	3248      	adds	r2, #72	@ 0x48
 8007444:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007458:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	3348      	adds	r3, #72	@ 0x48
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	440b      	add	r3, r1
 8007462:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d109      	bne.n	8007480 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	43db      	mvns	r3, r3
 8007476:	401a      	ands	r2, r3
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800747e:	e007      	b.n	8007490 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	431a      	orrs	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d109      	bne.n	80074ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80074aa:	e007      	b.n	80074bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d107      	bne.n	80074d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074da:	f023 0201 	bic.w	r2, r3, #1
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e006      	b.n	80074f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d12e      	bne.n	8007572 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0201 	bic.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800752c:	f7ff fe1a 	bl	8007164 <HAL_GetTick>
 8007530:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007532:	e012      	b.n	800755a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007534:	f7ff fe16 	bl	8007164 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b0a      	cmp	r3, #10
 8007540:	d90b      	bls.n	800755a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007546:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2205      	movs	r2, #5
 8007552:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e012      	b.n	8007580 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e006      	b.n	8007580 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
  }
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d133      	bne.n	8007604 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075ac:	f7ff fdda 	bl	8007164 <HAL_GetTick>
 80075b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075b2:	e012      	b.n	80075da <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075b4:	f7ff fdd6 	bl	8007164 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b0a      	cmp	r3, #10
 80075c0:	d90b      	bls.n	80075da <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2205      	movs	r2, #5
 80075d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e01b      	b.n	8007612 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0e5      	beq.n	80075b4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0202 	bic.w	r2, r2, #2
 80075f6:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	e006      	b.n	8007612 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
  }
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800761a:	b480      	push	{r7}
 800761c:	b089      	sub	sp, #36	@ 0x24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800762e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007638:	7ffb      	ldrb	r3, [r7, #31]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d003      	beq.n	8007646 <HAL_CAN_AddTxMessage+0x2c>
 800763e:	7ffb      	ldrb	r3, [r7, #31]
 8007640:	2b02      	cmp	r3, #2
 8007642:	f040 80ad 	bne.w	80077a0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8095 	beq.w	8007790 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	0e1b      	lsrs	r3, r3, #24
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007670:	2201      	movs	r2, #1
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	409a      	lsls	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800768c:	68f9      	ldr	r1, [r7, #12]
 800768e:	6809      	ldr	r1, [r1, #0]
 8007690:	431a      	orrs	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	3318      	adds	r3, #24
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	440b      	add	r3, r1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	e00f      	b.n	80076be <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80076b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	3318      	adds	r3, #24
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	440b      	add	r3, r1
 80076bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6819      	ldr	r1, [r3, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	3318      	adds	r3, #24
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	440b      	add	r3, r1
 80076ce:	3304      	adds	r3, #4
 80076d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	7d1b      	ldrb	r3, [r3, #20]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d111      	bne.n	80076fe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3318      	adds	r3, #24
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	4413      	add	r3, r2
 80076e6:	3304      	adds	r3, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	6811      	ldr	r1, [r2, #0]
 80076ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3318      	adds	r3, #24
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	440b      	add	r3, r1
 80076fa:	3304      	adds	r3, #4
 80076fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3307      	adds	r3, #7
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	061a      	lsls	r2, r3, #24
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3306      	adds	r3, #6
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3305      	adds	r3, #5
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	4313      	orrs	r3, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	3204      	adds	r2, #4
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	4610      	mov	r0, r2
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	6811      	ldr	r1, [r2, #0]
 8007726:	ea43 0200 	orr.w	r2, r3, r0
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	440b      	add	r3, r1
 8007730:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007734:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3303      	adds	r3, #3
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	061a      	lsls	r2, r3, #24
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3302      	adds	r3, #2
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	041b      	lsls	r3, r3, #16
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3301      	adds	r3, #1
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	4313      	orrs	r3, r2
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	4610      	mov	r0, r2
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	6811      	ldr	r1, [r2, #0]
 800775c:	ea43 0200 	orr.w	r2, r3, r0
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	440b      	add	r3, r1
 8007766:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800776a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	3318      	adds	r3, #24
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	4413      	add	r3, r2
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	6811      	ldr	r1, [r2, #0]
 800777e:	f043 0201 	orr.w	r2, r3, #1
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	3318      	adds	r3, #24
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	440b      	add	r3, r1
 800778a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e00e      	b.n	80077ae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007794:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e006      	b.n	80077ae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3724      	adds	r7, #36	@ 0x24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ca:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80077d2:	7afb      	ldrb	r3, [r7, #11]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d11d      	bne.n	8007814 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3301      	adds	r3, #1
 80077fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007814:	68fb      	ldr	r3, [r7, #12]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007834:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d003      	beq.n	8007844 <HAL_CAN_GetRxMessage+0x24>
 800783c:	7dfb      	ldrb	r3, [r7, #23]
 800783e:	2b02      	cmp	r3, #2
 8007840:	f040 8103 	bne.w	8007a4a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10e      	bne.n	8007868 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d116      	bne.n	8007886 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800785c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0f7      	b.n	8007a58 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e0e8      	b.n	8007a58 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	331b      	adds	r3, #27
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	4413      	add	r3, r2
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0204 	and.w	r2, r3, #4
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10c      	bne.n	80078be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	331b      	adds	r3, #27
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	4413      	add	r3, r2
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	0d5b      	lsrs	r3, r3, #21
 80078b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	e00b      	b.n	80078d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	331b      	adds	r3, #27
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	4413      	add	r3, r2
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	08db      	lsrs	r3, r3, #3
 80078ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	331b      	adds	r3, #27
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	4413      	add	r3, r2
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0202 	and.w	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	331b      	adds	r3, #27
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2208      	movs	r2, #8
 8007908:	611a      	str	r2, [r3, #16]
 800790a:	e00b      	b.n	8007924 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	331b      	adds	r3, #27
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	4413      	add	r3, r2
 8007918:	3304      	adds	r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 020f 	and.w	r2, r3, #15
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	331b      	adds	r3, #27
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	b2da      	uxtb	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	331b      	adds	r3, #27
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	4413      	add	r3, r2
 8007948:	3304      	adds	r3, #4
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	b29a      	uxth	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	4413      	add	r3, r2
 800795e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	4413      	add	r3, r2
 8007974:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	0a1a      	lsrs	r2, r3, #8
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	3301      	adds	r3, #1
 8007980:	b2d2      	uxtb	r2, r2
 8007982:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4413      	add	r3, r2
 800798e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	0c1a      	lsrs	r2, r3, #16
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	3302      	adds	r3, #2
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	0e1a      	lsrs	r2, r3, #24
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	3303      	adds	r3, #3
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	3304      	adds	r3, #4
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4413      	add	r3, r2
 80079da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	0a1a      	lsrs	r2, r3, #8
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	3305      	adds	r3, #5
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	0c1a      	lsrs	r2, r3, #16
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	3306      	adds	r3, #6
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	0e1a      	lsrs	r2, r3, #24
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	3307      	adds	r3, #7
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d108      	bne.n	8007a36 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0220 	orr.w	r2, r2, #32
 8007a32:	60da      	str	r2, [r3, #12]
 8007a34:	e007      	b.n	8007a46 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0220 	orr.w	r2, r2, #32
 8007a44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e006      	b.n	8007a58 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
  }
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a72:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d002      	beq.n	8007a80 <HAL_CAN_ActivateNotification+0x1e>
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d109      	bne.n	8007a94 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6959      	ldr	r1, [r3, #20]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e006      	b.n	8007aa2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
  }
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08a      	sub	sp, #40	@ 0x28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d07c      	beq.n	8007bec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d023      	beq.n	8007b44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2201      	movs	r2, #1
 8007b02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fe ffc2 	bl	8006a98 <HAL_CAN_TxMailbox0CompleteCallback>
 8007b14:	e016      	b.n	8007b44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b28:	e00c      	b.n	8007b44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b3c:	e002      	b.n	8007b44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f96b 	bl	8007e1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d024      	beq.n	8007b98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fe ffa8 	bl	8006ab8 <HAL_CAN_TxMailbox1CompleteCallback>
 8007b68:	e016      	b.n	8007b98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7c:	e00c      	b.n	8007b98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b90:	e002      	b.n	8007b98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f94a 	bl	8007e2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d024      	beq.n	8007bec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007baa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fe ff8e 	bl	8006ad8 <HAL_CAN_TxMailbox2CompleteCallback>
 8007bbc:	e016      	b.n	8007bec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bd0:	e00c      	b.n	8007bec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007be4:	e002      	b.n	8007bec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f929 	bl	8007e3e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	f003 0308 	and.w	r3, r3, #8
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00c      	beq.n	8007c10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2210      	movs	r2, #16
 8007c0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d006      	beq.n	8007c32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2208      	movs	r2, #8
 8007c2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f90f 	bl	8007e50 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7fe febc 	bl	80069c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2210      	movs	r2, #16
 8007c72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d006      	beq.n	8007c96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2208      	movs	r2, #8
 8007c8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f8e6 	bl	8007e62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f003 0310 	and.w	r3, r3, #16
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d009      	beq.n	8007cb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fe fe97 	bl	80069e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d006      	beq.n	8007cd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2210      	movs	r2, #16
 8007cce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f8cf 	bl	8007e74 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d006      	beq.n	8007cf8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2208      	movs	r2, #8
 8007cf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f8c7 	bl	8007e86 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d07b      	beq.n	8007dfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d072      	beq.n	8007df2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	f043 0301 	orr.w	r3, r3, #1
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d008      	beq.n	8007d44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	f043 0302 	orr.w	r3, r3, #2
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	f043 0304 	orr.w	r3, r3, #4
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d043      	beq.n	8007df2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d03e      	beq.n	8007df2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d7a:	2b60      	cmp	r3, #96	@ 0x60
 8007d7c:	d02b      	beq.n	8007dd6 <HAL_CAN_IRQHandler+0x32a>
 8007d7e:	2b60      	cmp	r3, #96	@ 0x60
 8007d80:	d82e      	bhi.n	8007de0 <HAL_CAN_IRQHandler+0x334>
 8007d82:	2b50      	cmp	r3, #80	@ 0x50
 8007d84:	d022      	beq.n	8007dcc <HAL_CAN_IRQHandler+0x320>
 8007d86:	2b50      	cmp	r3, #80	@ 0x50
 8007d88:	d82a      	bhi.n	8007de0 <HAL_CAN_IRQHandler+0x334>
 8007d8a:	2b40      	cmp	r3, #64	@ 0x40
 8007d8c:	d019      	beq.n	8007dc2 <HAL_CAN_IRQHandler+0x316>
 8007d8e:	2b40      	cmp	r3, #64	@ 0x40
 8007d90:	d826      	bhi.n	8007de0 <HAL_CAN_IRQHandler+0x334>
 8007d92:	2b30      	cmp	r3, #48	@ 0x30
 8007d94:	d010      	beq.n	8007db8 <HAL_CAN_IRQHandler+0x30c>
 8007d96:	2b30      	cmp	r3, #48	@ 0x30
 8007d98:	d822      	bhi.n	8007de0 <HAL_CAN_IRQHandler+0x334>
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d002      	beq.n	8007da4 <HAL_CAN_IRQHandler+0x2f8>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d005      	beq.n	8007dae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007da2:	e01d      	b.n	8007de0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	f043 0308 	orr.w	r3, r3, #8
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007dac:	e019      	b.n	8007de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	f043 0310 	orr.w	r3, r3, #16
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007db6:	e014      	b.n	8007de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	f043 0320 	orr.w	r3, r3, #32
 8007dbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007dc0:	e00f      	b.n	8007de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007dca:	e00a      	b.n	8007de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007dd4:	e005      	b.n	8007de2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ddc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007dde:	e000      	b.n	8007de2 <HAL_CAN_IRQHandler+0x336>
            break;
 8007de0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007df0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2204      	movs	r2, #4
 8007df8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f843 	bl	8007e98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007e12:	bf00      	nop
 8007e14:	3728      	adds	r7, #40	@ 0x28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bc80      	pop	{r7}
 8007e3c:	4770      	bx	lr

08007e3e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr

08007e62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
	...

08007eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007ec8:	4013      	ands	r3, r2
 8007eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ede:	4a04      	ldr	r2, [pc, #16]	@ (8007ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	60d3      	str	r3, [r2, #12]
}
 8007ee4:	bf00      	nop
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bc80      	pop	{r7}
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	e000ed00 	.word	0xe000ed00

08007ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ef8:	4b04      	ldr	r3, [pc, #16]	@ (8007f0c <__NVIC_GetPriorityGrouping+0x18>)
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	f003 0307 	and.w	r3, r3, #7
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	e000ed00 	.word	0xe000ed00

08007f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	4603      	mov	r3, r0
 8007f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	db0b      	blt.n	8007f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	f003 021f 	and.w	r2, r3, #31
 8007f28:	4906      	ldr	r1, [pc, #24]	@ (8007f44 <__NVIC_EnableIRQ+0x34>)
 8007f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	2001      	movs	r0, #1
 8007f32:	fa00 f202 	lsl.w	r2, r0, r2
 8007f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr
 8007f44:	e000e100 	.word	0xe000e100

08007f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db0a      	blt.n	8007f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	490c      	ldr	r1, [pc, #48]	@ (8007f94 <__NVIC_SetPriority+0x4c>)
 8007f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f66:	0112      	lsls	r2, r2, #4
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f70:	e00a      	b.n	8007f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4908      	ldr	r1, [pc, #32]	@ (8007f98 <__NVIC_SetPriority+0x50>)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	3b04      	subs	r3, #4
 8007f80:	0112      	lsls	r2, r2, #4
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	440b      	add	r3, r1
 8007f86:	761a      	strb	r2, [r3, #24]
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	e000e100 	.word	0xe000e100
 8007f98:	e000ed00 	.word	0xe000ed00

08007f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b089      	sub	sp, #36	@ 0x24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	f1c3 0307 	rsb	r3, r3, #7
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	bf28      	it	cs
 8007fba:	2304      	movcs	r3, #4
 8007fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	2b06      	cmp	r3, #6
 8007fc4:	d902      	bls.n	8007fcc <NVIC_EncodePriority+0x30>
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	3b03      	subs	r3, #3
 8007fca:	e000      	b.n	8007fce <NVIC_EncodePriority+0x32>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fda:	43da      	mvns	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	401a      	ands	r2, r3
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	fa01 f303 	lsl.w	r3, r1, r3
 8007fee:	43d9      	mvns	r1, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ff4:	4313      	orrs	r3, r2
         );
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3724      	adds	r7, #36	@ 0x24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008004:	f3bf 8f4f 	dsb	sy
}
 8008008:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800800a:	4b06      	ldr	r3, [pc, #24]	@ (8008024 <__NVIC_SystemReset+0x24>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008012:	4904      	ldr	r1, [pc, #16]	@ (8008024 <__NVIC_SystemReset+0x24>)
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <__NVIC_SystemReset+0x28>)
 8008016:	4313      	orrs	r3, r2
 8008018:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800801a:	f3bf 8f4f 	dsb	sy
}
 800801e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <__NVIC_SystemReset+0x20>
 8008024:	e000ed00 	.word	0xe000ed00
 8008028:	05fa0004 	.word	0x05fa0004

0800802c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3b01      	subs	r3, #1
 8008038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800803c:	d301      	bcc.n	8008042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800803e:	2301      	movs	r3, #1
 8008040:	e00f      	b.n	8008062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008042:	4a0a      	ldr	r2, [pc, #40]	@ (800806c <SysTick_Config+0x40>)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3b01      	subs	r3, #1
 8008048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800804a:	210f      	movs	r1, #15
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	f7ff ff7a 	bl	8007f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008054:	4b05      	ldr	r3, [pc, #20]	@ (800806c <SysTick_Config+0x40>)
 8008056:	2200      	movs	r2, #0
 8008058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800805a:	4b04      	ldr	r3, [pc, #16]	@ (800806c <SysTick_Config+0x40>)
 800805c:	2207      	movs	r2, #7
 800805e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	e000e010 	.word	0xe000e010

08008070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff ff17 	bl	8007eac <__NVIC_SetPriorityGrouping>
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008086:	b580      	push	{r7, lr}
 8008088:	b086      	sub	sp, #24
 800808a:	af00      	add	r7, sp, #0
 800808c:	4603      	mov	r3, r0
 800808e:	60b9      	str	r1, [r7, #8]
 8008090:	607a      	str	r2, [r7, #4]
 8008092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008094:	2300      	movs	r3, #0
 8008096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008098:	f7ff ff2c 	bl	8007ef4 <__NVIC_GetPriorityGrouping>
 800809c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	68b9      	ldr	r1, [r7, #8]
 80080a2:	6978      	ldr	r0, [r7, #20]
 80080a4:	f7ff ff7a 	bl	8007f9c <NVIC_EncodePriority>
 80080a8:	4602      	mov	r2, r0
 80080aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff ff49 	bl	8007f48 <__NVIC_SetPriority>
}
 80080b6:	bf00      	nop
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	4603      	mov	r3, r0
 80080c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff ff1f 	bl	8007f10 <__NVIC_EnableIRQ>
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80080de:	f7ff ff8f 	bl	8008000 <__NVIC_SystemReset>

080080e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff ff9e 	bl	800802c <SysTick_Config>
 80080f0:	4603      	mov	r3, r0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b08b      	sub	sp, #44	@ 0x2c
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008106:	2300      	movs	r3, #0
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800810a:	2300      	movs	r3, #0
 800810c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800810e:	e179      	b.n	8008404 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008110:	2201      	movs	r2, #1
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	4013      	ands	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	429a      	cmp	r2, r3
 800812a:	f040 8168 	bne.w	80083fe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a96      	ldr	r2, [pc, #600]	@ (800838c <HAL_GPIO_Init+0x290>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d05e      	beq.n	80081f6 <HAL_GPIO_Init+0xfa>
 8008138:	4a94      	ldr	r2, [pc, #592]	@ (800838c <HAL_GPIO_Init+0x290>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d875      	bhi.n	800822a <HAL_GPIO_Init+0x12e>
 800813e:	4a94      	ldr	r2, [pc, #592]	@ (8008390 <HAL_GPIO_Init+0x294>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d058      	beq.n	80081f6 <HAL_GPIO_Init+0xfa>
 8008144:	4a92      	ldr	r2, [pc, #584]	@ (8008390 <HAL_GPIO_Init+0x294>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d86f      	bhi.n	800822a <HAL_GPIO_Init+0x12e>
 800814a:	4a92      	ldr	r2, [pc, #584]	@ (8008394 <HAL_GPIO_Init+0x298>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d052      	beq.n	80081f6 <HAL_GPIO_Init+0xfa>
 8008150:	4a90      	ldr	r2, [pc, #576]	@ (8008394 <HAL_GPIO_Init+0x298>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d869      	bhi.n	800822a <HAL_GPIO_Init+0x12e>
 8008156:	4a90      	ldr	r2, [pc, #576]	@ (8008398 <HAL_GPIO_Init+0x29c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d04c      	beq.n	80081f6 <HAL_GPIO_Init+0xfa>
 800815c:	4a8e      	ldr	r2, [pc, #568]	@ (8008398 <HAL_GPIO_Init+0x29c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d863      	bhi.n	800822a <HAL_GPIO_Init+0x12e>
 8008162:	4a8e      	ldr	r2, [pc, #568]	@ (800839c <HAL_GPIO_Init+0x2a0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d046      	beq.n	80081f6 <HAL_GPIO_Init+0xfa>
 8008168:	4a8c      	ldr	r2, [pc, #560]	@ (800839c <HAL_GPIO_Init+0x2a0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d85d      	bhi.n	800822a <HAL_GPIO_Init+0x12e>
 800816e:	2b12      	cmp	r3, #18
 8008170:	d82a      	bhi.n	80081c8 <HAL_GPIO_Init+0xcc>
 8008172:	2b12      	cmp	r3, #18
 8008174:	d859      	bhi.n	800822a <HAL_GPIO_Init+0x12e>
 8008176:	a201      	add	r2, pc, #4	@ (adr r2, 800817c <HAL_GPIO_Init+0x80>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	080081f7 	.word	0x080081f7
 8008180:	080081d1 	.word	0x080081d1
 8008184:	080081e3 	.word	0x080081e3
 8008188:	08008225 	.word	0x08008225
 800818c:	0800822b 	.word	0x0800822b
 8008190:	0800822b 	.word	0x0800822b
 8008194:	0800822b 	.word	0x0800822b
 8008198:	0800822b 	.word	0x0800822b
 800819c:	0800822b 	.word	0x0800822b
 80081a0:	0800822b 	.word	0x0800822b
 80081a4:	0800822b 	.word	0x0800822b
 80081a8:	0800822b 	.word	0x0800822b
 80081ac:	0800822b 	.word	0x0800822b
 80081b0:	0800822b 	.word	0x0800822b
 80081b4:	0800822b 	.word	0x0800822b
 80081b8:	0800822b 	.word	0x0800822b
 80081bc:	0800822b 	.word	0x0800822b
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	080081ed 	.word	0x080081ed
 80081c8:	4a75      	ldr	r2, [pc, #468]	@ (80083a0 <HAL_GPIO_Init+0x2a4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80081ce:	e02c      	b.n	800822a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	623b      	str	r3, [r7, #32]
          break;
 80081d6:	e029      	b.n	800822c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	3304      	adds	r3, #4
 80081de:	623b      	str	r3, [r7, #32]
          break;
 80081e0:	e024      	b.n	800822c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	3308      	adds	r3, #8
 80081e8:	623b      	str	r3, [r7, #32]
          break;
 80081ea:	e01f      	b.n	800822c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	330c      	adds	r3, #12
 80081f2:	623b      	str	r3, [r7, #32]
          break;
 80081f4:	e01a      	b.n	800822c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d102      	bne.n	8008204 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80081fe:	2304      	movs	r3, #4
 8008200:	623b      	str	r3, [r7, #32]
          break;
 8008202:	e013      	b.n	800822c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d105      	bne.n	8008218 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800820c:	2308      	movs	r3, #8
 800820e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	611a      	str	r2, [r3, #16]
          break;
 8008216:	e009      	b.n	800822c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008218:	2308      	movs	r3, #8
 800821a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	615a      	str	r2, [r3, #20]
          break;
 8008222:	e003      	b.n	800822c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008224:	2300      	movs	r3, #0
 8008226:	623b      	str	r3, [r7, #32]
          break;
 8008228:	e000      	b.n	800822c <HAL_GPIO_Init+0x130>
          break;
 800822a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2bff      	cmp	r3, #255	@ 0xff
 8008230:	d801      	bhi.n	8008236 <HAL_GPIO_Init+0x13a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	e001      	b.n	800823a <HAL_GPIO_Init+0x13e>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2bff      	cmp	r3, #255	@ 0xff
 8008240:	d802      	bhi.n	8008248 <HAL_GPIO_Init+0x14c>
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	e002      	b.n	800824e <HAL_GPIO_Init+0x152>
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	3b08      	subs	r3, #8
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	210f      	movs	r1, #15
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	43db      	mvns	r3, r3
 800825e:	401a      	ands	r2, r3
 8008260:	6a39      	ldr	r1, [r7, #32]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	fa01 f303 	lsl.w	r3, r1, r3
 8008268:	431a      	orrs	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 80c1 	beq.w	80083fe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800827c:	4b49      	ldr	r3, [pc, #292]	@ (80083a4 <HAL_GPIO_Init+0x2a8>)
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	4a48      	ldr	r2, [pc, #288]	@ (80083a4 <HAL_GPIO_Init+0x2a8>)
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	6193      	str	r3, [r2, #24]
 8008288:	4b46      	ldr	r3, [pc, #280]	@ (80083a4 <HAL_GPIO_Init+0x2a8>)
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	60bb      	str	r3, [r7, #8]
 8008292:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008294:	4a44      	ldr	r2, [pc, #272]	@ (80083a8 <HAL_GPIO_Init+0x2ac>)
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	089b      	lsrs	r3, r3, #2
 800829a:	3302      	adds	r3, #2
 800829c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	220f      	movs	r2, #15
 80082ac:	fa02 f303 	lsl.w	r3, r2, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4013      	ands	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3c      	ldr	r2, [pc, #240]	@ (80083ac <HAL_GPIO_Init+0x2b0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d01f      	beq.n	8008300 <HAL_GPIO_Init+0x204>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3b      	ldr	r2, [pc, #236]	@ (80083b0 <HAL_GPIO_Init+0x2b4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d019      	beq.n	80082fc <HAL_GPIO_Init+0x200>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a3a      	ldr	r2, [pc, #232]	@ (80083b4 <HAL_GPIO_Init+0x2b8>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d013      	beq.n	80082f8 <HAL_GPIO_Init+0x1fc>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a39      	ldr	r2, [pc, #228]	@ (80083b8 <HAL_GPIO_Init+0x2bc>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00d      	beq.n	80082f4 <HAL_GPIO_Init+0x1f8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a38      	ldr	r2, [pc, #224]	@ (80083bc <HAL_GPIO_Init+0x2c0>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d007      	beq.n	80082f0 <HAL_GPIO_Init+0x1f4>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a37      	ldr	r2, [pc, #220]	@ (80083c0 <HAL_GPIO_Init+0x2c4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d101      	bne.n	80082ec <HAL_GPIO_Init+0x1f0>
 80082e8:	2305      	movs	r3, #5
 80082ea:	e00a      	b.n	8008302 <HAL_GPIO_Init+0x206>
 80082ec:	2306      	movs	r3, #6
 80082ee:	e008      	b.n	8008302 <HAL_GPIO_Init+0x206>
 80082f0:	2304      	movs	r3, #4
 80082f2:	e006      	b.n	8008302 <HAL_GPIO_Init+0x206>
 80082f4:	2303      	movs	r3, #3
 80082f6:	e004      	b.n	8008302 <HAL_GPIO_Init+0x206>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e002      	b.n	8008302 <HAL_GPIO_Init+0x206>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <HAL_GPIO_Init+0x206>
 8008300:	2300      	movs	r3, #0
 8008302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008304:	f002 0203 	and.w	r2, r2, #3
 8008308:	0092      	lsls	r2, r2, #2
 800830a:	4093      	lsls	r3, r2
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008312:	4925      	ldr	r1, [pc, #148]	@ (80083a8 <HAL_GPIO_Init+0x2ac>)
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	089b      	lsrs	r3, r3, #2
 8008318:	3302      	adds	r3, #2
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800832c:	4b25      	ldr	r3, [pc, #148]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	4924      	ldr	r1, [pc, #144]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	4313      	orrs	r3, r2
 8008336:	608b      	str	r3, [r1, #8]
 8008338:	e006      	b.n	8008348 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800833a:	4b22      	ldr	r3, [pc, #136]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	43db      	mvns	r3, r3
 8008342:	4920      	ldr	r1, [pc, #128]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 8008344:	4013      	ands	r3, r2
 8008346:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d006      	beq.n	8008362 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008354:	4b1b      	ldr	r3, [pc, #108]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 8008356:	68da      	ldr	r2, [r3, #12]
 8008358:	491a      	ldr	r1, [pc, #104]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	4313      	orrs	r3, r2
 800835e:	60cb      	str	r3, [r1, #12]
 8008360:	e006      	b.n	8008370 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008362:	4b18      	ldr	r3, [pc, #96]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	43db      	mvns	r3, r3
 800836a:	4916      	ldr	r1, [pc, #88]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 800836c:	4013      	ands	r3, r2
 800836e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d025      	beq.n	80083c8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800837c:	4b11      	ldr	r3, [pc, #68]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	4910      	ldr	r1, [pc, #64]	@ (80083c4 <HAL_GPIO_Init+0x2c8>)
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	4313      	orrs	r3, r2
 8008386:	604b      	str	r3, [r1, #4]
 8008388:	e025      	b.n	80083d6 <HAL_GPIO_Init+0x2da>
 800838a:	bf00      	nop
 800838c:	10320000 	.word	0x10320000
 8008390:	10310000 	.word	0x10310000
 8008394:	10220000 	.word	0x10220000
 8008398:	10210000 	.word	0x10210000
 800839c:	10120000 	.word	0x10120000
 80083a0:	10110000 	.word	0x10110000
 80083a4:	40021000 	.word	0x40021000
 80083a8:	40010000 	.word	0x40010000
 80083ac:	40010800 	.word	0x40010800
 80083b0:	40010c00 	.word	0x40010c00
 80083b4:	40011000 	.word	0x40011000
 80083b8:	40011400 	.word	0x40011400
 80083bc:	40011800 	.word	0x40011800
 80083c0:	40011c00 	.word	0x40011c00
 80083c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <HAL_GPIO_Init+0x324>)
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	43db      	mvns	r3, r3
 80083d0:	4913      	ldr	r1, [pc, #76]	@ (8008420 <HAL_GPIO_Init+0x324>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d006      	beq.n	80083f0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80083e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008420 <HAL_GPIO_Init+0x324>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	490e      	ldr	r1, [pc, #56]	@ (8008420 <HAL_GPIO_Init+0x324>)
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	600b      	str	r3, [r1, #0]
 80083ee:	e006      	b.n	80083fe <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80083f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008420 <HAL_GPIO_Init+0x324>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	43db      	mvns	r3, r3
 80083f8:	4909      	ldr	r1, [pc, #36]	@ (8008420 <HAL_GPIO_Init+0x324>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	3301      	adds	r3, #1
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	fa22 f303 	lsr.w	r3, r2, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	f47f ae7e 	bne.w	8008110 <HAL_GPIO_Init+0x14>
  }
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	372c      	adds	r7, #44	@ 0x2c
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr
 8008420:	40010400 	.word	0x40010400

08008424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e272      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 8087 	beq.w	8008552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008444:	4b92      	ldr	r3, [pc, #584]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f003 030c 	and.w	r3, r3, #12
 800844c:	2b04      	cmp	r3, #4
 800844e:	d00c      	beq.n	800846a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008450:	4b8f      	ldr	r3, [pc, #572]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f003 030c 	and.w	r3, r3, #12
 8008458:	2b08      	cmp	r3, #8
 800845a:	d112      	bne.n	8008482 <HAL_RCC_OscConfig+0x5e>
 800845c:	4b8c      	ldr	r3, [pc, #560]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008468:	d10b      	bne.n	8008482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800846a:	4b89      	ldr	r3, [pc, #548]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d06c      	beq.n	8008550 <HAL_RCC_OscConfig+0x12c>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d168      	bne.n	8008550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e24c      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800848a:	d106      	bne.n	800849a <HAL_RCC_OscConfig+0x76>
 800848c:	4b80      	ldr	r3, [pc, #512]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7f      	ldr	r2, [pc, #508]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	e02e      	b.n	80084f8 <HAL_RCC_OscConfig+0xd4>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10c      	bne.n	80084bc <HAL_RCC_OscConfig+0x98>
 80084a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a7a      	ldr	r2, [pc, #488]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	4b78      	ldr	r3, [pc, #480]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a77      	ldr	r2, [pc, #476]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	e01d      	b.n	80084f8 <HAL_RCC_OscConfig+0xd4>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCC_OscConfig+0xbc>
 80084c6:	4b72      	ldr	r3, [pc, #456]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a71      	ldr	r2, [pc, #452]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a6e      	ldr	r2, [pc, #440]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e00b      	b.n	80084f8 <HAL_RCC_OscConfig+0xd4>
 80084e0:	4b6b      	ldr	r3, [pc, #428]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a6a      	ldr	r2, [pc, #424]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	4b68      	ldr	r3, [pc, #416]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a67      	ldr	r2, [pc, #412]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80084f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d013      	beq.n	8008528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008500:	f7fe fe30 	bl	8007164 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008508:	f7fe fe2c 	bl	8007164 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b64      	cmp	r3, #100	@ 0x64
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e200      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800851a:	4b5d      	ldr	r3, [pc, #372]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HAL_RCC_OscConfig+0xe4>
 8008526:	e014      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008528:	f7fe fe1c 	bl	8007164 <HAL_GetTick>
 800852c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800852e:	e008      	b.n	8008542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008530:	f7fe fe18 	bl	8007164 <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	2b64      	cmp	r3, #100	@ 0x64
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e1ec      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008542:	4b53      	ldr	r3, [pc, #332]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1f0      	bne.n	8008530 <HAL_RCC_OscConfig+0x10c>
 800854e:	e000      	b.n	8008552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d063      	beq.n	8008626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800855e:	4b4c      	ldr	r3, [pc, #304]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f003 030c 	and.w	r3, r3, #12
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800856a:	4b49      	ldr	r3, [pc, #292]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f003 030c 	and.w	r3, r3, #12
 8008572:	2b08      	cmp	r3, #8
 8008574:	d11c      	bne.n	80085b0 <HAL_RCC_OscConfig+0x18c>
 8008576:	4b46      	ldr	r3, [pc, #280]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d116      	bne.n	80085b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008582:	4b43      	ldr	r3, [pc, #268]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_RCC_OscConfig+0x176>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d001      	beq.n	800859a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e1c0      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800859a:	4b3d      	ldr	r3, [pc, #244]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	4939      	ldr	r1, [pc, #228]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085ae:	e03a      	b.n	8008626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d020      	beq.n	80085fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085b8:	4b36      	ldr	r3, [pc, #216]	@ (8008694 <HAL_RCC_OscConfig+0x270>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085be:	f7fe fdd1 	bl	8007164 <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085c4:	e008      	b.n	80085d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c6:	f7fe fdcd 	bl	8007164 <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d901      	bls.n	80085d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e1a1      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0f0      	beq.n	80085c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e4:	4b2a      	ldr	r3, [pc, #168]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	00db      	lsls	r3, r3, #3
 80085f2:	4927      	ldr	r1, [pc, #156]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	600b      	str	r3, [r1, #0]
 80085f8:	e015      	b.n	8008626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085fa:	4b26      	ldr	r3, [pc, #152]	@ (8008694 <HAL_RCC_OscConfig+0x270>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008600:	f7fe fdb0 	bl	8007164 <HAL_GetTick>
 8008604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008606:	e008      	b.n	800861a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008608:	f7fe fdac 	bl	8007164 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e180      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800861a:	4b1d      	ldr	r3, [pc, #116]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f0      	bne.n	8008608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d03a      	beq.n	80086a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d019      	beq.n	800866e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800863a:	4b17      	ldr	r3, [pc, #92]	@ (8008698 <HAL_RCC_OscConfig+0x274>)
 800863c:	2201      	movs	r2, #1
 800863e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008640:	f7fe fd90 	bl	8007164 <HAL_GetTick>
 8008644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008646:	e008      	b.n	800865a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008648:	f7fe fd8c 	bl	8007164 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e160      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800865a:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <HAL_RCC_OscConfig+0x26c>)
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f0      	beq.n	8008648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008666:	2001      	movs	r0, #1
 8008668:	f000 fa9c 	bl	8008ba4 <RCC_Delay>
 800866c:	e01c      	b.n	80086a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800866e:	4b0a      	ldr	r3, [pc, #40]	@ (8008698 <HAL_RCC_OscConfig+0x274>)
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008674:	f7fe fd76 	bl	8007164 <HAL_GetTick>
 8008678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800867a:	e00f      	b.n	800869c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800867c:	f7fe fd72 	bl	8007164 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d908      	bls.n	800869c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e146      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
 800868e:	bf00      	nop
 8008690:	40021000 	.word	0x40021000
 8008694:	42420000 	.word	0x42420000
 8008698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800869c:	4b92      	ldr	r3, [pc, #584]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800869e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e9      	bne.n	800867c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 80a6 	beq.w	8008802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086b6:	2300      	movs	r3, #0
 80086b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086ba:	4b8b      	ldr	r3, [pc, #556]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10d      	bne.n	80086e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086c6:	4b88      	ldr	r3, [pc, #544]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	4a87      	ldr	r2, [pc, #540]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80086cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086d0:	61d3      	str	r3, [r2, #28]
 80086d2:	4b85      	ldr	r3, [pc, #532]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086da:	60bb      	str	r3, [r7, #8]
 80086dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086de:	2301      	movs	r3, #1
 80086e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086e2:	4b82      	ldr	r3, [pc, #520]	@ (80088ec <HAL_RCC_OscConfig+0x4c8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d118      	bne.n	8008720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086ee:	4b7f      	ldr	r3, [pc, #508]	@ (80088ec <HAL_RCC_OscConfig+0x4c8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a7e      	ldr	r2, [pc, #504]	@ (80088ec <HAL_RCC_OscConfig+0x4c8>)
 80086f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086fa:	f7fe fd33 	bl	8007164 <HAL_GetTick>
 80086fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008702:	f7fe fd2f 	bl	8007164 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b64      	cmp	r3, #100	@ 0x64
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e103      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008714:	4b75      	ldr	r3, [pc, #468]	@ (80088ec <HAL_RCC_OscConfig+0x4c8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0f0      	beq.n	8008702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d106      	bne.n	8008736 <HAL_RCC_OscConfig+0x312>
 8008728:	4b6f      	ldr	r3, [pc, #444]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800872a:	6a1b      	ldr	r3, [r3, #32]
 800872c:	4a6e      	ldr	r2, [pc, #440]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	6213      	str	r3, [r2, #32]
 8008734:	e02d      	b.n	8008792 <HAL_RCC_OscConfig+0x36e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10c      	bne.n	8008758 <HAL_RCC_OscConfig+0x334>
 800873e:	4b6a      	ldr	r3, [pc, #424]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	4a69      	ldr	r2, [pc, #420]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	6213      	str	r3, [r2, #32]
 800874a:	4b67      	ldr	r3, [pc, #412]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	4a66      	ldr	r2, [pc, #408]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008750:	f023 0304 	bic.w	r3, r3, #4
 8008754:	6213      	str	r3, [r2, #32]
 8008756:	e01c      	b.n	8008792 <HAL_RCC_OscConfig+0x36e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b05      	cmp	r3, #5
 800875e:	d10c      	bne.n	800877a <HAL_RCC_OscConfig+0x356>
 8008760:	4b61      	ldr	r3, [pc, #388]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	4a60      	ldr	r2, [pc, #384]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008766:	f043 0304 	orr.w	r3, r3, #4
 800876a:	6213      	str	r3, [r2, #32]
 800876c:	4b5e      	ldr	r3, [pc, #376]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	4a5d      	ldr	r2, [pc, #372]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	6213      	str	r3, [r2, #32]
 8008778:	e00b      	b.n	8008792 <HAL_RCC_OscConfig+0x36e>
 800877a:	4b5b      	ldr	r3, [pc, #364]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	4a5a      	ldr	r2, [pc, #360]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	6213      	str	r3, [r2, #32]
 8008786:	4b58      	ldr	r3, [pc, #352]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	4a57      	ldr	r2, [pc, #348]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d015      	beq.n	80087c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800879a:	f7fe fce3 	bl	8007164 <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a0:	e00a      	b.n	80087b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a2:	f7fe fcdf 	bl	8007164 <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e0b1      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b8:	4b4b      	ldr	r3, [pc, #300]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d0ee      	beq.n	80087a2 <HAL_RCC_OscConfig+0x37e>
 80087c4:	e014      	b.n	80087f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087c6:	f7fe fccd 	bl	8007164 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ce:	f7fe fcc9 	bl	8007164 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087dc:	4293      	cmp	r3, r2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e09b      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087e4:	4b40      	ldr	r3, [pc, #256]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1ee      	bne.n	80087ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d105      	bne.n	8008802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f6:	4b3c      	ldr	r3, [pc, #240]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	4a3b      	ldr	r2, [pc, #236]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80087fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8087 	beq.w	800891a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800880c:	4b36      	ldr	r3, [pc, #216]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f003 030c 	and.w	r3, r3, #12
 8008814:	2b08      	cmp	r3, #8
 8008816:	d061      	beq.n	80088dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d146      	bne.n	80088ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008820:	4b33      	ldr	r3, [pc, #204]	@ (80088f0 <HAL_RCC_OscConfig+0x4cc>)
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008826:	f7fe fc9d 	bl	8007164 <HAL_GetTick>
 800882a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800882c:	e008      	b.n	8008840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800882e:	f7fe fc99 	bl	8007164 <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e06d      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008840:	4b29      	ldr	r3, [pc, #164]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1f0      	bne.n	800882e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008854:	d108      	bne.n	8008868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008856:	4b24      	ldr	r3, [pc, #144]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	4921      	ldr	r1, [pc, #132]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 8008864:	4313      	orrs	r3, r2
 8008866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008868:	4b1f      	ldr	r3, [pc, #124]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a19      	ldr	r1, [r3, #32]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008878:	430b      	orrs	r3, r1
 800887a:	491b      	ldr	r1, [pc, #108]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 800887c:	4313      	orrs	r3, r2
 800887e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008880:	4b1b      	ldr	r3, [pc, #108]	@ (80088f0 <HAL_RCC_OscConfig+0x4cc>)
 8008882:	2201      	movs	r2, #1
 8008884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008886:	f7fe fc6d 	bl	8007164 <HAL_GetTick>
 800888a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800888c:	e008      	b.n	80088a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800888e:	f7fe fc69 	bl	8007164 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d901      	bls.n	80088a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e03d      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80088a0:	4b11      	ldr	r3, [pc, #68]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0f0      	beq.n	800888e <HAL_RCC_OscConfig+0x46a>
 80088ac:	e035      	b.n	800891a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ae:	4b10      	ldr	r3, [pc, #64]	@ (80088f0 <HAL_RCC_OscConfig+0x4cc>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7fe fc56 	bl	8007164 <HAL_GetTick>
 80088b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088bc:	f7fe fc52 	bl	8007164 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e026      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088ce:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <HAL_RCC_OscConfig+0x4c4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1f0      	bne.n	80088bc <HAL_RCC_OscConfig+0x498>
 80088da:	e01e      	b.n	800891a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d107      	bne.n	80088f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e019      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
 80088e8:	40021000 	.word	0x40021000
 80088ec:	40007000 	.word	0x40007000
 80088f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80088f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <HAL_RCC_OscConfig+0x500>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	429a      	cmp	r2, r3
 8008906:	d106      	bne.n	8008916 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008912:	429a      	cmp	r2, r3
 8008914:	d001      	beq.n	800891a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40021000 	.word	0x40021000

08008928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e0d0      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800893c:	4b6a      	ldr	r3, [pc, #424]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d910      	bls.n	800896c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800894a:	4b67      	ldr	r3, [pc, #412]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f023 0207 	bic.w	r2, r3, #7
 8008952:	4965      	ldr	r1, [pc, #404]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	4313      	orrs	r3, r2
 8008958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800895a:	4b63      	ldr	r3, [pc, #396]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d001      	beq.n	800896c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e0b8      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d020      	beq.n	80089ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b00      	cmp	r3, #0
 8008982:	d005      	beq.n	8008990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008984:	4b59      	ldr	r3, [pc, #356]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	4a58      	ldr	r2, [pc, #352]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 800898a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800898e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800899c:	4b53      	ldr	r3, [pc, #332]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	4a52      	ldr	r2, [pc, #328]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 80089a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80089a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a8:	4b50      	ldr	r3, [pc, #320]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	494d      	ldr	r1, [pc, #308]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d040      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d107      	bne.n	80089de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089ce:	4b47      	ldr	r3, [pc, #284]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d115      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e07f      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d107      	bne.n	80089f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089e6:	4b41      	ldr	r3, [pc, #260]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e073      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089f6:	4b3d      	ldr	r3, [pc, #244]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e06b      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a06:	4b39      	ldr	r3, [pc, #228]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f023 0203 	bic.w	r2, r3, #3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	4936      	ldr	r1, [pc, #216]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a18:	f7fe fba4 	bl	8007164 <HAL_GetTick>
 8008a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a1e:	e00a      	b.n	8008a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a20:	f7fe fba0 	bl	8007164 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e053      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a36:	4b2d      	ldr	r3, [pc, #180]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f003 020c 	and.w	r2, r3, #12
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d1eb      	bne.n	8008a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a48:	4b27      	ldr	r3, [pc, #156]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d210      	bcs.n	8008a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a56:	4b24      	ldr	r3, [pc, #144]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f023 0207 	bic.w	r2, r3, #7
 8008a5e:	4922      	ldr	r1, [pc, #136]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a66:	4b20      	ldr	r3, [pc, #128]	@ (8008ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d001      	beq.n	8008a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e032      	b.n	8008ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d008      	beq.n	8008a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a84:	4b19      	ldr	r3, [pc, #100]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	4916      	ldr	r1, [pc, #88]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008aa2:	4b12      	ldr	r3, [pc, #72]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	490e      	ldr	r1, [pc, #56]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ab6:	f000 f821 	bl	8008afc <HAL_RCC_GetSysClockFreq>
 8008aba:	4602      	mov	r2, r0
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_RCC_ClockConfig+0x1c4>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	091b      	lsrs	r3, r3, #4
 8008ac2:	f003 030f 	and.w	r3, r3, #15
 8008ac6:	490a      	ldr	r1, [pc, #40]	@ (8008af0 <HAL_RCC_ClockConfig+0x1c8>)
 8008ac8:	5ccb      	ldrb	r3, [r1, r3]
 8008aca:	fa22 f303 	lsr.w	r3, r2, r3
 8008ace:	4a09      	ldr	r2, [pc, #36]	@ (8008af4 <HAL_RCC_ClockConfig+0x1cc>)
 8008ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <HAL_RCC_ClockConfig+0x1d0>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fb02 	bl	80070e0 <HAL_InitTick>

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40022000 	.word	0x40022000
 8008aec:	40021000 	.word	0x40021000
 8008af0:	0800aac0 	.word	0x0800aac0
 8008af4:	200003d0 	.word	0x200003d0
 8008af8:	200003d4 	.word	0x200003d4

08008afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008b16:	4b1e      	ldr	r3, [pc, #120]	@ (8008b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f003 030c 	and.w	r3, r3, #12
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d002      	beq.n	8008b2c <HAL_RCC_GetSysClockFreq+0x30>
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d003      	beq.n	8008b32 <HAL_RCC_GetSysClockFreq+0x36>
 8008b2a:	e027      	b.n	8008b7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b2c:	4b19      	ldr	r3, [pc, #100]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8008b2e:	613b      	str	r3, [r7, #16]
      break;
 8008b30:	e027      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	0c9b      	lsrs	r3, r3, #18
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	4a17      	ldr	r2, [pc, #92]	@ (8008b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008b3c:	5cd3      	ldrb	r3, [r2, r3]
 8008b3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d010      	beq.n	8008b6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b4a:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	0c5b      	lsrs	r3, r3, #17
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	4a11      	ldr	r2, [pc, #68]	@ (8008b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008b56:	5cd3      	ldrb	r3, [r2, r3]
 8008b58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8008b5e:	fb03 f202 	mul.w	r2, r3, r2
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	617b      	str	r3, [r7, #20]
 8008b6a:	e004      	b.n	8008b76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008b70:	fb02 f303 	mul.w	r3, r2, r3
 8008b74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	613b      	str	r3, [r7, #16]
      break;
 8008b7a:	e002      	b.n	8008b82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b7c:	4b05      	ldr	r3, [pc, #20]	@ (8008b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8008b7e:	613b      	str	r3, [r7, #16]
      break;
 8008b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b82:	693b      	ldr	r3, [r7, #16]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	40021000 	.word	0x40021000
 8008b94:	007a1200 	.word	0x007a1200
 8008b98:	0800aad0 	.word	0x0800aad0
 8008b9c:	0800aae0 	.word	0x0800aae0
 8008ba0:	003d0900 	.word	0x003d0900

08008ba4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008bac:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd8 <RCC_Delay+0x34>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8008bdc <RCC_Delay+0x38>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	0a5b      	lsrs	r3, r3, #9
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
 8008bbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008bc0:	bf00      	nop
  }
  while (Delay --);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1e5a      	subs	r2, r3, #1
 8008bc6:	60fa      	str	r2, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f9      	bne.n	8008bc0 <RCC_Delay+0x1c>
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr
 8008bd8:	200003d0 	.word	0x200003d0
 8008bdc:	10624dd3 	.word	0x10624dd3

08008be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e041      	b.n	8008c76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fe fa08 	bl	800701c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f000 f9da 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d001      	beq.n	8008c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e044      	b.n	8008d22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d2c <HAL_TIM_Base_Start_IT+0xac>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d018      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x6c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8008d30 <HAL_TIM_Base_Start_IT+0xb0>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d013      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x6c>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ccc:	d00e      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x6c>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <HAL_TIM_Base_Start_IT+0xb4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d009      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x6c>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a16      	ldr	r2, [pc, #88]	@ (8008d38 <HAL_TIM_Base_Start_IT+0xb8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d004      	beq.n	8008cec <HAL_TIM_Base_Start_IT+0x6c>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a15      	ldr	r2, [pc, #84]	@ (8008d3c <HAL_TIM_Base_Start_IT+0xbc>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d111      	bne.n	8008d10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b06      	cmp	r3, #6
 8008cfc:	d010      	beq.n	8008d20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f042 0201 	orr.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d0e:	e007      	b.n	8008d20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0201 	orr.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3714      	adds	r7, #20
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	40012c00 	.word	0x40012c00
 8008d30:	40013400 	.word	0x40013400
 8008d34:	40000400 	.word	0x40000400
 8008d38:	40000800 	.word	0x40000800
 8008d3c:	40000c00 	.word	0x40000c00

08008d40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6a1a      	ldr	r2, [r3, #32]
 8008d5e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d62:	4013      	ands	r3, r2
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10f      	bne.n	8008d88 <HAL_TIM_Base_Stop_IT+0x48>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d72:	4013      	ands	r3, r2
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d107      	bne.n	8008d88 <HAL_TIM_Base_Stop_IT+0x48>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0201 	bic.w	r2, r2, #1
 8008d86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d020      	beq.n	8008e00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f003 0302 	and.w	r3, r3, #2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d01b      	beq.n	8008e00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f06f 0202 	mvn.w	r2, #2
 8008dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f8da 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008dec:	e005      	b.n	8008dfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8cd 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f8dc 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d020      	beq.n	8008e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01b      	beq.n	8008e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f06f 0204 	mvn.w	r2, #4
 8008e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2202      	movs	r2, #2
 8008e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f8b4 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008e38:	e005      	b.n	8008e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f8a7 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8b6 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d020      	beq.n	8008e98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f003 0308 	and.w	r3, r3, #8
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01b      	beq.n	8008e98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0208 	mvn.w	r2, #8
 8008e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2204      	movs	r2, #4
 8008e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f88e 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008e84:	e005      	b.n	8008e92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f881 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f890 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f003 0310 	and.w	r3, r3, #16
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d020      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01b      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f06f 0210 	mvn.w	r2, #16
 8008eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2208      	movs	r2, #8
 8008eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f868 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008ed0:	e005      	b.n	8008ede <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f85b 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f86a 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0201 	mvn.w	r2, #1
 8008f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f83a 	bl	8008f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00c      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f951 	bl	80091ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00c      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d007      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f83a 	bl	8008fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 0320 	and.w	r3, r3, #32
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00c      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0220 	mvn.w	r2, #32
 8008f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f924 	bl	80091bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr

08008f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f96:	bf00      	nop
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr
	...

08008fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a39      	ldr	r2, [pc, #228]	@ (80090d0 <TIM_Base_SetConfig+0xf8>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d013      	beq.n	8009018 <TIM_Base_SetConfig+0x40>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a38      	ldr	r2, [pc, #224]	@ (80090d4 <TIM_Base_SetConfig+0xfc>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00f      	beq.n	8009018 <TIM_Base_SetConfig+0x40>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ffe:	d00b      	beq.n	8009018 <TIM_Base_SetConfig+0x40>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a35      	ldr	r2, [pc, #212]	@ (80090d8 <TIM_Base_SetConfig+0x100>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <TIM_Base_SetConfig+0x40>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a34      	ldr	r2, [pc, #208]	@ (80090dc <TIM_Base_SetConfig+0x104>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_Base_SetConfig+0x40>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a33      	ldr	r2, [pc, #204]	@ (80090e0 <TIM_Base_SetConfig+0x108>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d108      	bne.n	800902a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800901e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a28      	ldr	r2, [pc, #160]	@ (80090d0 <TIM_Base_SetConfig+0xf8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <TIM_Base_SetConfig+0x82>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a27      	ldr	r2, [pc, #156]	@ (80090d4 <TIM_Base_SetConfig+0xfc>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00f      	beq.n	800905a <TIM_Base_SetConfig+0x82>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009040:	d00b      	beq.n	800905a <TIM_Base_SetConfig+0x82>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a24      	ldr	r2, [pc, #144]	@ (80090d8 <TIM_Base_SetConfig+0x100>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_Base_SetConfig+0x82>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a23      	ldr	r2, [pc, #140]	@ (80090dc <TIM_Base_SetConfig+0x104>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_Base_SetConfig+0x82>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a22      	ldr	r2, [pc, #136]	@ (80090e0 <TIM_Base_SetConfig+0x108>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d108      	bne.n	800906c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a0f      	ldr	r2, [pc, #60]	@ (80090d0 <TIM_Base_SetConfig+0xf8>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d003      	beq.n	80090a0 <TIM_Base_SetConfig+0xc8>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a0e      	ldr	r2, [pc, #56]	@ (80090d4 <TIM_Base_SetConfig+0xfc>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d103      	bne.n	80090a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f023 0201 	bic.w	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	611a      	str	r2, [r3, #16]
  }
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	40012c00 	.word	0x40012c00
 80090d4:	40013400 	.word	0x40013400
 80090d8:	40000400 	.word	0x40000400
 80090dc:	40000800 	.word	0x40000800
 80090e0:	40000c00 	.word	0x40000c00

080090e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d101      	bne.n	80090fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090f8:	2302      	movs	r3, #2
 80090fa:	e050      	b.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1b      	ldr	r2, [pc, #108]	@ (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d018      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a19      	ldr	r2, [pc, #100]	@ (80091ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009152:	d00e      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a15      	ldr	r2, [pc, #84]	@ (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d009      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a14      	ldr	r2, [pc, #80]	@ (80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d004      	beq.n	8009172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a12      	ldr	r2, [pc, #72]	@ (80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d10c      	bne.n	800918c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4313      	orrs	r3, r2
 8009182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40013400 	.word	0x40013400
 80091b0:	40000400 	.word	0x40000400
 80091b4:	40000800 	.word	0x40000800
 80091b8:	40000c00 	.word	0x40000c00

080091bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr

080091ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091ce:	b480      	push	{r7}
 80091d0:	b083      	sub	sp, #12
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	bc80      	pop	{r7}
 80091de:	4770      	bx	lr

080091e0 <calloc>:
 80091e0:	4b02      	ldr	r3, [pc, #8]	@ (80091ec <calloc+0xc>)
 80091e2:	460a      	mov	r2, r1
 80091e4:	4601      	mov	r1, r0
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	f000 b802 	b.w	80091f0 <_calloc_r>
 80091ec:	200003e8 	.word	0x200003e8

080091f0 <_calloc_r>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	fba1 5402 	umull	r5, r4, r1, r2
 80091f6:	b934      	cbnz	r4, 8009206 <_calloc_r+0x16>
 80091f8:	4629      	mov	r1, r5
 80091fa:	f000 f837 	bl	800926c <_malloc_r>
 80091fe:	4606      	mov	r6, r0
 8009200:	b928      	cbnz	r0, 800920e <_calloc_r+0x1e>
 8009202:	4630      	mov	r0, r6
 8009204:	bd70      	pop	{r4, r5, r6, pc}
 8009206:	220c      	movs	r2, #12
 8009208:	2600      	movs	r6, #0
 800920a:	6002      	str	r2, [r0, #0]
 800920c:	e7f9      	b.n	8009202 <_calloc_r+0x12>
 800920e:	462a      	mov	r2, r5
 8009210:	4621      	mov	r1, r4
 8009212:	f000 fb97 	bl	8009944 <memset>
 8009216:	e7f4      	b.n	8009202 <_calloc_r+0x12>

08009218 <free>:
 8009218:	4b02      	ldr	r3, [pc, #8]	@ (8009224 <free+0xc>)
 800921a:	4601      	mov	r1, r0
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	f000 bc2b 	b.w	8009a78 <_free_r>
 8009222:	bf00      	nop
 8009224:	200003e8 	.word	0x200003e8

08009228 <sbrk_aligned>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4e0f      	ldr	r6, [pc, #60]	@ (8009268 <sbrk_aligned+0x40>)
 800922c:	460c      	mov	r4, r1
 800922e:	6831      	ldr	r1, [r6, #0]
 8009230:	4605      	mov	r5, r0
 8009232:	b911      	cbnz	r1, 800923a <sbrk_aligned+0x12>
 8009234:	f000 fbc2 	bl	80099bc <_sbrk_r>
 8009238:	6030      	str	r0, [r6, #0]
 800923a:	4621      	mov	r1, r4
 800923c:	4628      	mov	r0, r5
 800923e:	f000 fbbd 	bl	80099bc <_sbrk_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d103      	bne.n	800924e <sbrk_aligned+0x26>
 8009246:	f04f 34ff 	mov.w	r4, #4294967295
 800924a:	4620      	mov	r0, r4
 800924c:	bd70      	pop	{r4, r5, r6, pc}
 800924e:	1cc4      	adds	r4, r0, #3
 8009250:	f024 0403 	bic.w	r4, r4, #3
 8009254:	42a0      	cmp	r0, r4
 8009256:	d0f8      	beq.n	800924a <sbrk_aligned+0x22>
 8009258:	1a21      	subs	r1, r4, r0
 800925a:	4628      	mov	r0, r5
 800925c:	f000 fbae 	bl	80099bc <_sbrk_r>
 8009260:	3001      	adds	r0, #1
 8009262:	d1f2      	bne.n	800924a <sbrk_aligned+0x22>
 8009264:	e7ef      	b.n	8009246 <sbrk_aligned+0x1e>
 8009266:	bf00      	nop
 8009268:	20000518 	.word	0x20000518

0800926c <_malloc_r>:
 800926c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009270:	1ccd      	adds	r5, r1, #3
 8009272:	f025 0503 	bic.w	r5, r5, #3
 8009276:	3508      	adds	r5, #8
 8009278:	2d0c      	cmp	r5, #12
 800927a:	bf38      	it	cc
 800927c:	250c      	movcc	r5, #12
 800927e:	2d00      	cmp	r5, #0
 8009280:	4606      	mov	r6, r0
 8009282:	db01      	blt.n	8009288 <_malloc_r+0x1c>
 8009284:	42a9      	cmp	r1, r5
 8009286:	d904      	bls.n	8009292 <_malloc_r+0x26>
 8009288:	230c      	movs	r3, #12
 800928a:	6033      	str	r3, [r6, #0]
 800928c:	2000      	movs	r0, #0
 800928e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009368 <_malloc_r+0xfc>
 8009296:	f000 f869 	bl	800936c <__malloc_lock>
 800929a:	f8d8 3000 	ldr.w	r3, [r8]
 800929e:	461c      	mov	r4, r3
 80092a0:	bb44      	cbnz	r4, 80092f4 <_malloc_r+0x88>
 80092a2:	4629      	mov	r1, r5
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff ffbf 	bl	8009228 <sbrk_aligned>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	4604      	mov	r4, r0
 80092ae:	d158      	bne.n	8009362 <_malloc_r+0xf6>
 80092b0:	f8d8 4000 	ldr.w	r4, [r8]
 80092b4:	4627      	mov	r7, r4
 80092b6:	2f00      	cmp	r7, #0
 80092b8:	d143      	bne.n	8009342 <_malloc_r+0xd6>
 80092ba:	2c00      	cmp	r4, #0
 80092bc:	d04b      	beq.n	8009356 <_malloc_r+0xea>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	4639      	mov	r1, r7
 80092c2:	4630      	mov	r0, r6
 80092c4:	eb04 0903 	add.w	r9, r4, r3
 80092c8:	f000 fb78 	bl	80099bc <_sbrk_r>
 80092cc:	4581      	cmp	r9, r0
 80092ce:	d142      	bne.n	8009356 <_malloc_r+0xea>
 80092d0:	6821      	ldr	r1, [r4, #0]
 80092d2:	4630      	mov	r0, r6
 80092d4:	1a6d      	subs	r5, r5, r1
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7ff ffa6 	bl	8009228 <sbrk_aligned>
 80092dc:	3001      	adds	r0, #1
 80092de:	d03a      	beq.n	8009356 <_malloc_r+0xea>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	442b      	add	r3, r5
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	f8d8 3000 	ldr.w	r3, [r8]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	bb62      	cbnz	r2, 8009348 <_malloc_r+0xdc>
 80092ee:	f8c8 7000 	str.w	r7, [r8]
 80092f2:	e00f      	b.n	8009314 <_malloc_r+0xa8>
 80092f4:	6822      	ldr	r2, [r4, #0]
 80092f6:	1b52      	subs	r2, r2, r5
 80092f8:	d420      	bmi.n	800933c <_malloc_r+0xd0>
 80092fa:	2a0b      	cmp	r2, #11
 80092fc:	d917      	bls.n	800932e <_malloc_r+0xc2>
 80092fe:	1961      	adds	r1, r4, r5
 8009300:	42a3      	cmp	r3, r4
 8009302:	6025      	str	r5, [r4, #0]
 8009304:	bf18      	it	ne
 8009306:	6059      	strne	r1, [r3, #4]
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	bf08      	it	eq
 800930c:	f8c8 1000 	streq.w	r1, [r8]
 8009310:	5162      	str	r2, [r4, r5]
 8009312:	604b      	str	r3, [r1, #4]
 8009314:	4630      	mov	r0, r6
 8009316:	f000 f82f 	bl	8009378 <__malloc_unlock>
 800931a:	f104 000b 	add.w	r0, r4, #11
 800931e:	1d23      	adds	r3, r4, #4
 8009320:	f020 0007 	bic.w	r0, r0, #7
 8009324:	1ac2      	subs	r2, r0, r3
 8009326:	bf1c      	itt	ne
 8009328:	1a1b      	subne	r3, r3, r0
 800932a:	50a3      	strne	r3, [r4, r2]
 800932c:	e7af      	b.n	800928e <_malloc_r+0x22>
 800932e:	6862      	ldr	r2, [r4, #4]
 8009330:	42a3      	cmp	r3, r4
 8009332:	bf0c      	ite	eq
 8009334:	f8c8 2000 	streq.w	r2, [r8]
 8009338:	605a      	strne	r2, [r3, #4]
 800933a:	e7eb      	b.n	8009314 <_malloc_r+0xa8>
 800933c:	4623      	mov	r3, r4
 800933e:	6864      	ldr	r4, [r4, #4]
 8009340:	e7ae      	b.n	80092a0 <_malloc_r+0x34>
 8009342:	463c      	mov	r4, r7
 8009344:	687f      	ldr	r7, [r7, #4]
 8009346:	e7b6      	b.n	80092b6 <_malloc_r+0x4a>
 8009348:	461a      	mov	r2, r3
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	42a3      	cmp	r3, r4
 800934e:	d1fb      	bne.n	8009348 <_malloc_r+0xdc>
 8009350:	2300      	movs	r3, #0
 8009352:	6053      	str	r3, [r2, #4]
 8009354:	e7de      	b.n	8009314 <_malloc_r+0xa8>
 8009356:	230c      	movs	r3, #12
 8009358:	4630      	mov	r0, r6
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f000 f80c 	bl	8009378 <__malloc_unlock>
 8009360:	e794      	b.n	800928c <_malloc_r+0x20>
 8009362:	6005      	str	r5, [r0, #0]
 8009364:	e7d6      	b.n	8009314 <_malloc_r+0xa8>
 8009366:	bf00      	nop
 8009368:	2000051c 	.word	0x2000051c

0800936c <__malloc_lock>:
 800936c:	4801      	ldr	r0, [pc, #4]	@ (8009374 <__malloc_lock+0x8>)
 800936e:	f000 bb72 	b.w	8009a56 <__retarget_lock_acquire_recursive>
 8009372:	bf00      	nop
 8009374:	20000660 	.word	0x20000660

08009378 <__malloc_unlock>:
 8009378:	4801      	ldr	r0, [pc, #4]	@ (8009380 <__malloc_unlock+0x8>)
 800937a:	f000 bb6d 	b.w	8009a58 <__retarget_lock_release_recursive>
 800937e:	bf00      	nop
 8009380:	20000660 	.word	0x20000660

08009384 <__sflush_r>:
 8009384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	0716      	lsls	r6, r2, #28
 800938c:	4605      	mov	r5, r0
 800938e:	460c      	mov	r4, r1
 8009390:	d454      	bmi.n	800943c <__sflush_r+0xb8>
 8009392:	684b      	ldr	r3, [r1, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	dc02      	bgt.n	800939e <__sflush_r+0x1a>
 8009398:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800939a:	2b00      	cmp	r3, #0
 800939c:	dd48      	ble.n	8009430 <__sflush_r+0xac>
 800939e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093a0:	2e00      	cmp	r6, #0
 80093a2:	d045      	beq.n	8009430 <__sflush_r+0xac>
 80093a4:	2300      	movs	r3, #0
 80093a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093aa:	682f      	ldr	r7, [r5, #0]
 80093ac:	6a21      	ldr	r1, [r4, #32]
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	d030      	beq.n	8009414 <__sflush_r+0x90>
 80093b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	0759      	lsls	r1, r3, #29
 80093b8:	d505      	bpl.n	80093c6 <__sflush_r+0x42>
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	1ad2      	subs	r2, r2, r3
 80093be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093c0:	b10b      	cbz	r3, 80093c6 <__sflush_r+0x42>
 80093c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093c4:	1ad2      	subs	r2, r2, r3
 80093c6:	2300      	movs	r3, #0
 80093c8:	4628      	mov	r0, r5
 80093ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093cc:	6a21      	ldr	r1, [r4, #32]
 80093ce:	47b0      	blx	r6
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	d106      	bne.n	80093e4 <__sflush_r+0x60>
 80093d6:	6829      	ldr	r1, [r5, #0]
 80093d8:	291d      	cmp	r1, #29
 80093da:	d82b      	bhi.n	8009434 <__sflush_r+0xb0>
 80093dc:	4a28      	ldr	r2, [pc, #160]	@ (8009480 <__sflush_r+0xfc>)
 80093de:	40ca      	lsrs	r2, r1
 80093e0:	07d6      	lsls	r6, r2, #31
 80093e2:	d527      	bpl.n	8009434 <__sflush_r+0xb0>
 80093e4:	2200      	movs	r2, #0
 80093e6:	6062      	str	r2, [r4, #4]
 80093e8:	6922      	ldr	r2, [r4, #16]
 80093ea:	04d9      	lsls	r1, r3, #19
 80093ec:	6022      	str	r2, [r4, #0]
 80093ee:	d504      	bpl.n	80093fa <__sflush_r+0x76>
 80093f0:	1c42      	adds	r2, r0, #1
 80093f2:	d101      	bne.n	80093f8 <__sflush_r+0x74>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b903      	cbnz	r3, 80093fa <__sflush_r+0x76>
 80093f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80093fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093fc:	602f      	str	r7, [r5, #0]
 80093fe:	b1b9      	cbz	r1, 8009430 <__sflush_r+0xac>
 8009400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009404:	4299      	cmp	r1, r3
 8009406:	d002      	beq.n	800940e <__sflush_r+0x8a>
 8009408:	4628      	mov	r0, r5
 800940a:	f000 fb35 	bl	8009a78 <_free_r>
 800940e:	2300      	movs	r3, #0
 8009410:	6363      	str	r3, [r4, #52]	@ 0x34
 8009412:	e00d      	b.n	8009430 <__sflush_r+0xac>
 8009414:	2301      	movs	r3, #1
 8009416:	4628      	mov	r0, r5
 8009418:	47b0      	blx	r6
 800941a:	4602      	mov	r2, r0
 800941c:	1c50      	adds	r0, r2, #1
 800941e:	d1c9      	bne.n	80093b4 <__sflush_r+0x30>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0c6      	beq.n	80093b4 <__sflush_r+0x30>
 8009426:	2b1d      	cmp	r3, #29
 8009428:	d001      	beq.n	800942e <__sflush_r+0xaa>
 800942a:	2b16      	cmp	r3, #22
 800942c:	d11d      	bne.n	800946a <__sflush_r+0xe6>
 800942e:	602f      	str	r7, [r5, #0]
 8009430:	2000      	movs	r0, #0
 8009432:	e021      	b.n	8009478 <__sflush_r+0xf4>
 8009434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009438:	b21b      	sxth	r3, r3
 800943a:	e01a      	b.n	8009472 <__sflush_r+0xee>
 800943c:	690f      	ldr	r7, [r1, #16]
 800943e:	2f00      	cmp	r7, #0
 8009440:	d0f6      	beq.n	8009430 <__sflush_r+0xac>
 8009442:	0793      	lsls	r3, r2, #30
 8009444:	bf18      	it	ne
 8009446:	2300      	movne	r3, #0
 8009448:	680e      	ldr	r6, [r1, #0]
 800944a:	bf08      	it	eq
 800944c:	694b      	ldreq	r3, [r1, #20]
 800944e:	1bf6      	subs	r6, r6, r7
 8009450:	600f      	str	r7, [r1, #0]
 8009452:	608b      	str	r3, [r1, #8]
 8009454:	2e00      	cmp	r6, #0
 8009456:	ddeb      	ble.n	8009430 <__sflush_r+0xac>
 8009458:	4633      	mov	r3, r6
 800945a:	463a      	mov	r2, r7
 800945c:	4628      	mov	r0, r5
 800945e:	6a21      	ldr	r1, [r4, #32]
 8009460:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009464:	47e0      	blx	ip
 8009466:	2800      	cmp	r0, #0
 8009468:	dc07      	bgt.n	800947a <__sflush_r+0xf6>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009472:	f04f 30ff 	mov.w	r0, #4294967295
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947a:	4407      	add	r7, r0
 800947c:	1a36      	subs	r6, r6, r0
 800947e:	e7e9      	b.n	8009454 <__sflush_r+0xd0>
 8009480:	20400001 	.word	0x20400001

08009484 <_fflush_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	690b      	ldr	r3, [r1, #16]
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b913      	cbnz	r3, 8009494 <_fflush_r+0x10>
 800948e:	2500      	movs	r5, #0
 8009490:	4628      	mov	r0, r5
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	b118      	cbz	r0, 800949e <_fflush_r+0x1a>
 8009496:	6a03      	ldr	r3, [r0, #32]
 8009498:	b90b      	cbnz	r3, 800949e <_fflush_r+0x1a>
 800949a:	f000 f8bb 	bl	8009614 <__sinit>
 800949e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f3      	beq.n	800948e <_fflush_r+0xa>
 80094a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094a8:	07d0      	lsls	r0, r2, #31
 80094aa:	d404      	bmi.n	80094b6 <_fflush_r+0x32>
 80094ac:	0599      	lsls	r1, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_fflush_r+0x32>
 80094b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094b2:	f000 fad0 	bl	8009a56 <__retarget_lock_acquire_recursive>
 80094b6:	4628      	mov	r0, r5
 80094b8:	4621      	mov	r1, r4
 80094ba:	f7ff ff63 	bl	8009384 <__sflush_r>
 80094be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094c0:	4605      	mov	r5, r0
 80094c2:	07da      	lsls	r2, r3, #31
 80094c4:	d4e4      	bmi.n	8009490 <_fflush_r+0xc>
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	059b      	lsls	r3, r3, #22
 80094ca:	d4e1      	bmi.n	8009490 <_fflush_r+0xc>
 80094cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ce:	f000 fac3 	bl	8009a58 <__retarget_lock_release_recursive>
 80094d2:	e7dd      	b.n	8009490 <_fflush_r+0xc>

080094d4 <fflush>:
 80094d4:	4601      	mov	r1, r0
 80094d6:	b920      	cbnz	r0, 80094e2 <fflush+0xe>
 80094d8:	4a04      	ldr	r2, [pc, #16]	@ (80094ec <fflush+0x18>)
 80094da:	4905      	ldr	r1, [pc, #20]	@ (80094f0 <fflush+0x1c>)
 80094dc:	4805      	ldr	r0, [pc, #20]	@ (80094f4 <fflush+0x20>)
 80094de:	f000 b8b1 	b.w	8009644 <_fwalk_sglue>
 80094e2:	4b05      	ldr	r3, [pc, #20]	@ (80094f8 <fflush+0x24>)
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	f7ff bfcd 	b.w	8009484 <_fflush_r>
 80094ea:	bf00      	nop
 80094ec:	200003dc 	.word	0x200003dc
 80094f0:	08009485 	.word	0x08009485
 80094f4:	200003ec 	.word	0x200003ec
 80094f8:	200003e8 	.word	0x200003e8

080094fc <std>:
 80094fc:	2300      	movs	r3, #0
 80094fe:	b510      	push	{r4, lr}
 8009500:	4604      	mov	r4, r0
 8009502:	e9c0 3300 	strd	r3, r3, [r0]
 8009506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800950a:	6083      	str	r3, [r0, #8]
 800950c:	8181      	strh	r1, [r0, #12]
 800950e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009510:	81c2      	strh	r2, [r0, #14]
 8009512:	6183      	str	r3, [r0, #24]
 8009514:	4619      	mov	r1, r3
 8009516:	2208      	movs	r2, #8
 8009518:	305c      	adds	r0, #92	@ 0x5c
 800951a:	f000 fa13 	bl	8009944 <memset>
 800951e:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <std+0x58>)
 8009520:	6224      	str	r4, [r4, #32]
 8009522:	6263      	str	r3, [r4, #36]	@ 0x24
 8009524:	4b0c      	ldr	r3, [pc, #48]	@ (8009558 <std+0x5c>)
 8009526:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009528:	4b0c      	ldr	r3, [pc, #48]	@ (800955c <std+0x60>)
 800952a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800952c:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <std+0x64>)
 800952e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009530:	4b0c      	ldr	r3, [pc, #48]	@ (8009564 <std+0x68>)
 8009532:	429c      	cmp	r4, r3
 8009534:	d006      	beq.n	8009544 <std+0x48>
 8009536:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800953a:	4294      	cmp	r4, r2
 800953c:	d002      	beq.n	8009544 <std+0x48>
 800953e:	33d0      	adds	r3, #208	@ 0xd0
 8009540:	429c      	cmp	r4, r3
 8009542:	d105      	bne.n	8009550 <std+0x54>
 8009544:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800954c:	f000 ba82 	b.w	8009a54 <__retarget_lock_init_recursive>
 8009550:	bd10      	pop	{r4, pc}
 8009552:	bf00      	nop
 8009554:	08009761 	.word	0x08009761
 8009558:	08009783 	.word	0x08009783
 800955c:	080097bb 	.word	0x080097bb
 8009560:	080097df 	.word	0x080097df
 8009564:	20000520 	.word	0x20000520

08009568 <stdio_exit_handler>:
 8009568:	4a02      	ldr	r2, [pc, #8]	@ (8009574 <stdio_exit_handler+0xc>)
 800956a:	4903      	ldr	r1, [pc, #12]	@ (8009578 <stdio_exit_handler+0x10>)
 800956c:	4803      	ldr	r0, [pc, #12]	@ (800957c <stdio_exit_handler+0x14>)
 800956e:	f000 b869 	b.w	8009644 <_fwalk_sglue>
 8009572:	bf00      	nop
 8009574:	200003dc 	.word	0x200003dc
 8009578:	08009485 	.word	0x08009485
 800957c:	200003ec 	.word	0x200003ec

08009580 <cleanup_stdio>:
 8009580:	6841      	ldr	r1, [r0, #4]
 8009582:	4b0c      	ldr	r3, [pc, #48]	@ (80095b4 <cleanup_stdio+0x34>)
 8009584:	b510      	push	{r4, lr}
 8009586:	4299      	cmp	r1, r3
 8009588:	4604      	mov	r4, r0
 800958a:	d001      	beq.n	8009590 <cleanup_stdio+0x10>
 800958c:	f7ff ff7a 	bl	8009484 <_fflush_r>
 8009590:	68a1      	ldr	r1, [r4, #8]
 8009592:	4b09      	ldr	r3, [pc, #36]	@ (80095b8 <cleanup_stdio+0x38>)
 8009594:	4299      	cmp	r1, r3
 8009596:	d002      	beq.n	800959e <cleanup_stdio+0x1e>
 8009598:	4620      	mov	r0, r4
 800959a:	f7ff ff73 	bl	8009484 <_fflush_r>
 800959e:	68e1      	ldr	r1, [r4, #12]
 80095a0:	4b06      	ldr	r3, [pc, #24]	@ (80095bc <cleanup_stdio+0x3c>)
 80095a2:	4299      	cmp	r1, r3
 80095a4:	d004      	beq.n	80095b0 <cleanup_stdio+0x30>
 80095a6:	4620      	mov	r0, r4
 80095a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ac:	f7ff bf6a 	b.w	8009484 <_fflush_r>
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	bf00      	nop
 80095b4:	20000520 	.word	0x20000520
 80095b8:	20000588 	.word	0x20000588
 80095bc:	200005f0 	.word	0x200005f0

080095c0 <global_stdio_init.part.0>:
 80095c0:	b510      	push	{r4, lr}
 80095c2:	4b0b      	ldr	r3, [pc, #44]	@ (80095f0 <global_stdio_init.part.0+0x30>)
 80095c4:	4c0b      	ldr	r4, [pc, #44]	@ (80095f4 <global_stdio_init.part.0+0x34>)
 80095c6:	4a0c      	ldr	r2, [pc, #48]	@ (80095f8 <global_stdio_init.part.0+0x38>)
 80095c8:	4620      	mov	r0, r4
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	2104      	movs	r1, #4
 80095ce:	2200      	movs	r2, #0
 80095d0:	f7ff ff94 	bl	80094fc <std>
 80095d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095d8:	2201      	movs	r2, #1
 80095da:	2109      	movs	r1, #9
 80095dc:	f7ff ff8e 	bl	80094fc <std>
 80095e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095e4:	2202      	movs	r2, #2
 80095e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095ea:	2112      	movs	r1, #18
 80095ec:	f7ff bf86 	b.w	80094fc <std>
 80095f0:	20000658 	.word	0x20000658
 80095f4:	20000520 	.word	0x20000520
 80095f8:	08009569 	.word	0x08009569

080095fc <__sfp_lock_acquire>:
 80095fc:	4801      	ldr	r0, [pc, #4]	@ (8009604 <__sfp_lock_acquire+0x8>)
 80095fe:	f000 ba2a 	b.w	8009a56 <__retarget_lock_acquire_recursive>
 8009602:	bf00      	nop
 8009604:	20000661 	.word	0x20000661

08009608 <__sfp_lock_release>:
 8009608:	4801      	ldr	r0, [pc, #4]	@ (8009610 <__sfp_lock_release+0x8>)
 800960a:	f000 ba25 	b.w	8009a58 <__retarget_lock_release_recursive>
 800960e:	bf00      	nop
 8009610:	20000661 	.word	0x20000661

08009614 <__sinit>:
 8009614:	b510      	push	{r4, lr}
 8009616:	4604      	mov	r4, r0
 8009618:	f7ff fff0 	bl	80095fc <__sfp_lock_acquire>
 800961c:	6a23      	ldr	r3, [r4, #32]
 800961e:	b11b      	cbz	r3, 8009628 <__sinit+0x14>
 8009620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009624:	f7ff bff0 	b.w	8009608 <__sfp_lock_release>
 8009628:	4b04      	ldr	r3, [pc, #16]	@ (800963c <__sinit+0x28>)
 800962a:	6223      	str	r3, [r4, #32]
 800962c:	4b04      	ldr	r3, [pc, #16]	@ (8009640 <__sinit+0x2c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f5      	bne.n	8009620 <__sinit+0xc>
 8009634:	f7ff ffc4 	bl	80095c0 <global_stdio_init.part.0>
 8009638:	e7f2      	b.n	8009620 <__sinit+0xc>
 800963a:	bf00      	nop
 800963c:	08009581 	.word	0x08009581
 8009640:	20000658 	.word	0x20000658

08009644 <_fwalk_sglue>:
 8009644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009648:	4607      	mov	r7, r0
 800964a:	4688      	mov	r8, r1
 800964c:	4614      	mov	r4, r2
 800964e:	2600      	movs	r6, #0
 8009650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009654:	f1b9 0901 	subs.w	r9, r9, #1
 8009658:	d505      	bpl.n	8009666 <_fwalk_sglue+0x22>
 800965a:	6824      	ldr	r4, [r4, #0]
 800965c:	2c00      	cmp	r4, #0
 800965e:	d1f7      	bne.n	8009650 <_fwalk_sglue+0xc>
 8009660:	4630      	mov	r0, r6
 8009662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d907      	bls.n	800967c <_fwalk_sglue+0x38>
 800966c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009670:	3301      	adds	r3, #1
 8009672:	d003      	beq.n	800967c <_fwalk_sglue+0x38>
 8009674:	4629      	mov	r1, r5
 8009676:	4638      	mov	r0, r7
 8009678:	47c0      	blx	r8
 800967a:	4306      	orrs	r6, r0
 800967c:	3568      	adds	r5, #104	@ 0x68
 800967e:	e7e9      	b.n	8009654 <_fwalk_sglue+0x10>

08009680 <iprintf>:
 8009680:	b40f      	push	{r0, r1, r2, r3}
 8009682:	b507      	push	{r0, r1, r2, lr}
 8009684:	4906      	ldr	r1, [pc, #24]	@ (80096a0 <iprintf+0x20>)
 8009686:	ab04      	add	r3, sp, #16
 8009688:	6808      	ldr	r0, [r1, #0]
 800968a:	f853 2b04 	ldr.w	r2, [r3], #4
 800968e:	6881      	ldr	r1, [r0, #8]
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	f000 fa61 	bl	8009b58 <_vfiprintf_r>
 8009696:	b003      	add	sp, #12
 8009698:	f85d eb04 	ldr.w	lr, [sp], #4
 800969c:	b004      	add	sp, #16
 800969e:	4770      	bx	lr
 80096a0:	200003e8 	.word	0x200003e8

080096a4 <_puts_r>:
 80096a4:	6a03      	ldr	r3, [r0, #32]
 80096a6:	b570      	push	{r4, r5, r6, lr}
 80096a8:	4605      	mov	r5, r0
 80096aa:	460e      	mov	r6, r1
 80096ac:	6884      	ldr	r4, [r0, #8]
 80096ae:	b90b      	cbnz	r3, 80096b4 <_puts_r+0x10>
 80096b0:	f7ff ffb0 	bl	8009614 <__sinit>
 80096b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096b6:	07db      	lsls	r3, r3, #31
 80096b8:	d405      	bmi.n	80096c6 <_puts_r+0x22>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	0598      	lsls	r0, r3, #22
 80096be:	d402      	bmi.n	80096c6 <_puts_r+0x22>
 80096c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096c2:	f000 f9c8 	bl	8009a56 <__retarget_lock_acquire_recursive>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	0719      	lsls	r1, r3, #28
 80096ca:	d502      	bpl.n	80096d2 <_puts_r+0x2e>
 80096cc:	6923      	ldr	r3, [r4, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d135      	bne.n	800973e <_puts_r+0x9a>
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f000 f8c5 	bl	8009864 <__swsetup_r>
 80096da:	b380      	cbz	r0, 800973e <_puts_r+0x9a>
 80096dc:	f04f 35ff 	mov.w	r5, #4294967295
 80096e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096e2:	07da      	lsls	r2, r3, #31
 80096e4:	d405      	bmi.n	80096f2 <_puts_r+0x4e>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	059b      	lsls	r3, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_puts_r+0x4e>
 80096ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ee:	f000 f9b3 	bl	8009a58 <__retarget_lock_release_recursive>
 80096f2:	4628      	mov	r0, r5
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da04      	bge.n	8009704 <_puts_r+0x60>
 80096fa:	69a2      	ldr	r2, [r4, #24]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	dc17      	bgt.n	8009730 <_puts_r+0x8c>
 8009700:	290a      	cmp	r1, #10
 8009702:	d015      	beq.n	8009730 <_puts_r+0x8c>
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	7019      	strb	r1, [r3, #0]
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009712:	3b01      	subs	r3, #1
 8009714:	60a3      	str	r3, [r4, #8]
 8009716:	2900      	cmp	r1, #0
 8009718:	d1ed      	bne.n	80096f6 <_puts_r+0x52>
 800971a:	2b00      	cmp	r3, #0
 800971c:	da11      	bge.n	8009742 <_puts_r+0x9e>
 800971e:	4622      	mov	r2, r4
 8009720:	210a      	movs	r1, #10
 8009722:	4628      	mov	r0, r5
 8009724:	f000 f85f 	bl	80097e6 <__swbuf_r>
 8009728:	3001      	adds	r0, #1
 800972a:	d0d7      	beq.n	80096dc <_puts_r+0x38>
 800972c:	250a      	movs	r5, #10
 800972e:	e7d7      	b.n	80096e0 <_puts_r+0x3c>
 8009730:	4622      	mov	r2, r4
 8009732:	4628      	mov	r0, r5
 8009734:	f000 f857 	bl	80097e6 <__swbuf_r>
 8009738:	3001      	adds	r0, #1
 800973a:	d1e7      	bne.n	800970c <_puts_r+0x68>
 800973c:	e7ce      	b.n	80096dc <_puts_r+0x38>
 800973e:	3e01      	subs	r6, #1
 8009740:	e7e4      	b.n	800970c <_puts_r+0x68>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	1c5a      	adds	r2, r3, #1
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	220a      	movs	r2, #10
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e7ee      	b.n	800972c <_puts_r+0x88>
	...

08009750 <puts>:
 8009750:	4b02      	ldr	r3, [pc, #8]	@ (800975c <puts+0xc>)
 8009752:	4601      	mov	r1, r0
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	f7ff bfa5 	b.w	80096a4 <_puts_r>
 800975a:	bf00      	nop
 800975c:	200003e8 	.word	0x200003e8

08009760 <__sread>:
 8009760:	b510      	push	{r4, lr}
 8009762:	460c      	mov	r4, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	f000 f916 	bl	8009998 <_read_r>
 800976c:	2800      	cmp	r0, #0
 800976e:	bfab      	itete	ge
 8009770:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009772:	89a3      	ldrhlt	r3, [r4, #12]
 8009774:	181b      	addge	r3, r3, r0
 8009776:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800977a:	bfac      	ite	ge
 800977c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800977e:	81a3      	strhlt	r3, [r4, #12]
 8009780:	bd10      	pop	{r4, pc}

08009782 <__swrite>:
 8009782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009786:	461f      	mov	r7, r3
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	4605      	mov	r5, r0
 800978c:	05db      	lsls	r3, r3, #23
 800978e:	460c      	mov	r4, r1
 8009790:	4616      	mov	r6, r2
 8009792:	d505      	bpl.n	80097a0 <__swrite+0x1e>
 8009794:	2302      	movs	r3, #2
 8009796:	2200      	movs	r2, #0
 8009798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979c:	f000 f8ea 	bl	8009974 <_lseek_r>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	4632      	mov	r2, r6
 80097a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	4628      	mov	r0, r5
 80097ac:	463b      	mov	r3, r7
 80097ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b6:	f000 b911 	b.w	80099dc <_write_r>

080097ba <__sseek>:
 80097ba:	b510      	push	{r4, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c2:	f000 f8d7 	bl	8009974 <_lseek_r>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	bf15      	itete	ne
 80097cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097d6:	81a3      	strheq	r3, [r4, #12]
 80097d8:	bf18      	it	ne
 80097da:	81a3      	strhne	r3, [r4, #12]
 80097dc:	bd10      	pop	{r4, pc}

080097de <__sclose>:
 80097de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e2:	f000 b8b7 	b.w	8009954 <_close_r>

080097e6 <__swbuf_r>:
 80097e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e8:	460e      	mov	r6, r1
 80097ea:	4614      	mov	r4, r2
 80097ec:	4605      	mov	r5, r0
 80097ee:	b118      	cbz	r0, 80097f8 <__swbuf_r+0x12>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b90b      	cbnz	r3, 80097f8 <__swbuf_r+0x12>
 80097f4:	f7ff ff0e 	bl	8009614 <__sinit>
 80097f8:	69a3      	ldr	r3, [r4, #24]
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	071a      	lsls	r2, r3, #28
 8009800:	d501      	bpl.n	8009806 <__swbuf_r+0x20>
 8009802:	6923      	ldr	r3, [r4, #16]
 8009804:	b943      	cbnz	r3, 8009818 <__swbuf_r+0x32>
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f000 f82b 	bl	8009864 <__swsetup_r>
 800980e:	b118      	cbz	r0, 8009818 <__swbuf_r+0x32>
 8009810:	f04f 37ff 	mov.w	r7, #4294967295
 8009814:	4638      	mov	r0, r7
 8009816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	6922      	ldr	r2, [r4, #16]
 800981c:	b2f6      	uxtb	r6, r6
 800981e:	1a98      	subs	r0, r3, r2
 8009820:	6963      	ldr	r3, [r4, #20]
 8009822:	4637      	mov	r7, r6
 8009824:	4283      	cmp	r3, r0
 8009826:	dc05      	bgt.n	8009834 <__swbuf_r+0x4e>
 8009828:	4621      	mov	r1, r4
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff fe2a 	bl	8009484 <_fflush_r>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1ed      	bne.n	8009810 <__swbuf_r+0x2a>
 8009834:	68a3      	ldr	r3, [r4, #8]
 8009836:	3b01      	subs	r3, #1
 8009838:	60a3      	str	r3, [r4, #8]
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	701e      	strb	r6, [r3, #0]
 8009842:	6962      	ldr	r2, [r4, #20]
 8009844:	1c43      	adds	r3, r0, #1
 8009846:	429a      	cmp	r2, r3
 8009848:	d004      	beq.n	8009854 <__swbuf_r+0x6e>
 800984a:	89a3      	ldrh	r3, [r4, #12]
 800984c:	07db      	lsls	r3, r3, #31
 800984e:	d5e1      	bpl.n	8009814 <__swbuf_r+0x2e>
 8009850:	2e0a      	cmp	r6, #10
 8009852:	d1df      	bne.n	8009814 <__swbuf_r+0x2e>
 8009854:	4621      	mov	r1, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f7ff fe14 	bl	8009484 <_fflush_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d0d9      	beq.n	8009814 <__swbuf_r+0x2e>
 8009860:	e7d6      	b.n	8009810 <__swbuf_r+0x2a>
	...

08009864 <__swsetup_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4b29      	ldr	r3, [pc, #164]	@ (800990c <__swsetup_r+0xa8>)
 8009868:	4605      	mov	r5, r0
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	460c      	mov	r4, r1
 800986e:	b118      	cbz	r0, 8009878 <__swsetup_r+0x14>
 8009870:	6a03      	ldr	r3, [r0, #32]
 8009872:	b90b      	cbnz	r3, 8009878 <__swsetup_r+0x14>
 8009874:	f7ff fece 	bl	8009614 <__sinit>
 8009878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800987c:	0719      	lsls	r1, r3, #28
 800987e:	d422      	bmi.n	80098c6 <__swsetup_r+0x62>
 8009880:	06da      	lsls	r2, r3, #27
 8009882:	d407      	bmi.n	8009894 <__swsetup_r+0x30>
 8009884:	2209      	movs	r2, #9
 8009886:	602a      	str	r2, [r5, #0]
 8009888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988c:	f04f 30ff 	mov.w	r0, #4294967295
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	e033      	b.n	80098fc <__swsetup_r+0x98>
 8009894:	0758      	lsls	r0, r3, #29
 8009896:	d512      	bpl.n	80098be <__swsetup_r+0x5a>
 8009898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800989a:	b141      	cbz	r1, 80098ae <__swsetup_r+0x4a>
 800989c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098a0:	4299      	cmp	r1, r3
 80098a2:	d002      	beq.n	80098aa <__swsetup_r+0x46>
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 f8e7 	bl	8009a78 <_free_r>
 80098aa:	2300      	movs	r3, #0
 80098ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	2300      	movs	r3, #0
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	6923      	ldr	r3, [r4, #16]
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	f043 0308 	orr.w	r3, r3, #8
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	6923      	ldr	r3, [r4, #16]
 80098c8:	b94b      	cbnz	r3, 80098de <__swsetup_r+0x7a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098d4:	d003      	beq.n	80098de <__swsetup_r+0x7a>
 80098d6:	4621      	mov	r1, r4
 80098d8:	4628      	mov	r0, r5
 80098da:	f000 fc0a 	bl	800a0f2 <__smakebuf_r>
 80098de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e2:	f013 0201 	ands.w	r2, r3, #1
 80098e6:	d00a      	beq.n	80098fe <__swsetup_r+0x9a>
 80098e8:	2200      	movs	r2, #0
 80098ea:	60a2      	str	r2, [r4, #8]
 80098ec:	6962      	ldr	r2, [r4, #20]
 80098ee:	4252      	negs	r2, r2
 80098f0:	61a2      	str	r2, [r4, #24]
 80098f2:	6922      	ldr	r2, [r4, #16]
 80098f4:	b942      	cbnz	r2, 8009908 <__swsetup_r+0xa4>
 80098f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098fa:	d1c5      	bne.n	8009888 <__swsetup_r+0x24>
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	0799      	lsls	r1, r3, #30
 8009900:	bf58      	it	pl
 8009902:	6962      	ldrpl	r2, [r4, #20]
 8009904:	60a2      	str	r2, [r4, #8]
 8009906:	e7f4      	b.n	80098f2 <__swsetup_r+0x8e>
 8009908:	2000      	movs	r0, #0
 800990a:	e7f7      	b.n	80098fc <__swsetup_r+0x98>
 800990c:	200003e8 	.word	0x200003e8

08009910 <memmove>:
 8009910:	4288      	cmp	r0, r1
 8009912:	b510      	push	{r4, lr}
 8009914:	eb01 0402 	add.w	r4, r1, r2
 8009918:	d902      	bls.n	8009920 <memmove+0x10>
 800991a:	4284      	cmp	r4, r0
 800991c:	4623      	mov	r3, r4
 800991e:	d807      	bhi.n	8009930 <memmove+0x20>
 8009920:	1e43      	subs	r3, r0, #1
 8009922:	42a1      	cmp	r1, r4
 8009924:	d008      	beq.n	8009938 <memmove+0x28>
 8009926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800992e:	e7f8      	b.n	8009922 <memmove+0x12>
 8009930:	4601      	mov	r1, r0
 8009932:	4402      	add	r2, r0
 8009934:	428a      	cmp	r2, r1
 8009936:	d100      	bne.n	800993a <memmove+0x2a>
 8009938:	bd10      	pop	{r4, pc}
 800993a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800993e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009942:	e7f7      	b.n	8009934 <memmove+0x24>

08009944 <memset>:
 8009944:	4603      	mov	r3, r0
 8009946:	4402      	add	r2, r0
 8009948:	4293      	cmp	r3, r2
 800994a:	d100      	bne.n	800994e <memset+0xa>
 800994c:	4770      	bx	lr
 800994e:	f803 1b01 	strb.w	r1, [r3], #1
 8009952:	e7f9      	b.n	8009948 <memset+0x4>

08009954 <_close_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	2300      	movs	r3, #0
 8009958:	4d05      	ldr	r5, [pc, #20]	@ (8009970 <_close_r+0x1c>)
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7fd fab9 	bl	8006ed6 <_close>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_close_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_close_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	2000065c 	.word	0x2000065c

08009974 <_lseek_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	2200      	movs	r2, #0
 800997e:	4d05      	ldr	r5, [pc, #20]	@ (8009994 <_lseek_r+0x20>)
 8009980:	602a      	str	r2, [r5, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f7fd facb 	bl	8006f1e <_lseek>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_lseek_r+0x1e>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_lseek_r+0x1e>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	2000065c 	.word	0x2000065c

08009998 <_read_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	2200      	movs	r2, #0
 80099a2:	4d05      	ldr	r5, [pc, #20]	@ (80099b8 <_read_r+0x20>)
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7fd fa5c 	bl	8006e64 <_read>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_read_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_read_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	2000065c 	.word	0x2000065c

080099bc <_sbrk_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	2300      	movs	r3, #0
 80099c0:	4d05      	ldr	r5, [pc, #20]	@ (80099d8 <_sbrk_r+0x1c>)
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7fd fab6 	bl	8006f38 <_sbrk>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_sbrk_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_sbrk_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	2000065c 	.word	0x2000065c

080099dc <_write_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	4611      	mov	r1, r2
 80099e4:	2200      	movs	r2, #0
 80099e6:	4d05      	ldr	r5, [pc, #20]	@ (80099fc <_write_r+0x20>)
 80099e8:	602a      	str	r2, [r5, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	f7fd fa57 	bl	8006e9e <_write>
 80099f0:	1c43      	adds	r3, r0, #1
 80099f2:	d102      	bne.n	80099fa <_write_r+0x1e>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	b103      	cbz	r3, 80099fa <_write_r+0x1e>
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	2000065c 	.word	0x2000065c

08009a00 <__errno>:
 8009a00:	4b01      	ldr	r3, [pc, #4]	@ (8009a08 <__errno+0x8>)
 8009a02:	6818      	ldr	r0, [r3, #0]
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	200003e8 	.word	0x200003e8

08009a0c <__libc_init_array>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	2600      	movs	r6, #0
 8009a10:	4d0c      	ldr	r5, [pc, #48]	@ (8009a44 <__libc_init_array+0x38>)
 8009a12:	4c0d      	ldr	r4, [pc, #52]	@ (8009a48 <__libc_init_array+0x3c>)
 8009a14:	1b64      	subs	r4, r4, r5
 8009a16:	10a4      	asrs	r4, r4, #2
 8009a18:	42a6      	cmp	r6, r4
 8009a1a:	d109      	bne.n	8009a30 <__libc_init_array+0x24>
 8009a1c:	f000 fbd6 	bl	800a1cc <_init>
 8009a20:	2600      	movs	r6, #0
 8009a22:	4d0a      	ldr	r5, [pc, #40]	@ (8009a4c <__libc_init_array+0x40>)
 8009a24:	4c0a      	ldr	r4, [pc, #40]	@ (8009a50 <__libc_init_array+0x44>)
 8009a26:	1b64      	subs	r4, r4, r5
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	42a6      	cmp	r6, r4
 8009a2c:	d105      	bne.n	8009a3a <__libc_init_array+0x2e>
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
 8009a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a34:	4798      	blx	r3
 8009a36:	3601      	adds	r6, #1
 8009a38:	e7ee      	b.n	8009a18 <__libc_init_array+0xc>
 8009a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3e:	4798      	blx	r3
 8009a40:	3601      	adds	r6, #1
 8009a42:	e7f2      	b.n	8009a2a <__libc_init_array+0x1e>
 8009a44:	0800ab20 	.word	0x0800ab20
 8009a48:	0800ab20 	.word	0x0800ab20
 8009a4c:	0800ab20 	.word	0x0800ab20
 8009a50:	0800ab24 	.word	0x0800ab24

08009a54 <__retarget_lock_init_recursive>:
 8009a54:	4770      	bx	lr

08009a56 <__retarget_lock_acquire_recursive>:
 8009a56:	4770      	bx	lr

08009a58 <__retarget_lock_release_recursive>:
 8009a58:	4770      	bx	lr

08009a5a <memcpy>:
 8009a5a:	440a      	add	r2, r1
 8009a5c:	4291      	cmp	r1, r2
 8009a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a62:	d100      	bne.n	8009a66 <memcpy+0xc>
 8009a64:	4770      	bx	lr
 8009a66:	b510      	push	{r4, lr}
 8009a68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a6c:	4291      	cmp	r1, r2
 8009a6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a72:	d1f9      	bne.n	8009a68 <memcpy+0xe>
 8009a74:	bd10      	pop	{r4, pc}
	...

08009a78 <_free_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d040      	beq.n	8009b02 <_free_r+0x8a>
 8009a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a84:	1f0c      	subs	r4, r1, #4
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bfb8      	it	lt
 8009a8a:	18e4      	addlt	r4, r4, r3
 8009a8c:	f7ff fc6e 	bl	800936c <__malloc_lock>
 8009a90:	4a1c      	ldr	r2, [pc, #112]	@ (8009b04 <_free_r+0x8c>)
 8009a92:	6813      	ldr	r3, [r2, #0]
 8009a94:	b933      	cbnz	r3, 8009aa4 <_free_r+0x2c>
 8009a96:	6063      	str	r3, [r4, #4]
 8009a98:	6014      	str	r4, [r2, #0]
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aa0:	f7ff bc6a 	b.w	8009378 <__malloc_unlock>
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	d908      	bls.n	8009aba <_free_r+0x42>
 8009aa8:	6820      	ldr	r0, [r4, #0]
 8009aaa:	1821      	adds	r1, r4, r0
 8009aac:	428b      	cmp	r3, r1
 8009aae:	bf01      	itttt	eq
 8009ab0:	6819      	ldreq	r1, [r3, #0]
 8009ab2:	685b      	ldreq	r3, [r3, #4]
 8009ab4:	1809      	addeq	r1, r1, r0
 8009ab6:	6021      	streq	r1, [r4, #0]
 8009ab8:	e7ed      	b.n	8009a96 <_free_r+0x1e>
 8009aba:	461a      	mov	r2, r3
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	b10b      	cbz	r3, 8009ac4 <_free_r+0x4c>
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	d9fa      	bls.n	8009aba <_free_r+0x42>
 8009ac4:	6811      	ldr	r1, [r2, #0]
 8009ac6:	1850      	adds	r0, r2, r1
 8009ac8:	42a0      	cmp	r0, r4
 8009aca:	d10b      	bne.n	8009ae4 <_free_r+0x6c>
 8009acc:	6820      	ldr	r0, [r4, #0]
 8009ace:	4401      	add	r1, r0
 8009ad0:	1850      	adds	r0, r2, r1
 8009ad2:	4283      	cmp	r3, r0
 8009ad4:	6011      	str	r1, [r2, #0]
 8009ad6:	d1e0      	bne.n	8009a9a <_free_r+0x22>
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4408      	add	r0, r1
 8009ade:	6010      	str	r0, [r2, #0]
 8009ae0:	6053      	str	r3, [r2, #4]
 8009ae2:	e7da      	b.n	8009a9a <_free_r+0x22>
 8009ae4:	d902      	bls.n	8009aec <_free_r+0x74>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	e7d6      	b.n	8009a9a <_free_r+0x22>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	1821      	adds	r1, r4, r0
 8009af0:	428b      	cmp	r3, r1
 8009af2:	bf01      	itttt	eq
 8009af4:	6819      	ldreq	r1, [r3, #0]
 8009af6:	685b      	ldreq	r3, [r3, #4]
 8009af8:	1809      	addeq	r1, r1, r0
 8009afa:	6021      	streq	r1, [r4, #0]
 8009afc:	6063      	str	r3, [r4, #4]
 8009afe:	6054      	str	r4, [r2, #4]
 8009b00:	e7cb      	b.n	8009a9a <_free_r+0x22>
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	2000051c 	.word	0x2000051c

08009b08 <__sfputc_r>:
 8009b08:	6893      	ldr	r3, [r2, #8]
 8009b0a:	b410      	push	{r4}
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	6093      	str	r3, [r2, #8]
 8009b12:	da07      	bge.n	8009b24 <__sfputc_r+0x1c>
 8009b14:	6994      	ldr	r4, [r2, #24]
 8009b16:	42a3      	cmp	r3, r4
 8009b18:	db01      	blt.n	8009b1e <__sfputc_r+0x16>
 8009b1a:	290a      	cmp	r1, #10
 8009b1c:	d102      	bne.n	8009b24 <__sfputc_r+0x1c>
 8009b1e:	bc10      	pop	{r4}
 8009b20:	f7ff be61 	b.w	80097e6 <__swbuf_r>
 8009b24:	6813      	ldr	r3, [r2, #0]
 8009b26:	1c58      	adds	r0, r3, #1
 8009b28:	6010      	str	r0, [r2, #0]
 8009b2a:	7019      	strb	r1, [r3, #0]
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	bc10      	pop	{r4}
 8009b30:	4770      	bx	lr

08009b32 <__sfputs_r>:
 8009b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b34:	4606      	mov	r6, r0
 8009b36:	460f      	mov	r7, r1
 8009b38:	4614      	mov	r4, r2
 8009b3a:	18d5      	adds	r5, r2, r3
 8009b3c:	42ac      	cmp	r4, r5
 8009b3e:	d101      	bne.n	8009b44 <__sfputs_r+0x12>
 8009b40:	2000      	movs	r0, #0
 8009b42:	e007      	b.n	8009b54 <__sfputs_r+0x22>
 8009b44:	463a      	mov	r2, r7
 8009b46:	4630      	mov	r0, r6
 8009b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b4c:	f7ff ffdc 	bl	8009b08 <__sfputc_r>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d1f3      	bne.n	8009b3c <__sfputs_r+0xa>
 8009b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b58 <_vfiprintf_r>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	4614      	mov	r4, r2
 8009b60:	4698      	mov	r8, r3
 8009b62:	4606      	mov	r6, r0
 8009b64:	b09d      	sub	sp, #116	@ 0x74
 8009b66:	b118      	cbz	r0, 8009b70 <_vfiprintf_r+0x18>
 8009b68:	6a03      	ldr	r3, [r0, #32]
 8009b6a:	b90b      	cbnz	r3, 8009b70 <_vfiprintf_r+0x18>
 8009b6c:	f7ff fd52 	bl	8009614 <__sinit>
 8009b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b72:	07d9      	lsls	r1, r3, #31
 8009b74:	d405      	bmi.n	8009b82 <_vfiprintf_r+0x2a>
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	059a      	lsls	r2, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_vfiprintf_r+0x2a>
 8009b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b7e:	f7ff ff6a 	bl	8009a56 <__retarget_lock_acquire_recursive>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	071b      	lsls	r3, r3, #28
 8009b86:	d501      	bpl.n	8009b8c <_vfiprintf_r+0x34>
 8009b88:	692b      	ldr	r3, [r5, #16]
 8009b8a:	b99b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x5c>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff fe68 	bl	8009864 <__swsetup_r>
 8009b94:	b170      	cbz	r0, 8009bb4 <_vfiprintf_r+0x5c>
 8009b96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b98:	07dc      	lsls	r4, r3, #31
 8009b9a:	d504      	bpl.n	8009ba6 <_vfiprintf_r+0x4e>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	b01d      	add	sp, #116	@ 0x74
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	0598      	lsls	r0, r3, #22
 8009baa:	d4f7      	bmi.n	8009b9c <_vfiprintf_r+0x44>
 8009bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bae:	f7ff ff53 	bl	8009a58 <__retarget_lock_release_recursive>
 8009bb2:	e7f3      	b.n	8009b9c <_vfiprintf_r+0x44>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bbe:	2330      	movs	r3, #48	@ 0x30
 8009bc0:	f04f 0901 	mov.w	r9, #1
 8009bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bc8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d74 <_vfiprintf_r+0x21c>
 8009bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	469a      	mov	sl, r3
 8009bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd8:	b10a      	cbz	r2, 8009bde <_vfiprintf_r+0x86>
 8009bda:	2a25      	cmp	r2, #37	@ 0x25
 8009bdc:	d1f9      	bne.n	8009bd2 <_vfiprintf_r+0x7a>
 8009bde:	ebba 0b04 	subs.w	fp, sl, r4
 8009be2:	d00b      	beq.n	8009bfc <_vfiprintf_r+0xa4>
 8009be4:	465b      	mov	r3, fp
 8009be6:	4622      	mov	r2, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffa1 	bl	8009b32 <__sfputs_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f000 80a7 	beq.w	8009d44 <_vfiprintf_r+0x1ec>
 8009bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bf8:	445a      	add	r2, fp
 8009bfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 809f 	beq.w	8009d44 <_vfiprintf_r+0x1ec>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c10:	f10a 0a01 	add.w	sl, sl, #1
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	9307      	str	r3, [sp, #28]
 8009c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c1e:	4654      	mov	r4, sl
 8009c20:	2205      	movs	r2, #5
 8009c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c26:	4853      	ldr	r0, [pc, #332]	@ (8009d74 <_vfiprintf_r+0x21c>)
 8009c28:	f000 fac2 	bl	800a1b0 <memchr>
 8009c2c:	9a04      	ldr	r2, [sp, #16]
 8009c2e:	b9d8      	cbnz	r0, 8009c68 <_vfiprintf_r+0x110>
 8009c30:	06d1      	lsls	r1, r2, #27
 8009c32:	bf44      	itt	mi
 8009c34:	2320      	movmi	r3, #32
 8009c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c3a:	0713      	lsls	r3, r2, #28
 8009c3c:	bf44      	itt	mi
 8009c3e:	232b      	movmi	r3, #43	@ 0x2b
 8009c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c44:	f89a 3000 	ldrb.w	r3, [sl]
 8009c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c4a:	d015      	beq.n	8009c78 <_vfiprintf_r+0x120>
 8009c4c:	4654      	mov	r4, sl
 8009c4e:	2000      	movs	r0, #0
 8009c50:	f04f 0c0a 	mov.w	ip, #10
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	4621      	mov	r1, r4
 8009c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c5c:	3b30      	subs	r3, #48	@ 0x30
 8009c5e:	2b09      	cmp	r3, #9
 8009c60:	d94b      	bls.n	8009cfa <_vfiprintf_r+0x1a2>
 8009c62:	b1b0      	cbz	r0, 8009c92 <_vfiprintf_r+0x13a>
 8009c64:	9207      	str	r2, [sp, #28]
 8009c66:	e014      	b.n	8009c92 <_vfiprintf_r+0x13a>
 8009c68:	eba0 0308 	sub.w	r3, r0, r8
 8009c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c70:	4313      	orrs	r3, r2
 8009c72:	46a2      	mov	sl, r4
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	e7d2      	b.n	8009c1e <_vfiprintf_r+0xc6>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	1d19      	adds	r1, r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	9103      	str	r1, [sp, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	bfbb      	ittet	lt
 8009c84:	425b      	neglt	r3, r3
 8009c86:	f042 0202 	orrlt.w	r2, r2, #2
 8009c8a:	9307      	strge	r3, [sp, #28]
 8009c8c:	9307      	strlt	r3, [sp, #28]
 8009c8e:	bfb8      	it	lt
 8009c90:	9204      	strlt	r2, [sp, #16]
 8009c92:	7823      	ldrb	r3, [r4, #0]
 8009c94:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c96:	d10a      	bne.n	8009cae <_vfiprintf_r+0x156>
 8009c98:	7863      	ldrb	r3, [r4, #1]
 8009c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c9c:	d132      	bne.n	8009d04 <_vfiprintf_r+0x1ac>
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	3402      	adds	r4, #2
 8009ca2:	1d1a      	adds	r2, r3, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	9203      	str	r2, [sp, #12]
 8009ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cac:	9305      	str	r3, [sp, #20]
 8009cae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d78 <_vfiprintf_r+0x220>
 8009cb2:	2203      	movs	r2, #3
 8009cb4:	4650      	mov	r0, sl
 8009cb6:	7821      	ldrb	r1, [r4, #0]
 8009cb8:	f000 fa7a 	bl	800a1b0 <memchr>
 8009cbc:	b138      	cbz	r0, 8009cce <_vfiprintf_r+0x176>
 8009cbe:	2240      	movs	r2, #64	@ 0x40
 8009cc0:	9b04      	ldr	r3, [sp, #16]
 8009cc2:	eba0 000a 	sub.w	r0, r0, sl
 8009cc6:	4082      	lsls	r2, r0
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	3401      	adds	r4, #1
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd2:	2206      	movs	r2, #6
 8009cd4:	4829      	ldr	r0, [pc, #164]	@ (8009d7c <_vfiprintf_r+0x224>)
 8009cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cda:	f000 fa69 	bl	800a1b0 <memchr>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d03f      	beq.n	8009d62 <_vfiprintf_r+0x20a>
 8009ce2:	4b27      	ldr	r3, [pc, #156]	@ (8009d80 <_vfiprintf_r+0x228>)
 8009ce4:	bb1b      	cbnz	r3, 8009d2e <_vfiprintf_r+0x1d6>
 8009ce6:	9b03      	ldr	r3, [sp, #12]
 8009ce8:	3307      	adds	r3, #7
 8009cea:	f023 0307 	bic.w	r3, r3, #7
 8009cee:	3308      	adds	r3, #8
 8009cf0:	9303      	str	r3, [sp, #12]
 8009cf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cf4:	443b      	add	r3, r7
 8009cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cf8:	e76a      	b.n	8009bd0 <_vfiprintf_r+0x78>
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d02:	e7a8      	b.n	8009c56 <_vfiprintf_r+0xfe>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f04f 0c0a 	mov.w	ip, #10
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	3401      	adds	r4, #1
 8009d0e:	9305      	str	r3, [sp, #20]
 8009d10:	4620      	mov	r0, r4
 8009d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d16:	3a30      	subs	r2, #48	@ 0x30
 8009d18:	2a09      	cmp	r2, #9
 8009d1a:	d903      	bls.n	8009d24 <_vfiprintf_r+0x1cc>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0c6      	beq.n	8009cae <_vfiprintf_r+0x156>
 8009d20:	9105      	str	r1, [sp, #20]
 8009d22:	e7c4      	b.n	8009cae <_vfiprintf_r+0x156>
 8009d24:	4604      	mov	r4, r0
 8009d26:	2301      	movs	r3, #1
 8009d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d2c:	e7f0      	b.n	8009d10 <_vfiprintf_r+0x1b8>
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	462a      	mov	r2, r5
 8009d34:	4630      	mov	r0, r6
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <_vfiprintf_r+0x22c>)
 8009d38:	a904      	add	r1, sp, #16
 8009d3a:	f3af 8000 	nop.w
 8009d3e:	4607      	mov	r7, r0
 8009d40:	1c78      	adds	r0, r7, #1
 8009d42:	d1d6      	bne.n	8009cf2 <_vfiprintf_r+0x19a>
 8009d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d46:	07d9      	lsls	r1, r3, #31
 8009d48:	d405      	bmi.n	8009d56 <_vfiprintf_r+0x1fe>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	059a      	lsls	r2, r3, #22
 8009d4e:	d402      	bmi.n	8009d56 <_vfiprintf_r+0x1fe>
 8009d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d52:	f7ff fe81 	bl	8009a58 <__retarget_lock_release_recursive>
 8009d56:	89ab      	ldrh	r3, [r5, #12]
 8009d58:	065b      	lsls	r3, r3, #25
 8009d5a:	f53f af1f 	bmi.w	8009b9c <_vfiprintf_r+0x44>
 8009d5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d60:	e71e      	b.n	8009ba0 <_vfiprintf_r+0x48>
 8009d62:	ab03      	add	r3, sp, #12
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	462a      	mov	r2, r5
 8009d68:	4630      	mov	r0, r6
 8009d6a:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <_vfiprintf_r+0x22c>)
 8009d6c:	a904      	add	r1, sp, #16
 8009d6e:	f000 f87d 	bl	8009e6c <_printf_i>
 8009d72:	e7e4      	b.n	8009d3e <_vfiprintf_r+0x1e6>
 8009d74:	0800aae2 	.word	0x0800aae2
 8009d78:	0800aae8 	.word	0x0800aae8
 8009d7c:	0800aaec 	.word	0x0800aaec
 8009d80:	00000000 	.word	0x00000000
 8009d84:	08009b33 	.word	0x08009b33

08009d88 <_printf_common>:
 8009d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8c:	4616      	mov	r6, r2
 8009d8e:	4698      	mov	r8, r3
 8009d90:	688a      	ldr	r2, [r1, #8]
 8009d92:	690b      	ldr	r3, [r1, #16]
 8009d94:	4607      	mov	r7, r0
 8009d96:	4293      	cmp	r3, r2
 8009d98:	bfb8      	it	lt
 8009d9a:	4613      	movlt	r3, r2
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009da2:	460c      	mov	r4, r1
 8009da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009da8:	b10a      	cbz	r2, 8009dae <_printf_common+0x26>
 8009daa:	3301      	adds	r3, #1
 8009dac:	6033      	str	r3, [r6, #0]
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	0699      	lsls	r1, r3, #26
 8009db2:	bf42      	ittt	mi
 8009db4:	6833      	ldrmi	r3, [r6, #0]
 8009db6:	3302      	addmi	r3, #2
 8009db8:	6033      	strmi	r3, [r6, #0]
 8009dba:	6825      	ldr	r5, [r4, #0]
 8009dbc:	f015 0506 	ands.w	r5, r5, #6
 8009dc0:	d106      	bne.n	8009dd0 <_printf_common+0x48>
 8009dc2:	f104 0a19 	add.w	sl, r4, #25
 8009dc6:	68e3      	ldr	r3, [r4, #12]
 8009dc8:	6832      	ldr	r2, [r6, #0]
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	42ab      	cmp	r3, r5
 8009dce:	dc2b      	bgt.n	8009e28 <_printf_common+0xa0>
 8009dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dd4:	6822      	ldr	r2, [r4, #0]
 8009dd6:	3b00      	subs	r3, #0
 8009dd8:	bf18      	it	ne
 8009dda:	2301      	movne	r3, #1
 8009ddc:	0692      	lsls	r2, r2, #26
 8009dde:	d430      	bmi.n	8009e42 <_printf_common+0xba>
 8009de0:	4641      	mov	r1, r8
 8009de2:	4638      	mov	r0, r7
 8009de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009de8:	47c8      	blx	r9
 8009dea:	3001      	adds	r0, #1
 8009dec:	d023      	beq.n	8009e36 <_printf_common+0xae>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	6922      	ldr	r2, [r4, #16]
 8009df2:	f003 0306 	and.w	r3, r3, #6
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	bf14      	ite	ne
 8009dfa:	2500      	movne	r5, #0
 8009dfc:	6833      	ldreq	r3, [r6, #0]
 8009dfe:	f04f 0600 	mov.w	r6, #0
 8009e02:	bf08      	it	eq
 8009e04:	68e5      	ldreq	r5, [r4, #12]
 8009e06:	f104 041a 	add.w	r4, r4, #26
 8009e0a:	bf08      	it	eq
 8009e0c:	1aed      	subeq	r5, r5, r3
 8009e0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e12:	bf08      	it	eq
 8009e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	bfc4      	itt	gt
 8009e1c:	1a9b      	subgt	r3, r3, r2
 8009e1e:	18ed      	addgt	r5, r5, r3
 8009e20:	42b5      	cmp	r5, r6
 8009e22:	d11a      	bne.n	8009e5a <_printf_common+0xd2>
 8009e24:	2000      	movs	r0, #0
 8009e26:	e008      	b.n	8009e3a <_printf_common+0xb2>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	4652      	mov	r2, sl
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	4638      	mov	r0, r7
 8009e30:	47c8      	blx	r9
 8009e32:	3001      	adds	r0, #1
 8009e34:	d103      	bne.n	8009e3e <_printf_common+0xb6>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e3e:	3501      	adds	r5, #1
 8009e40:	e7c1      	b.n	8009dc6 <_printf_common+0x3e>
 8009e42:	2030      	movs	r0, #48	@ 0x30
 8009e44:	18e1      	adds	r1, r4, r3
 8009e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e50:	4422      	add	r2, r4
 8009e52:	3302      	adds	r3, #2
 8009e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e58:	e7c2      	b.n	8009de0 <_printf_common+0x58>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	4641      	mov	r1, r8
 8009e60:	4638      	mov	r0, r7
 8009e62:	47c8      	blx	r9
 8009e64:	3001      	adds	r0, #1
 8009e66:	d0e6      	beq.n	8009e36 <_printf_common+0xae>
 8009e68:	3601      	adds	r6, #1
 8009e6a:	e7d9      	b.n	8009e20 <_printf_common+0x98>

08009e6c <_printf_i>:
 8009e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	7e0f      	ldrb	r7, [r1, #24]
 8009e72:	4691      	mov	r9, r2
 8009e74:	2f78      	cmp	r7, #120	@ 0x78
 8009e76:	4680      	mov	r8, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	469a      	mov	sl, r3
 8009e7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e82:	d807      	bhi.n	8009e94 <_printf_i+0x28>
 8009e84:	2f62      	cmp	r7, #98	@ 0x62
 8009e86:	d80a      	bhi.n	8009e9e <_printf_i+0x32>
 8009e88:	2f00      	cmp	r7, #0
 8009e8a:	f000 80d1 	beq.w	800a030 <_printf_i+0x1c4>
 8009e8e:	2f58      	cmp	r7, #88	@ 0x58
 8009e90:	f000 80b8 	beq.w	800a004 <_printf_i+0x198>
 8009e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e9c:	e03a      	b.n	8009f14 <_printf_i+0xa8>
 8009e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009ea2:	2b15      	cmp	r3, #21
 8009ea4:	d8f6      	bhi.n	8009e94 <_printf_i+0x28>
 8009ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8009eac <_printf_i+0x40>)
 8009ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eac:	08009f05 	.word	0x08009f05
 8009eb0:	08009f19 	.word	0x08009f19
 8009eb4:	08009e95 	.word	0x08009e95
 8009eb8:	08009e95 	.word	0x08009e95
 8009ebc:	08009e95 	.word	0x08009e95
 8009ec0:	08009e95 	.word	0x08009e95
 8009ec4:	08009f19 	.word	0x08009f19
 8009ec8:	08009e95 	.word	0x08009e95
 8009ecc:	08009e95 	.word	0x08009e95
 8009ed0:	08009e95 	.word	0x08009e95
 8009ed4:	08009e95 	.word	0x08009e95
 8009ed8:	0800a017 	.word	0x0800a017
 8009edc:	08009f43 	.word	0x08009f43
 8009ee0:	08009fd1 	.word	0x08009fd1
 8009ee4:	08009e95 	.word	0x08009e95
 8009ee8:	08009e95 	.word	0x08009e95
 8009eec:	0800a039 	.word	0x0800a039
 8009ef0:	08009e95 	.word	0x08009e95
 8009ef4:	08009f43 	.word	0x08009f43
 8009ef8:	08009e95 	.word	0x08009e95
 8009efc:	08009e95 	.word	0x08009e95
 8009f00:	08009fd9 	.word	0x08009fd9
 8009f04:	6833      	ldr	r3, [r6, #0]
 8009f06:	1d1a      	adds	r2, r3, #4
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6032      	str	r2, [r6, #0]
 8009f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f14:	2301      	movs	r3, #1
 8009f16:	e09c      	b.n	800a052 <_printf_i+0x1e6>
 8009f18:	6833      	ldr	r3, [r6, #0]
 8009f1a:	6820      	ldr	r0, [r4, #0]
 8009f1c:	1d19      	adds	r1, r3, #4
 8009f1e:	6031      	str	r1, [r6, #0]
 8009f20:	0606      	lsls	r6, r0, #24
 8009f22:	d501      	bpl.n	8009f28 <_printf_i+0xbc>
 8009f24:	681d      	ldr	r5, [r3, #0]
 8009f26:	e003      	b.n	8009f30 <_printf_i+0xc4>
 8009f28:	0645      	lsls	r5, r0, #25
 8009f2a:	d5fb      	bpl.n	8009f24 <_printf_i+0xb8>
 8009f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	da03      	bge.n	8009f3c <_printf_i+0xd0>
 8009f34:	232d      	movs	r3, #45	@ 0x2d
 8009f36:	426d      	negs	r5, r5
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f3c:	230a      	movs	r3, #10
 8009f3e:	4858      	ldr	r0, [pc, #352]	@ (800a0a0 <_printf_i+0x234>)
 8009f40:	e011      	b.n	8009f66 <_printf_i+0xfa>
 8009f42:	6821      	ldr	r1, [r4, #0]
 8009f44:	6833      	ldr	r3, [r6, #0]
 8009f46:	0608      	lsls	r0, r1, #24
 8009f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f4c:	d402      	bmi.n	8009f54 <_printf_i+0xe8>
 8009f4e:	0649      	lsls	r1, r1, #25
 8009f50:	bf48      	it	mi
 8009f52:	b2ad      	uxthmi	r5, r5
 8009f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f56:	6033      	str	r3, [r6, #0]
 8009f58:	bf14      	ite	ne
 8009f5a:	230a      	movne	r3, #10
 8009f5c:	2308      	moveq	r3, #8
 8009f5e:	4850      	ldr	r0, [pc, #320]	@ (800a0a0 <_printf_i+0x234>)
 8009f60:	2100      	movs	r1, #0
 8009f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f66:	6866      	ldr	r6, [r4, #4]
 8009f68:	2e00      	cmp	r6, #0
 8009f6a:	60a6      	str	r6, [r4, #8]
 8009f6c:	db05      	blt.n	8009f7a <_printf_i+0x10e>
 8009f6e:	6821      	ldr	r1, [r4, #0]
 8009f70:	432e      	orrs	r6, r5
 8009f72:	f021 0104 	bic.w	r1, r1, #4
 8009f76:	6021      	str	r1, [r4, #0]
 8009f78:	d04b      	beq.n	800a012 <_printf_i+0x1a6>
 8009f7a:	4616      	mov	r6, r2
 8009f7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f80:	fb03 5711 	mls	r7, r3, r1, r5
 8009f84:	5dc7      	ldrb	r7, [r0, r7]
 8009f86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f8a:	462f      	mov	r7, r5
 8009f8c:	42bb      	cmp	r3, r7
 8009f8e:	460d      	mov	r5, r1
 8009f90:	d9f4      	bls.n	8009f7c <_printf_i+0x110>
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d10b      	bne.n	8009fae <_printf_i+0x142>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	07df      	lsls	r7, r3, #31
 8009f9a:	d508      	bpl.n	8009fae <_printf_i+0x142>
 8009f9c:	6923      	ldr	r3, [r4, #16]
 8009f9e:	6861      	ldr	r1, [r4, #4]
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	bfde      	ittt	le
 8009fa4:	2330      	movle	r3, #48	@ 0x30
 8009fa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009faa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fae:	1b92      	subs	r2, r2, r6
 8009fb0:	6122      	str	r2, [r4, #16]
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	4640      	mov	r0, r8
 8009fb8:	f8cd a000 	str.w	sl, [sp]
 8009fbc:	aa03      	add	r2, sp, #12
 8009fbe:	f7ff fee3 	bl	8009d88 <_printf_common>
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d14a      	bne.n	800a05c <_printf_i+0x1f0>
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	b004      	add	sp, #16
 8009fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	f043 0320 	orr.w	r3, r3, #32
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	2778      	movs	r7, #120	@ 0x78
 8009fda:	4832      	ldr	r0, [pc, #200]	@ (800a0a4 <_printf_i+0x238>)
 8009fdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	6831      	ldr	r1, [r6, #0]
 8009fe4:	061f      	lsls	r7, r3, #24
 8009fe6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fea:	d402      	bmi.n	8009ff2 <_printf_i+0x186>
 8009fec:	065f      	lsls	r7, r3, #25
 8009fee:	bf48      	it	mi
 8009ff0:	b2ad      	uxthmi	r5, r5
 8009ff2:	6031      	str	r1, [r6, #0]
 8009ff4:	07d9      	lsls	r1, r3, #31
 8009ff6:	bf44      	itt	mi
 8009ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffc:	6023      	strmi	r3, [r4, #0]
 8009ffe:	b11d      	cbz	r5, 800a008 <_printf_i+0x19c>
 800a000:	2310      	movs	r3, #16
 800a002:	e7ad      	b.n	8009f60 <_printf_i+0xf4>
 800a004:	4826      	ldr	r0, [pc, #152]	@ (800a0a0 <_printf_i+0x234>)
 800a006:	e7e9      	b.n	8009fdc <_printf_i+0x170>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	f023 0320 	bic.w	r3, r3, #32
 800a00e:	6023      	str	r3, [r4, #0]
 800a010:	e7f6      	b.n	800a000 <_printf_i+0x194>
 800a012:	4616      	mov	r6, r2
 800a014:	e7bd      	b.n	8009f92 <_printf_i+0x126>
 800a016:	6833      	ldr	r3, [r6, #0]
 800a018:	6825      	ldr	r5, [r4, #0]
 800a01a:	1d18      	adds	r0, r3, #4
 800a01c:	6961      	ldr	r1, [r4, #20]
 800a01e:	6030      	str	r0, [r6, #0]
 800a020:	062e      	lsls	r6, r5, #24
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	d501      	bpl.n	800a02a <_printf_i+0x1be>
 800a026:	6019      	str	r1, [r3, #0]
 800a028:	e002      	b.n	800a030 <_printf_i+0x1c4>
 800a02a:	0668      	lsls	r0, r5, #25
 800a02c:	d5fb      	bpl.n	800a026 <_printf_i+0x1ba>
 800a02e:	8019      	strh	r1, [r3, #0]
 800a030:	2300      	movs	r3, #0
 800a032:	4616      	mov	r6, r2
 800a034:	6123      	str	r3, [r4, #16]
 800a036:	e7bc      	b.n	8009fb2 <_printf_i+0x146>
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	2100      	movs	r1, #0
 800a03c:	1d1a      	adds	r2, r3, #4
 800a03e:	6032      	str	r2, [r6, #0]
 800a040:	681e      	ldr	r6, [r3, #0]
 800a042:	6862      	ldr	r2, [r4, #4]
 800a044:	4630      	mov	r0, r6
 800a046:	f000 f8b3 	bl	800a1b0 <memchr>
 800a04a:	b108      	cbz	r0, 800a050 <_printf_i+0x1e4>
 800a04c:	1b80      	subs	r0, r0, r6
 800a04e:	6060      	str	r0, [r4, #4]
 800a050:	6863      	ldr	r3, [r4, #4]
 800a052:	6123      	str	r3, [r4, #16]
 800a054:	2300      	movs	r3, #0
 800a056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a05a:	e7aa      	b.n	8009fb2 <_printf_i+0x146>
 800a05c:	4632      	mov	r2, r6
 800a05e:	4649      	mov	r1, r9
 800a060:	4640      	mov	r0, r8
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	47d0      	blx	sl
 800a066:	3001      	adds	r0, #1
 800a068:	d0ad      	beq.n	8009fc6 <_printf_i+0x15a>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	079b      	lsls	r3, r3, #30
 800a06e:	d413      	bmi.n	800a098 <_printf_i+0x22c>
 800a070:	68e0      	ldr	r0, [r4, #12]
 800a072:	9b03      	ldr	r3, [sp, #12]
 800a074:	4298      	cmp	r0, r3
 800a076:	bfb8      	it	lt
 800a078:	4618      	movlt	r0, r3
 800a07a:	e7a6      	b.n	8009fca <_printf_i+0x15e>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4632      	mov	r2, r6
 800a080:	4649      	mov	r1, r9
 800a082:	4640      	mov	r0, r8
 800a084:	47d0      	blx	sl
 800a086:	3001      	adds	r0, #1
 800a088:	d09d      	beq.n	8009fc6 <_printf_i+0x15a>
 800a08a:	3501      	adds	r5, #1
 800a08c:	68e3      	ldr	r3, [r4, #12]
 800a08e:	9903      	ldr	r1, [sp, #12]
 800a090:	1a5b      	subs	r3, r3, r1
 800a092:	42ab      	cmp	r3, r5
 800a094:	dcf2      	bgt.n	800a07c <_printf_i+0x210>
 800a096:	e7eb      	b.n	800a070 <_printf_i+0x204>
 800a098:	2500      	movs	r5, #0
 800a09a:	f104 0619 	add.w	r6, r4, #25
 800a09e:	e7f5      	b.n	800a08c <_printf_i+0x220>
 800a0a0:	0800aaf3 	.word	0x0800aaf3
 800a0a4:	0800ab04 	.word	0x0800ab04

0800a0a8 <__swhatbuf_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	461e      	mov	r6, r3
 800a0b6:	b096      	sub	sp, #88	@ 0x58
 800a0b8:	da0c      	bge.n	800a0d4 <__swhatbuf_r+0x2c>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a0c2:	bf14      	ite	ne
 800a0c4:	2340      	movne	r3, #64	@ 0x40
 800a0c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	6031      	str	r1, [r6, #0]
 800a0ce:	602b      	str	r3, [r5, #0]
 800a0d0:	b016      	add	sp, #88	@ 0x58
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	466a      	mov	r2, sp
 800a0d6:	f000 f849 	bl	800a16c <_fstat_r>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	dbed      	blt.n	800a0ba <__swhatbuf_r+0x12>
 800a0de:	9901      	ldr	r1, [sp, #4]
 800a0e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a0e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a0e8:	4259      	negs	r1, r3
 800a0ea:	4159      	adcs	r1, r3
 800a0ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0f0:	e7eb      	b.n	800a0ca <__swhatbuf_r+0x22>

0800a0f2 <__smakebuf_r>:
 800a0f2:	898b      	ldrh	r3, [r1, #12]
 800a0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0f6:	079d      	lsls	r5, r3, #30
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	d507      	bpl.n	800a10e <__smakebuf_r+0x1c>
 800a0fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	6123      	str	r3, [r4, #16]
 800a106:	2301      	movs	r3, #1
 800a108:	6163      	str	r3, [r4, #20]
 800a10a:	b003      	add	sp, #12
 800a10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a10e:	466a      	mov	r2, sp
 800a110:	ab01      	add	r3, sp, #4
 800a112:	f7ff ffc9 	bl	800a0a8 <__swhatbuf_r>
 800a116:	9f00      	ldr	r7, [sp, #0]
 800a118:	4605      	mov	r5, r0
 800a11a:	4639      	mov	r1, r7
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff f8a5 	bl	800926c <_malloc_r>
 800a122:	b948      	cbnz	r0, 800a138 <__smakebuf_r+0x46>
 800a124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a128:	059a      	lsls	r2, r3, #22
 800a12a:	d4ee      	bmi.n	800a10a <__smakebuf_r+0x18>
 800a12c:	f023 0303 	bic.w	r3, r3, #3
 800a130:	f043 0302 	orr.w	r3, r3, #2
 800a134:	81a3      	strh	r3, [r4, #12]
 800a136:	e7e2      	b.n	800a0fe <__smakebuf_r+0xc>
 800a138:	89a3      	ldrh	r3, [r4, #12]
 800a13a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a13e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	6020      	str	r0, [r4, #0]
 800a148:	b15b      	cbz	r3, 800a162 <__smakebuf_r+0x70>
 800a14a:	4630      	mov	r0, r6
 800a14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a150:	f000 f81e 	bl	800a190 <_isatty_r>
 800a154:	b128      	cbz	r0, 800a162 <__smakebuf_r+0x70>
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	f023 0303 	bic.w	r3, r3, #3
 800a15c:	f043 0301 	orr.w	r3, r3, #1
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	431d      	orrs	r5, r3
 800a166:	81a5      	strh	r5, [r4, #12]
 800a168:	e7cf      	b.n	800a10a <__smakebuf_r+0x18>
	...

0800a16c <_fstat_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	2300      	movs	r3, #0
 800a170:	4d06      	ldr	r5, [pc, #24]	@ (800a18c <_fstat_r+0x20>)
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	4611      	mov	r1, r2
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	f7fc feb7 	bl	8006eec <_fstat>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d102      	bne.n	800a188 <_fstat_r+0x1c>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	b103      	cbz	r3, 800a188 <_fstat_r+0x1c>
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	bd38      	pop	{r3, r4, r5, pc}
 800a18a:	bf00      	nop
 800a18c:	2000065c 	.word	0x2000065c

0800a190 <_isatty_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	2300      	movs	r3, #0
 800a194:	4d05      	ldr	r5, [pc, #20]	@ (800a1ac <_isatty_r+0x1c>)
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	602b      	str	r3, [r5, #0]
 800a19c:	f7fc feb5 	bl	8006f0a <_isatty>
 800a1a0:	1c43      	adds	r3, r0, #1
 800a1a2:	d102      	bne.n	800a1aa <_isatty_r+0x1a>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	b103      	cbz	r3, 800a1aa <_isatty_r+0x1a>
 800a1a8:	6023      	str	r3, [r4, #0]
 800a1aa:	bd38      	pop	{r3, r4, r5, pc}
 800a1ac:	2000065c 	.word	0x2000065c

0800a1b0 <memchr>:
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	b2c9      	uxtb	r1, r1
 800a1b6:	4402      	add	r2, r0
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	d101      	bne.n	800a1c2 <memchr+0x12>
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e003      	b.n	800a1ca <memchr+0x1a>
 800a1c2:	7804      	ldrb	r4, [r0, #0]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	428c      	cmp	r4, r1
 800a1c8:	d1f6      	bne.n	800a1b8 <memchr+0x8>
 800a1ca:	bd10      	pop	{r4, pc}

0800a1cc <_init>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	bf00      	nop
 800a1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d2:	bc08      	pop	{r3}
 800a1d4:	469e      	mov	lr, r3
 800a1d6:	4770      	bx	lr

0800a1d8 <_fini>:
 800a1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1da:	bf00      	nop
 800a1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	469e      	mov	lr, r3
 800a1e2:	4770      	bx	lr
